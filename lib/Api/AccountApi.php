<?php
/**
 * AccountApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AccountApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'accountCartAdd' => [
            'application/json',
        ],
        'accountCartList' => [
            'application/json',
        ],
        'accountConfigUpdate' => [
            'application/json',
        ],
        'accountFailedWebhooks' => [
            'application/json',
        ],
        'accountSupportedPlatforms' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountCartAdd
     *
     * account.cart.add
     *
     * @param  \OpenAPI\Client\Model\AccountCartAdd $account_cart_add account_cart_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCartAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccountCartAdd200Response
     */
    public function accountCartAdd($account_cart_add, string $contentType = self::contentTypes['accountCartAdd'][0])
    {
        list($response) = $this->accountCartAddWithHttpInfo($account_cart_add, $contentType);
        return $response;
    }

    /**
     * Operation accountCartAddWithHttpInfo
     *
     * account.cart.add
     *
     * @param  \OpenAPI\Client\Model\AccountCartAdd $account_cart_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCartAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccountCartAdd200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountCartAddWithHttpInfo($account_cart_add, string $contentType = self::contentTypes['accountCartAdd'][0])
    {
        $request = $this->accountCartAddRequest($account_cart_add, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccountCartAdd200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccountCartAdd200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccountCartAdd200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AccountCartAdd200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccountCartAdd200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountCartAddAsync
     *
     * account.cart.add
     *
     * @param  \OpenAPI\Client\Model\AccountCartAdd $account_cart_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCartAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCartAddAsync($account_cart_add, string $contentType = self::contentTypes['accountCartAdd'][0])
    {
        return $this->accountCartAddAsyncWithHttpInfo($account_cart_add, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountCartAddAsyncWithHttpInfo
     *
     * account.cart.add
     *
     * @param  \OpenAPI\Client\Model\AccountCartAdd $account_cart_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCartAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCartAddAsyncWithHttpInfo($account_cart_add, string $contentType = self::contentTypes['accountCartAdd'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccountCartAdd200Response';
        $request = $this->accountCartAddRequest($account_cart_add, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountCartAdd'
     *
     * @param  \OpenAPI\Client\Model\AccountCartAdd $account_cart_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCartAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountCartAddRequest($account_cart_add, string $contentType = self::contentTypes['accountCartAdd'][0])
    {

        // verify the required parameter 'account_cart_add' is set
        if ($account_cart_add === null || (is_array($account_cart_add) && count($account_cart_add) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_cart_add when calling accountCartAdd'
            );
        }


        $resourcePath = '/account.cart.add.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_cart_add)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_cart_add));
            } else {
                $httpBody = $account_cart_add;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountCartList
     *
     * account.cart.list
     *
     * @param  string|null $store_url A web address of a store (optional)
     * @param  string|null $store_key Find store by store key (optional)
     * @param  string|null $request_from_date Retrieve entities from their creation date (optional)
     * @param  string|null $request_to_date Retrieve entities to their creation date (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'force_all')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCartList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccountCartList200Response
     */
    public function accountCartList($store_url = null, $store_key = null, $request_from_date = null, $request_to_date = null, $params = 'force_all', $exclude = null, string $contentType = self::contentTypes['accountCartList'][0])
    {
        list($response) = $this->accountCartListWithHttpInfo($store_url, $store_key, $request_from_date, $request_to_date, $params, $exclude, $contentType);
        return $response;
    }

    /**
     * Operation accountCartListWithHttpInfo
     *
     * account.cart.list
     *
     * @param  string|null $store_url A web address of a store (optional)
     * @param  string|null $store_key Find store by store key (optional)
     * @param  string|null $request_from_date Retrieve entities from their creation date (optional)
     * @param  string|null $request_to_date Retrieve entities to their creation date (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'force_all')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCartList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccountCartList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountCartListWithHttpInfo($store_url = null, $store_key = null, $request_from_date = null, $request_to_date = null, $params = 'force_all', $exclude = null, string $contentType = self::contentTypes['accountCartList'][0])
    {
        $request = $this->accountCartListRequest($store_url, $store_key, $request_from_date, $request_to_date, $params, $exclude, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccountCartList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccountCartList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccountCartList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AccountCartList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccountCartList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountCartListAsync
     *
     * account.cart.list
     *
     * @param  string|null $store_url A web address of a store (optional)
     * @param  string|null $store_key Find store by store key (optional)
     * @param  string|null $request_from_date Retrieve entities from their creation date (optional)
     * @param  string|null $request_to_date Retrieve entities to their creation date (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'force_all')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCartList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCartListAsync($store_url = null, $store_key = null, $request_from_date = null, $request_to_date = null, $params = 'force_all', $exclude = null, string $contentType = self::contentTypes['accountCartList'][0])
    {
        return $this->accountCartListAsyncWithHttpInfo($store_url, $store_key, $request_from_date, $request_to_date, $params, $exclude, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountCartListAsyncWithHttpInfo
     *
     * account.cart.list
     *
     * @param  string|null $store_url A web address of a store (optional)
     * @param  string|null $store_key Find store by store key (optional)
     * @param  string|null $request_from_date Retrieve entities from their creation date (optional)
     * @param  string|null $request_to_date Retrieve entities to their creation date (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'force_all')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCartList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCartListAsyncWithHttpInfo($store_url = null, $store_key = null, $request_from_date = null, $request_to_date = null, $params = 'force_all', $exclude = null, string $contentType = self::contentTypes['accountCartList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccountCartList200Response';
        $request = $this->accountCartListRequest($store_url, $store_key, $request_from_date, $request_to_date, $params, $exclude, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountCartList'
     *
     * @param  string|null $store_url A web address of a store (optional)
     * @param  string|null $store_key Find store by store key (optional)
     * @param  string|null $request_from_date Retrieve entities from their creation date (optional)
     * @param  string|null $request_to_date Retrieve entities to their creation date (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'force_all')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountCartList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountCartListRequest($store_url = null, $store_key = null, $request_from_date = null, $request_to_date = null, $params = 'force_all', $exclude = null, string $contentType = self::contentTypes['accountCartList'][0])
    {








        $resourcePath = '/account.cart.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_url,
            'store_url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_key,
            'store_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_from_date,
            'request_from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_to_date,
            'request_to_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $params,
            'params', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude,
            'exclude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountConfigUpdate
     *
     * account.config.update
     *
     * @param  bool|null $replace_parameters Identifies if there is a necessity to replace parameters (optional)
     * @param  string|null $new_store_url The web address of the store you want to update to connect to API2Cart (optional)
     * @param  string|null $new_store_key Update store key (optional)
     * @param  string|null $bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param  string|null $store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param  string|null $db_tables_prefix DB tables prefix (optional)
     * @param  string|null $user_agent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)
     * @param  string|null $_3dcart_private_key 3DCart Private Key (optional)
     * @param  string|null $_3dcart_access_token 3DCart Token (optional)
     * @param  string|null $_3dcartapi_api_key 3DCart API Key (optional)
     * @param  string|null $amazon_sp_client_id Amazon SP API app client id (optional)
     * @param  string|null $amazon_sp_client_secret Amazon SP API app client secret (optional)
     * @param  string|null $amazon_sp_refresh_token Amazon SP API OAuth refresh token (optional)
     * @param  string|null $amazon_sp_aws_region Amazon AWS Region (optional)
     * @param  string|null $amazon_sp_api_environment Amazon SP API environment (optional, default to 'production')
     * @param  string|null $amazon_seller_id Amazon Seller ID (Merchant token) (optional)
     * @param  string|null $aspdotnetstorefront_api_user It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param  string|null $aspdotnetstorefront_api_pass AspDotNetStorefront API Password (optional)
     * @param  string|null $bigcommerceapi_admin_account It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param  string|null $bigcommerceapi_api_path BigCommerce API URL (optional)
     * @param  string|null $bigcommerceapi_api_key Bigcommerce API Key (optional)
     * @param  string|null $bigcommerceapi_client_id Client ID of the requesting app (optional)
     * @param  string|null $bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $bigcommerceapi_context API Path section unique to the store (optional)
     * @param  string|null $bol_api_key Bol API Key (optional)
     * @param  string|null $bol_api_secret Bol API Secret (optional)
     * @param  int|null $bol_retailer_id Bol Retailer ID (optional)
     * @param  string|null $demandware_client_id Demandware client id (optional)
     * @param  string|null $demandware_api_password Demandware api password (optional)
     * @param  string|null $demandware_user_name Demandware user name (optional)
     * @param  string|null $demandware_user_password Demandware user password (optional)
     * @param  string|null $ebay_client_id Application ID (AppID). (optional)
     * @param  string|null $ebay_client_secret Shared Secret from eBay application (optional)
     * @param  string|null $ebay_runame The RuName value that eBay assigns to your application. (optional)
     * @param  string|null $ebay_access_token Used to authenticate API requests. (optional)
     * @param  string|null $ebay_refresh_token Used to renew the access token. (optional)
     * @param  string|null $ebay_environment eBay environment (optional)
     * @param  int|null $ebay_site_id eBay global ID (optional, default to 0)
     * @param  string|null $ecwid_acess_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $ecwid_store_id Store Id (optional)
     * @param  string|null $lazada_app_id Lazada App ID (optional)
     * @param  string|null $lazada_app_secret Lazada App Secret (optional)
     * @param  string|null $lazada_refresh_token Lazada Refresh Token (optional)
     * @param  string|null $lazada_region Lazada API endpoint Region (optional)
     * @param  string|null $etsy_keystring Etsy keystring (optional)
     * @param  string|null $etsy_shared_secret Etsy shared secret (optional)
     * @param  string|null $etsy_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $etsy_token_secret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $etsy_client_id Etsy Client Id (optional)
     * @param  string|null $etsy_refresh_token Etsy Refresh token (optional)
     * @param  string|null $facebook_app_id Facebook App ID (optional)
     * @param  string|null $facebook_app_secret Facebook App Secret (optional)
     * @param  string|null $facebook_access_token Facebook Access Token (optional)
     * @param  string|null $facebook_business_id Facebook Business ID (optional)
     * @param  string|null $neto_api_key Neto API Key (optional)
     * @param  string|null $neto_api_username Neto User Name (optional)
     * @param  string|null $shopline_access_token Shopline APP Key (optional)
     * @param  string|null $shopline_app_key Shopline APP Key (optional)
     * @param  string|null $shopline_app_secret Shopline App Secret (optional)
     * @param  string|null $shopline_shared_secret Shopline Shared Secret (optional)
     * @param  string|null $shopify_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $shopify_api_key Shopify API Key (optional)
     * @param  string|null $shopify_api_password Shopify API Password (optional)
     * @param  string|null $shopify_shared_secret Shared secret (optional)
     * @param  string|null $shopee_partner_id Shopee Partner ID (optional)
     * @param  string|null $shopee_partner_key Shopee Partner Key (optional)
     * @param  string|null $shopee_shop_id Shopee SHOP ID (optional)
     * @param  string|null $shopee_refresh_token Shopee Refresh Token (optional)
     * @param  string|null $shopee_region Shopee API endpoint Region. Use for Chinese Mainland or Brazil. (optional)
     * @param  string|null $shopee_environment Shopee Environment (optional)
     * @param  string|null $shoplazza_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $shoplazza_shared_secret Shared secret (optional)
     * @param  string|null $miva_access_token Miva access token (optional)
     * @param  string|null $miva_signature Miva signature (optional)
     * @param  string|null $shopware_access_key Shopware access key (optional)
     * @param  string|null $shopware_api_key Shopware api key (optional)
     * @param  string|null $shopware_api_secret Shopware client secret access key (optional)
     * @param  string|null $bigcartel_user_name Subdomain of store (optional)
     * @param  string|null $bigcartel_password BigCartel account password (optional)
     * @param  string|null $volusion_login It&#39;s a Volusion account for which API is enabled (optional)
     * @param  string|null $volusion_password Volusion API Password (optional)
     * @param  string|null $walmart_client_id Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)
     * @param  string|null $walmart_client_secret Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)
     * @param  string|null $walmart_environment Walmart environment (optional, default to 'production')
     * @param  string|null $walmart_channel_type Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param  string|null $walmart_region Walmart region (optional, default to 'us')
     * @param  string|null $square_client_id Square (Weebly) Client ID (optional)
     * @param  string|null $square_client_secret Square (Weebly) Client Secret (optional)
     * @param  string|null $square_refresh_token Square (Weebly) Refresh Token (optional)
     * @param  string|null $squarespace_api_key Squarespace API Key (optional)
     * @param  string|null $squarespace_client_id Squarespace Connector Client ID (optional)
     * @param  string|null $squarespace_client_secret Squarespace Connector Client Secret (optional)
     * @param  string|null $squarespace_access_token Squarespace access token (optional)
     * @param  string|null $squarespace_refresh_token Squarespace refresh token (optional)
     * @param  string|null $hybris_client_id Omni Commerce Connector Client ID (optional)
     * @param  string|null $hybris_client_secret Omni Commerce Connector Client Secret (optional)
     * @param  string|null $hybris_username User Name (optional)
     * @param  string|null $hybris_password User password (optional)
     * @param  string[]|null $hybris_websites Websites to stores mapping data (optional)
     * @param  string|null $lightspeed_api_key LightSpeed api key (optional)
     * @param  string|null $lightspeed_api_secret LightSpeed api secret (optional)
     * @param  string|null $commercehq_api_key CommerceHQ api key (optional)
     * @param  string|null $commercehq_api_password CommerceHQ api password (optional)
     * @param  string|null $wc_consumer_key Woocommerce consumer key (optional)
     * @param  string|null $wc_consumer_secret Woocommerce consumer secret (optional)
     * @param  string|null $magento_consumer_key Magento Consumer Key (optional)
     * @param  string|null $magento_consumer_secret Magento Consumer Secret (optional)
     * @param  string|null $magento_access_token Magento Access Token (optional)
     * @param  string|null $magento_token_secret Magento Token Secret (optional)
     * @param  string|null $prestashop_webservice_key Prestashop webservice key (optional)
     * @param  string|null $wix_app_id Wix App ID (optional)
     * @param  string|null $wix_app_secret_key Wix App Secret Key (optional)
     * @param  string|null $wix_instance_id Wix Instance ID (optional)
     * @param  string|null $wix_refresh_token Wix refresh token (optional)
     * @param  string|null $mercado_libre_app_id Mercado Libre App ID (optional)
     * @param  string|null $mercado_libre_app_secret_key Mercado Libre App Secret Key (optional)
     * @param  string|null $mercado_libre_refresh_token Mercado Libre Refresh Token (optional)
     * @param  int|null $zid_client_id Zid Client ID (optional)
     * @param  string|null $zid_client_secret Zid Client Secret (optional)
     * @param  string|null $zid_access_token Zid Access Token (optional)
     * @param  string|null $zid_authorization Zid Authorization (optional)
     * @param  string|null $zid_refresh_token Zid refresh token (optional)
     * @param  string|null $flipkart_client_id Flipkart Client ID (optional)
     * @param  string|null $flipkart_client_secret Flipkart Client Secret (optional)
     * @param  string|null $allegro_client_id Allegro Client ID (optional)
     * @param  string|null $allegro_client_secret Allegro Client Secret (optional)
     * @param  string|null $allegro_access_token Allegro Access Token (optional)
     * @param  string|null $allegro_refresh_token Allegro Refresh Token (optional)
     * @param  string|null $allegro_environment Allegro Environment (optional, default to 'production')
     * @param  string|null $zoho_client_id Zoho Client ID (optional)
     * @param  string|null $zoho_client_secret Zoho Client Secret (optional)
     * @param  string|null $zoho_refresh_token Zoho Refresh Token (optional)
     * @param  string|null $zoho_region Zoho API endpoint Region (optional)
     * @param  int|null $tiendanube_user_id Tiendanube User ID (optional)
     * @param  string|null $tiendanube_access_token Tiendanube Access Token (optional)
     * @param  string|null $tiendanube_client_secret Tiendanube Client Secret (optional)
     * @param  string|null $otto_client_id Otto Client ID (optional)
     * @param  string|null $otto_client_secret Otto Client Secret (optional)
     * @param  string|null $otto_app_id Otto App ID (optional)
     * @param  string|null $otto_refresh_token Otto Refresh Token (optional)
     * @param  string|null $otto_environment Otto Environment (optional)
     * @param  string|null $otto_access_token Otto Access Token (optional)
     * @param  string|null $tiktokshop_app_key TikTok Shop App Key (optional)
     * @param  string|null $tiktokshop_app_secret TikTok Shop App Secret (optional)
     * @param  string|null $tiktokshop_refresh_token TikTok Shop Refresh Token (optional)
     * @param  string|null $tiktokshop_access_token TikTok Shop Access Token (optional)
     * @param  string|null $salla_client_id Salla Client ID (optional)
     * @param  string|null $salla_client_secret Salla Client Secret (optional)
     * @param  string|null $salla_refresh_token Salla Refresh Token (optional)
     * @param  string|null $salla_access_token Salla Access Token (optional)
     * @param  string|null $temu_app_key Temu App Key (optional)
     * @param  string|null $temu_app_secret Temu App Secret (optional)
     * @param  string|null $temu_access_token Temu Access Token (optional)
     * @param  string|null $temu_region Temu API endpoint Region. (optional, default to 'US')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountConfigUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccountConfigUpdate200Response
     */
    public function accountConfigUpdate($replace_parameters = null, $new_store_url = null, $new_store_key = null, $bridge_url = null, $store_root = null, $db_tables_prefix = null, $user_agent = null, $_3dcart_private_key = null, $_3dcart_access_token = null, $_3dcartapi_api_key = null, $amazon_sp_client_id = null, $amazon_sp_client_secret = null, $amazon_sp_refresh_token = null, $amazon_sp_aws_region = null, $amazon_sp_api_environment = 'production', $amazon_seller_id = null, $aspdotnetstorefront_api_user = null, $aspdotnetstorefront_api_pass = null, $bigcommerceapi_admin_account = null, $bigcommerceapi_api_path = null, $bigcommerceapi_api_key = null, $bigcommerceapi_client_id = null, $bigcommerceapi_access_token = null, $bigcommerceapi_context = null, $bol_api_key = null, $bol_api_secret = null, $bol_retailer_id = null, $demandware_client_id = null, $demandware_api_password = null, $demandware_user_name = null, $demandware_user_password = null, $ebay_client_id = null, $ebay_client_secret = null, $ebay_runame = null, $ebay_access_token = null, $ebay_refresh_token = null, $ebay_environment = null, $ebay_site_id = 0, $ecwid_acess_token = null, $ecwid_store_id = null, $lazada_app_id = null, $lazada_app_secret = null, $lazada_refresh_token = null, $lazada_region = null, $etsy_keystring = null, $etsy_shared_secret = null, $etsy_access_token = null, $etsy_token_secret = null, $etsy_client_id = null, $etsy_refresh_token = null, $facebook_app_id = null, $facebook_app_secret = null, $facebook_access_token = null, $facebook_business_id = null, $neto_api_key = null, $neto_api_username = null, $shopline_access_token = null, $shopline_app_key = null, $shopline_app_secret = null, $shopline_shared_secret = null, $shopify_access_token = null, $shopify_api_key = null, $shopify_api_password = null, $shopify_shared_secret = null, $shopee_partner_id = null, $shopee_partner_key = null, $shopee_shop_id = null, $shopee_refresh_token = null, $shopee_region = null, $shopee_environment = null, $shoplazza_access_token = null, $shoplazza_shared_secret = null, $miva_access_token = null, $miva_signature = null, $shopware_access_key = null, $shopware_api_key = null, $shopware_api_secret = null, $bigcartel_user_name = null, $bigcartel_password = null, $volusion_login = null, $volusion_password = null, $walmart_client_id = null, $walmart_client_secret = null, $walmart_environment = 'production', $walmart_channel_type = null, $walmart_region = 'us', $square_client_id = null, $square_client_secret = null, $square_refresh_token = null, $squarespace_api_key = null, $squarespace_client_id = null, $squarespace_client_secret = null, $squarespace_access_token = null, $squarespace_refresh_token = null, $hybris_client_id = null, $hybris_client_secret = null, $hybris_username = null, $hybris_password = null, $hybris_websites = null, $lightspeed_api_key = null, $lightspeed_api_secret = null, $commercehq_api_key = null, $commercehq_api_password = null, $wc_consumer_key = null, $wc_consumer_secret = null, $magento_consumer_key = null, $magento_consumer_secret = null, $magento_access_token = null, $magento_token_secret = null, $prestashop_webservice_key = null, $wix_app_id = null, $wix_app_secret_key = null, $wix_instance_id = null, $wix_refresh_token = null, $mercado_libre_app_id = null, $mercado_libre_app_secret_key = null, $mercado_libre_refresh_token = null, $zid_client_id = null, $zid_client_secret = null, $zid_access_token = null, $zid_authorization = null, $zid_refresh_token = null, $flipkart_client_id = null, $flipkart_client_secret = null, $allegro_client_id = null, $allegro_client_secret = null, $allegro_access_token = null, $allegro_refresh_token = null, $allegro_environment = 'production', $zoho_client_id = null, $zoho_client_secret = null, $zoho_refresh_token = null, $zoho_region = null, $tiendanube_user_id = null, $tiendanube_access_token = null, $tiendanube_client_secret = null, $otto_client_id = null, $otto_client_secret = null, $otto_app_id = null, $otto_refresh_token = null, $otto_environment = null, $otto_access_token = null, $tiktokshop_app_key = null, $tiktokshop_app_secret = null, $tiktokshop_refresh_token = null, $tiktokshop_access_token = null, $salla_client_id = null, $salla_client_secret = null, $salla_refresh_token = null, $salla_access_token = null, $temu_app_key = null, $temu_app_secret = null, $temu_access_token = null, $temu_region = 'US', string $contentType = self::contentTypes['accountConfigUpdate'][0])
    {
        list($response) = $this->accountConfigUpdateWithHttpInfo($replace_parameters, $new_store_url, $new_store_key, $bridge_url, $store_root, $db_tables_prefix, $user_agent, $_3dcart_private_key, $_3dcart_access_token, $_3dcartapi_api_key, $amazon_sp_client_id, $amazon_sp_client_secret, $amazon_sp_refresh_token, $amazon_sp_aws_region, $amazon_sp_api_environment, $amazon_seller_id, $aspdotnetstorefront_api_user, $aspdotnetstorefront_api_pass, $bigcommerceapi_admin_account, $bigcommerceapi_api_path, $bigcommerceapi_api_key, $bigcommerceapi_client_id, $bigcommerceapi_access_token, $bigcommerceapi_context, $bol_api_key, $bol_api_secret, $bol_retailer_id, $demandware_client_id, $demandware_api_password, $demandware_user_name, $demandware_user_password, $ebay_client_id, $ebay_client_secret, $ebay_runame, $ebay_access_token, $ebay_refresh_token, $ebay_environment, $ebay_site_id, $ecwid_acess_token, $ecwid_store_id, $lazada_app_id, $lazada_app_secret, $lazada_refresh_token, $lazada_region, $etsy_keystring, $etsy_shared_secret, $etsy_access_token, $etsy_token_secret, $etsy_client_id, $etsy_refresh_token, $facebook_app_id, $facebook_app_secret, $facebook_access_token, $facebook_business_id, $neto_api_key, $neto_api_username, $shopline_access_token, $shopline_app_key, $shopline_app_secret, $shopline_shared_secret, $shopify_access_token, $shopify_api_key, $shopify_api_password, $shopify_shared_secret, $shopee_partner_id, $shopee_partner_key, $shopee_shop_id, $shopee_refresh_token, $shopee_region, $shopee_environment, $shoplazza_access_token, $shoplazza_shared_secret, $miva_access_token, $miva_signature, $shopware_access_key, $shopware_api_key, $shopware_api_secret, $bigcartel_user_name, $bigcartel_password, $volusion_login, $volusion_password, $walmart_client_id, $walmart_client_secret, $walmart_environment, $walmart_channel_type, $walmart_region, $square_client_id, $square_client_secret, $square_refresh_token, $squarespace_api_key, $squarespace_client_id, $squarespace_client_secret, $squarespace_access_token, $squarespace_refresh_token, $hybris_client_id, $hybris_client_secret, $hybris_username, $hybris_password, $hybris_websites, $lightspeed_api_key, $lightspeed_api_secret, $commercehq_api_key, $commercehq_api_password, $wc_consumer_key, $wc_consumer_secret, $magento_consumer_key, $magento_consumer_secret, $magento_access_token, $magento_token_secret, $prestashop_webservice_key, $wix_app_id, $wix_app_secret_key, $wix_instance_id, $wix_refresh_token, $mercado_libre_app_id, $mercado_libre_app_secret_key, $mercado_libre_refresh_token, $zid_client_id, $zid_client_secret, $zid_access_token, $zid_authorization, $zid_refresh_token, $flipkart_client_id, $flipkart_client_secret, $allegro_client_id, $allegro_client_secret, $allegro_access_token, $allegro_refresh_token, $allegro_environment, $zoho_client_id, $zoho_client_secret, $zoho_refresh_token, $zoho_region, $tiendanube_user_id, $tiendanube_access_token, $tiendanube_client_secret, $otto_client_id, $otto_client_secret, $otto_app_id, $otto_refresh_token, $otto_environment, $otto_access_token, $tiktokshop_app_key, $tiktokshop_app_secret, $tiktokshop_refresh_token, $tiktokshop_access_token, $salla_client_id, $salla_client_secret, $salla_refresh_token, $salla_access_token, $temu_app_key, $temu_app_secret, $temu_access_token, $temu_region, $contentType);
        return $response;
    }

    /**
     * Operation accountConfigUpdateWithHttpInfo
     *
     * account.config.update
     *
     * @param  bool|null $replace_parameters Identifies if there is a necessity to replace parameters (optional)
     * @param  string|null $new_store_url The web address of the store you want to update to connect to API2Cart (optional)
     * @param  string|null $new_store_key Update store key (optional)
     * @param  string|null $bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param  string|null $store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param  string|null $db_tables_prefix DB tables prefix (optional)
     * @param  string|null $user_agent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)
     * @param  string|null $_3dcart_private_key 3DCart Private Key (optional)
     * @param  string|null $_3dcart_access_token 3DCart Token (optional)
     * @param  string|null $_3dcartapi_api_key 3DCart API Key (optional)
     * @param  string|null $amazon_sp_client_id Amazon SP API app client id (optional)
     * @param  string|null $amazon_sp_client_secret Amazon SP API app client secret (optional)
     * @param  string|null $amazon_sp_refresh_token Amazon SP API OAuth refresh token (optional)
     * @param  string|null $amazon_sp_aws_region Amazon AWS Region (optional)
     * @param  string|null $amazon_sp_api_environment Amazon SP API environment (optional, default to 'production')
     * @param  string|null $amazon_seller_id Amazon Seller ID (Merchant token) (optional)
     * @param  string|null $aspdotnetstorefront_api_user It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param  string|null $aspdotnetstorefront_api_pass AspDotNetStorefront API Password (optional)
     * @param  string|null $bigcommerceapi_admin_account It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param  string|null $bigcommerceapi_api_path BigCommerce API URL (optional)
     * @param  string|null $bigcommerceapi_api_key Bigcommerce API Key (optional)
     * @param  string|null $bigcommerceapi_client_id Client ID of the requesting app (optional)
     * @param  string|null $bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $bigcommerceapi_context API Path section unique to the store (optional)
     * @param  string|null $bol_api_key Bol API Key (optional)
     * @param  string|null $bol_api_secret Bol API Secret (optional)
     * @param  int|null $bol_retailer_id Bol Retailer ID (optional)
     * @param  string|null $demandware_client_id Demandware client id (optional)
     * @param  string|null $demandware_api_password Demandware api password (optional)
     * @param  string|null $demandware_user_name Demandware user name (optional)
     * @param  string|null $demandware_user_password Demandware user password (optional)
     * @param  string|null $ebay_client_id Application ID (AppID). (optional)
     * @param  string|null $ebay_client_secret Shared Secret from eBay application (optional)
     * @param  string|null $ebay_runame The RuName value that eBay assigns to your application. (optional)
     * @param  string|null $ebay_access_token Used to authenticate API requests. (optional)
     * @param  string|null $ebay_refresh_token Used to renew the access token. (optional)
     * @param  string|null $ebay_environment eBay environment (optional)
     * @param  int|null $ebay_site_id eBay global ID (optional, default to 0)
     * @param  string|null $ecwid_acess_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $ecwid_store_id Store Id (optional)
     * @param  string|null $lazada_app_id Lazada App ID (optional)
     * @param  string|null $lazada_app_secret Lazada App Secret (optional)
     * @param  string|null $lazada_refresh_token Lazada Refresh Token (optional)
     * @param  string|null $lazada_region Lazada API endpoint Region (optional)
     * @param  string|null $etsy_keystring Etsy keystring (optional)
     * @param  string|null $etsy_shared_secret Etsy shared secret (optional)
     * @param  string|null $etsy_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $etsy_token_secret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $etsy_client_id Etsy Client Id (optional)
     * @param  string|null $etsy_refresh_token Etsy Refresh token (optional)
     * @param  string|null $facebook_app_id Facebook App ID (optional)
     * @param  string|null $facebook_app_secret Facebook App Secret (optional)
     * @param  string|null $facebook_access_token Facebook Access Token (optional)
     * @param  string|null $facebook_business_id Facebook Business ID (optional)
     * @param  string|null $neto_api_key Neto API Key (optional)
     * @param  string|null $neto_api_username Neto User Name (optional)
     * @param  string|null $shopline_access_token Shopline APP Key (optional)
     * @param  string|null $shopline_app_key Shopline APP Key (optional)
     * @param  string|null $shopline_app_secret Shopline App Secret (optional)
     * @param  string|null $shopline_shared_secret Shopline Shared Secret (optional)
     * @param  string|null $shopify_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $shopify_api_key Shopify API Key (optional)
     * @param  string|null $shopify_api_password Shopify API Password (optional)
     * @param  string|null $shopify_shared_secret Shared secret (optional)
     * @param  string|null $shopee_partner_id Shopee Partner ID (optional)
     * @param  string|null $shopee_partner_key Shopee Partner Key (optional)
     * @param  string|null $shopee_shop_id Shopee SHOP ID (optional)
     * @param  string|null $shopee_refresh_token Shopee Refresh Token (optional)
     * @param  string|null $shopee_region Shopee API endpoint Region. Use for Chinese Mainland or Brazil. (optional)
     * @param  string|null $shopee_environment Shopee Environment (optional)
     * @param  string|null $shoplazza_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $shoplazza_shared_secret Shared secret (optional)
     * @param  string|null $miva_access_token Miva access token (optional)
     * @param  string|null $miva_signature Miva signature (optional)
     * @param  string|null $shopware_access_key Shopware access key (optional)
     * @param  string|null $shopware_api_key Shopware api key (optional)
     * @param  string|null $shopware_api_secret Shopware client secret access key (optional)
     * @param  string|null $bigcartel_user_name Subdomain of store (optional)
     * @param  string|null $bigcartel_password BigCartel account password (optional)
     * @param  string|null $volusion_login It&#39;s a Volusion account for which API is enabled (optional)
     * @param  string|null $volusion_password Volusion API Password (optional)
     * @param  string|null $walmart_client_id Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)
     * @param  string|null $walmart_client_secret Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)
     * @param  string|null $walmart_environment Walmart environment (optional, default to 'production')
     * @param  string|null $walmart_channel_type Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param  string|null $walmart_region Walmart region (optional, default to 'us')
     * @param  string|null $square_client_id Square (Weebly) Client ID (optional)
     * @param  string|null $square_client_secret Square (Weebly) Client Secret (optional)
     * @param  string|null $square_refresh_token Square (Weebly) Refresh Token (optional)
     * @param  string|null $squarespace_api_key Squarespace API Key (optional)
     * @param  string|null $squarespace_client_id Squarespace Connector Client ID (optional)
     * @param  string|null $squarespace_client_secret Squarespace Connector Client Secret (optional)
     * @param  string|null $squarespace_access_token Squarespace access token (optional)
     * @param  string|null $squarespace_refresh_token Squarespace refresh token (optional)
     * @param  string|null $hybris_client_id Omni Commerce Connector Client ID (optional)
     * @param  string|null $hybris_client_secret Omni Commerce Connector Client Secret (optional)
     * @param  string|null $hybris_username User Name (optional)
     * @param  string|null $hybris_password User password (optional)
     * @param  string[]|null $hybris_websites Websites to stores mapping data (optional)
     * @param  string|null $lightspeed_api_key LightSpeed api key (optional)
     * @param  string|null $lightspeed_api_secret LightSpeed api secret (optional)
     * @param  string|null $commercehq_api_key CommerceHQ api key (optional)
     * @param  string|null $commercehq_api_password CommerceHQ api password (optional)
     * @param  string|null $wc_consumer_key Woocommerce consumer key (optional)
     * @param  string|null $wc_consumer_secret Woocommerce consumer secret (optional)
     * @param  string|null $magento_consumer_key Magento Consumer Key (optional)
     * @param  string|null $magento_consumer_secret Magento Consumer Secret (optional)
     * @param  string|null $magento_access_token Magento Access Token (optional)
     * @param  string|null $magento_token_secret Magento Token Secret (optional)
     * @param  string|null $prestashop_webservice_key Prestashop webservice key (optional)
     * @param  string|null $wix_app_id Wix App ID (optional)
     * @param  string|null $wix_app_secret_key Wix App Secret Key (optional)
     * @param  string|null $wix_instance_id Wix Instance ID (optional)
     * @param  string|null $wix_refresh_token Wix refresh token (optional)
     * @param  string|null $mercado_libre_app_id Mercado Libre App ID (optional)
     * @param  string|null $mercado_libre_app_secret_key Mercado Libre App Secret Key (optional)
     * @param  string|null $mercado_libre_refresh_token Mercado Libre Refresh Token (optional)
     * @param  int|null $zid_client_id Zid Client ID (optional)
     * @param  string|null $zid_client_secret Zid Client Secret (optional)
     * @param  string|null $zid_access_token Zid Access Token (optional)
     * @param  string|null $zid_authorization Zid Authorization (optional)
     * @param  string|null $zid_refresh_token Zid refresh token (optional)
     * @param  string|null $flipkart_client_id Flipkart Client ID (optional)
     * @param  string|null $flipkart_client_secret Flipkart Client Secret (optional)
     * @param  string|null $allegro_client_id Allegro Client ID (optional)
     * @param  string|null $allegro_client_secret Allegro Client Secret (optional)
     * @param  string|null $allegro_access_token Allegro Access Token (optional)
     * @param  string|null $allegro_refresh_token Allegro Refresh Token (optional)
     * @param  string|null $allegro_environment Allegro Environment (optional, default to 'production')
     * @param  string|null $zoho_client_id Zoho Client ID (optional)
     * @param  string|null $zoho_client_secret Zoho Client Secret (optional)
     * @param  string|null $zoho_refresh_token Zoho Refresh Token (optional)
     * @param  string|null $zoho_region Zoho API endpoint Region (optional)
     * @param  int|null $tiendanube_user_id Tiendanube User ID (optional)
     * @param  string|null $tiendanube_access_token Tiendanube Access Token (optional)
     * @param  string|null $tiendanube_client_secret Tiendanube Client Secret (optional)
     * @param  string|null $otto_client_id Otto Client ID (optional)
     * @param  string|null $otto_client_secret Otto Client Secret (optional)
     * @param  string|null $otto_app_id Otto App ID (optional)
     * @param  string|null $otto_refresh_token Otto Refresh Token (optional)
     * @param  string|null $otto_environment Otto Environment (optional)
     * @param  string|null $otto_access_token Otto Access Token (optional)
     * @param  string|null $tiktokshop_app_key TikTok Shop App Key (optional)
     * @param  string|null $tiktokshop_app_secret TikTok Shop App Secret (optional)
     * @param  string|null $tiktokshop_refresh_token TikTok Shop Refresh Token (optional)
     * @param  string|null $tiktokshop_access_token TikTok Shop Access Token (optional)
     * @param  string|null $salla_client_id Salla Client ID (optional)
     * @param  string|null $salla_client_secret Salla Client Secret (optional)
     * @param  string|null $salla_refresh_token Salla Refresh Token (optional)
     * @param  string|null $salla_access_token Salla Access Token (optional)
     * @param  string|null $temu_app_key Temu App Key (optional)
     * @param  string|null $temu_app_secret Temu App Secret (optional)
     * @param  string|null $temu_access_token Temu Access Token (optional)
     * @param  string|null $temu_region Temu API endpoint Region. (optional, default to 'US')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountConfigUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccountConfigUpdate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountConfigUpdateWithHttpInfo($replace_parameters = null, $new_store_url = null, $new_store_key = null, $bridge_url = null, $store_root = null, $db_tables_prefix = null, $user_agent = null, $_3dcart_private_key = null, $_3dcart_access_token = null, $_3dcartapi_api_key = null, $amazon_sp_client_id = null, $amazon_sp_client_secret = null, $amazon_sp_refresh_token = null, $amazon_sp_aws_region = null, $amazon_sp_api_environment = 'production', $amazon_seller_id = null, $aspdotnetstorefront_api_user = null, $aspdotnetstorefront_api_pass = null, $bigcommerceapi_admin_account = null, $bigcommerceapi_api_path = null, $bigcommerceapi_api_key = null, $bigcommerceapi_client_id = null, $bigcommerceapi_access_token = null, $bigcommerceapi_context = null, $bol_api_key = null, $bol_api_secret = null, $bol_retailer_id = null, $demandware_client_id = null, $demandware_api_password = null, $demandware_user_name = null, $demandware_user_password = null, $ebay_client_id = null, $ebay_client_secret = null, $ebay_runame = null, $ebay_access_token = null, $ebay_refresh_token = null, $ebay_environment = null, $ebay_site_id = 0, $ecwid_acess_token = null, $ecwid_store_id = null, $lazada_app_id = null, $lazada_app_secret = null, $lazada_refresh_token = null, $lazada_region = null, $etsy_keystring = null, $etsy_shared_secret = null, $etsy_access_token = null, $etsy_token_secret = null, $etsy_client_id = null, $etsy_refresh_token = null, $facebook_app_id = null, $facebook_app_secret = null, $facebook_access_token = null, $facebook_business_id = null, $neto_api_key = null, $neto_api_username = null, $shopline_access_token = null, $shopline_app_key = null, $shopline_app_secret = null, $shopline_shared_secret = null, $shopify_access_token = null, $shopify_api_key = null, $shopify_api_password = null, $shopify_shared_secret = null, $shopee_partner_id = null, $shopee_partner_key = null, $shopee_shop_id = null, $shopee_refresh_token = null, $shopee_region = null, $shopee_environment = null, $shoplazza_access_token = null, $shoplazza_shared_secret = null, $miva_access_token = null, $miva_signature = null, $shopware_access_key = null, $shopware_api_key = null, $shopware_api_secret = null, $bigcartel_user_name = null, $bigcartel_password = null, $volusion_login = null, $volusion_password = null, $walmart_client_id = null, $walmart_client_secret = null, $walmart_environment = 'production', $walmart_channel_type = null, $walmart_region = 'us', $square_client_id = null, $square_client_secret = null, $square_refresh_token = null, $squarespace_api_key = null, $squarespace_client_id = null, $squarespace_client_secret = null, $squarespace_access_token = null, $squarespace_refresh_token = null, $hybris_client_id = null, $hybris_client_secret = null, $hybris_username = null, $hybris_password = null, $hybris_websites = null, $lightspeed_api_key = null, $lightspeed_api_secret = null, $commercehq_api_key = null, $commercehq_api_password = null, $wc_consumer_key = null, $wc_consumer_secret = null, $magento_consumer_key = null, $magento_consumer_secret = null, $magento_access_token = null, $magento_token_secret = null, $prestashop_webservice_key = null, $wix_app_id = null, $wix_app_secret_key = null, $wix_instance_id = null, $wix_refresh_token = null, $mercado_libre_app_id = null, $mercado_libre_app_secret_key = null, $mercado_libre_refresh_token = null, $zid_client_id = null, $zid_client_secret = null, $zid_access_token = null, $zid_authorization = null, $zid_refresh_token = null, $flipkart_client_id = null, $flipkart_client_secret = null, $allegro_client_id = null, $allegro_client_secret = null, $allegro_access_token = null, $allegro_refresh_token = null, $allegro_environment = 'production', $zoho_client_id = null, $zoho_client_secret = null, $zoho_refresh_token = null, $zoho_region = null, $tiendanube_user_id = null, $tiendanube_access_token = null, $tiendanube_client_secret = null, $otto_client_id = null, $otto_client_secret = null, $otto_app_id = null, $otto_refresh_token = null, $otto_environment = null, $otto_access_token = null, $tiktokshop_app_key = null, $tiktokshop_app_secret = null, $tiktokshop_refresh_token = null, $tiktokshop_access_token = null, $salla_client_id = null, $salla_client_secret = null, $salla_refresh_token = null, $salla_access_token = null, $temu_app_key = null, $temu_app_secret = null, $temu_access_token = null, $temu_region = 'US', string $contentType = self::contentTypes['accountConfigUpdate'][0])
    {
        $request = $this->accountConfigUpdateRequest($replace_parameters, $new_store_url, $new_store_key, $bridge_url, $store_root, $db_tables_prefix, $user_agent, $_3dcart_private_key, $_3dcart_access_token, $_3dcartapi_api_key, $amazon_sp_client_id, $amazon_sp_client_secret, $amazon_sp_refresh_token, $amazon_sp_aws_region, $amazon_sp_api_environment, $amazon_seller_id, $aspdotnetstorefront_api_user, $aspdotnetstorefront_api_pass, $bigcommerceapi_admin_account, $bigcommerceapi_api_path, $bigcommerceapi_api_key, $bigcommerceapi_client_id, $bigcommerceapi_access_token, $bigcommerceapi_context, $bol_api_key, $bol_api_secret, $bol_retailer_id, $demandware_client_id, $demandware_api_password, $demandware_user_name, $demandware_user_password, $ebay_client_id, $ebay_client_secret, $ebay_runame, $ebay_access_token, $ebay_refresh_token, $ebay_environment, $ebay_site_id, $ecwid_acess_token, $ecwid_store_id, $lazada_app_id, $lazada_app_secret, $lazada_refresh_token, $lazada_region, $etsy_keystring, $etsy_shared_secret, $etsy_access_token, $etsy_token_secret, $etsy_client_id, $etsy_refresh_token, $facebook_app_id, $facebook_app_secret, $facebook_access_token, $facebook_business_id, $neto_api_key, $neto_api_username, $shopline_access_token, $shopline_app_key, $shopline_app_secret, $shopline_shared_secret, $shopify_access_token, $shopify_api_key, $shopify_api_password, $shopify_shared_secret, $shopee_partner_id, $shopee_partner_key, $shopee_shop_id, $shopee_refresh_token, $shopee_region, $shopee_environment, $shoplazza_access_token, $shoplazza_shared_secret, $miva_access_token, $miva_signature, $shopware_access_key, $shopware_api_key, $shopware_api_secret, $bigcartel_user_name, $bigcartel_password, $volusion_login, $volusion_password, $walmart_client_id, $walmart_client_secret, $walmart_environment, $walmart_channel_type, $walmart_region, $square_client_id, $square_client_secret, $square_refresh_token, $squarespace_api_key, $squarespace_client_id, $squarespace_client_secret, $squarespace_access_token, $squarespace_refresh_token, $hybris_client_id, $hybris_client_secret, $hybris_username, $hybris_password, $hybris_websites, $lightspeed_api_key, $lightspeed_api_secret, $commercehq_api_key, $commercehq_api_password, $wc_consumer_key, $wc_consumer_secret, $magento_consumer_key, $magento_consumer_secret, $magento_access_token, $magento_token_secret, $prestashop_webservice_key, $wix_app_id, $wix_app_secret_key, $wix_instance_id, $wix_refresh_token, $mercado_libre_app_id, $mercado_libre_app_secret_key, $mercado_libre_refresh_token, $zid_client_id, $zid_client_secret, $zid_access_token, $zid_authorization, $zid_refresh_token, $flipkart_client_id, $flipkart_client_secret, $allegro_client_id, $allegro_client_secret, $allegro_access_token, $allegro_refresh_token, $allegro_environment, $zoho_client_id, $zoho_client_secret, $zoho_refresh_token, $zoho_region, $tiendanube_user_id, $tiendanube_access_token, $tiendanube_client_secret, $otto_client_id, $otto_client_secret, $otto_app_id, $otto_refresh_token, $otto_environment, $otto_access_token, $tiktokshop_app_key, $tiktokshop_app_secret, $tiktokshop_refresh_token, $tiktokshop_access_token, $salla_client_id, $salla_client_secret, $salla_refresh_token, $salla_access_token, $temu_app_key, $temu_app_secret, $temu_access_token, $temu_region, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccountConfigUpdate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccountConfigUpdate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccountConfigUpdate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AccountConfigUpdate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccountConfigUpdate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountConfigUpdateAsync
     *
     * account.config.update
     *
     * @param  bool|null $replace_parameters Identifies if there is a necessity to replace parameters (optional)
     * @param  string|null $new_store_url The web address of the store you want to update to connect to API2Cart (optional)
     * @param  string|null $new_store_key Update store key (optional)
     * @param  string|null $bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param  string|null $store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param  string|null $db_tables_prefix DB tables prefix (optional)
     * @param  string|null $user_agent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)
     * @param  string|null $_3dcart_private_key 3DCart Private Key (optional)
     * @param  string|null $_3dcart_access_token 3DCart Token (optional)
     * @param  string|null $_3dcartapi_api_key 3DCart API Key (optional)
     * @param  string|null $amazon_sp_client_id Amazon SP API app client id (optional)
     * @param  string|null $amazon_sp_client_secret Amazon SP API app client secret (optional)
     * @param  string|null $amazon_sp_refresh_token Amazon SP API OAuth refresh token (optional)
     * @param  string|null $amazon_sp_aws_region Amazon AWS Region (optional)
     * @param  string|null $amazon_sp_api_environment Amazon SP API environment (optional, default to 'production')
     * @param  string|null $amazon_seller_id Amazon Seller ID (Merchant token) (optional)
     * @param  string|null $aspdotnetstorefront_api_user It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param  string|null $aspdotnetstorefront_api_pass AspDotNetStorefront API Password (optional)
     * @param  string|null $bigcommerceapi_admin_account It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param  string|null $bigcommerceapi_api_path BigCommerce API URL (optional)
     * @param  string|null $bigcommerceapi_api_key Bigcommerce API Key (optional)
     * @param  string|null $bigcommerceapi_client_id Client ID of the requesting app (optional)
     * @param  string|null $bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $bigcommerceapi_context API Path section unique to the store (optional)
     * @param  string|null $bol_api_key Bol API Key (optional)
     * @param  string|null $bol_api_secret Bol API Secret (optional)
     * @param  int|null $bol_retailer_id Bol Retailer ID (optional)
     * @param  string|null $demandware_client_id Demandware client id (optional)
     * @param  string|null $demandware_api_password Demandware api password (optional)
     * @param  string|null $demandware_user_name Demandware user name (optional)
     * @param  string|null $demandware_user_password Demandware user password (optional)
     * @param  string|null $ebay_client_id Application ID (AppID). (optional)
     * @param  string|null $ebay_client_secret Shared Secret from eBay application (optional)
     * @param  string|null $ebay_runame The RuName value that eBay assigns to your application. (optional)
     * @param  string|null $ebay_access_token Used to authenticate API requests. (optional)
     * @param  string|null $ebay_refresh_token Used to renew the access token. (optional)
     * @param  string|null $ebay_environment eBay environment (optional)
     * @param  int|null $ebay_site_id eBay global ID (optional, default to 0)
     * @param  string|null $ecwid_acess_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $ecwid_store_id Store Id (optional)
     * @param  string|null $lazada_app_id Lazada App ID (optional)
     * @param  string|null $lazada_app_secret Lazada App Secret (optional)
     * @param  string|null $lazada_refresh_token Lazada Refresh Token (optional)
     * @param  string|null $lazada_region Lazada API endpoint Region (optional)
     * @param  string|null $etsy_keystring Etsy keystring (optional)
     * @param  string|null $etsy_shared_secret Etsy shared secret (optional)
     * @param  string|null $etsy_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $etsy_token_secret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $etsy_client_id Etsy Client Id (optional)
     * @param  string|null $etsy_refresh_token Etsy Refresh token (optional)
     * @param  string|null $facebook_app_id Facebook App ID (optional)
     * @param  string|null $facebook_app_secret Facebook App Secret (optional)
     * @param  string|null $facebook_access_token Facebook Access Token (optional)
     * @param  string|null $facebook_business_id Facebook Business ID (optional)
     * @param  string|null $neto_api_key Neto API Key (optional)
     * @param  string|null $neto_api_username Neto User Name (optional)
     * @param  string|null $shopline_access_token Shopline APP Key (optional)
     * @param  string|null $shopline_app_key Shopline APP Key (optional)
     * @param  string|null $shopline_app_secret Shopline App Secret (optional)
     * @param  string|null $shopline_shared_secret Shopline Shared Secret (optional)
     * @param  string|null $shopify_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $shopify_api_key Shopify API Key (optional)
     * @param  string|null $shopify_api_password Shopify API Password (optional)
     * @param  string|null $shopify_shared_secret Shared secret (optional)
     * @param  string|null $shopee_partner_id Shopee Partner ID (optional)
     * @param  string|null $shopee_partner_key Shopee Partner Key (optional)
     * @param  string|null $shopee_shop_id Shopee SHOP ID (optional)
     * @param  string|null $shopee_refresh_token Shopee Refresh Token (optional)
     * @param  string|null $shopee_region Shopee API endpoint Region. Use for Chinese Mainland or Brazil. (optional)
     * @param  string|null $shopee_environment Shopee Environment (optional)
     * @param  string|null $shoplazza_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $shoplazza_shared_secret Shared secret (optional)
     * @param  string|null $miva_access_token Miva access token (optional)
     * @param  string|null $miva_signature Miva signature (optional)
     * @param  string|null $shopware_access_key Shopware access key (optional)
     * @param  string|null $shopware_api_key Shopware api key (optional)
     * @param  string|null $shopware_api_secret Shopware client secret access key (optional)
     * @param  string|null $bigcartel_user_name Subdomain of store (optional)
     * @param  string|null $bigcartel_password BigCartel account password (optional)
     * @param  string|null $volusion_login It&#39;s a Volusion account for which API is enabled (optional)
     * @param  string|null $volusion_password Volusion API Password (optional)
     * @param  string|null $walmart_client_id Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)
     * @param  string|null $walmart_client_secret Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)
     * @param  string|null $walmart_environment Walmart environment (optional, default to 'production')
     * @param  string|null $walmart_channel_type Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param  string|null $walmart_region Walmart region (optional, default to 'us')
     * @param  string|null $square_client_id Square (Weebly) Client ID (optional)
     * @param  string|null $square_client_secret Square (Weebly) Client Secret (optional)
     * @param  string|null $square_refresh_token Square (Weebly) Refresh Token (optional)
     * @param  string|null $squarespace_api_key Squarespace API Key (optional)
     * @param  string|null $squarespace_client_id Squarespace Connector Client ID (optional)
     * @param  string|null $squarespace_client_secret Squarespace Connector Client Secret (optional)
     * @param  string|null $squarespace_access_token Squarespace access token (optional)
     * @param  string|null $squarespace_refresh_token Squarespace refresh token (optional)
     * @param  string|null $hybris_client_id Omni Commerce Connector Client ID (optional)
     * @param  string|null $hybris_client_secret Omni Commerce Connector Client Secret (optional)
     * @param  string|null $hybris_username User Name (optional)
     * @param  string|null $hybris_password User password (optional)
     * @param  string[]|null $hybris_websites Websites to stores mapping data (optional)
     * @param  string|null $lightspeed_api_key LightSpeed api key (optional)
     * @param  string|null $lightspeed_api_secret LightSpeed api secret (optional)
     * @param  string|null $commercehq_api_key CommerceHQ api key (optional)
     * @param  string|null $commercehq_api_password CommerceHQ api password (optional)
     * @param  string|null $wc_consumer_key Woocommerce consumer key (optional)
     * @param  string|null $wc_consumer_secret Woocommerce consumer secret (optional)
     * @param  string|null $magento_consumer_key Magento Consumer Key (optional)
     * @param  string|null $magento_consumer_secret Magento Consumer Secret (optional)
     * @param  string|null $magento_access_token Magento Access Token (optional)
     * @param  string|null $magento_token_secret Magento Token Secret (optional)
     * @param  string|null $prestashop_webservice_key Prestashop webservice key (optional)
     * @param  string|null $wix_app_id Wix App ID (optional)
     * @param  string|null $wix_app_secret_key Wix App Secret Key (optional)
     * @param  string|null $wix_instance_id Wix Instance ID (optional)
     * @param  string|null $wix_refresh_token Wix refresh token (optional)
     * @param  string|null $mercado_libre_app_id Mercado Libre App ID (optional)
     * @param  string|null $mercado_libre_app_secret_key Mercado Libre App Secret Key (optional)
     * @param  string|null $mercado_libre_refresh_token Mercado Libre Refresh Token (optional)
     * @param  int|null $zid_client_id Zid Client ID (optional)
     * @param  string|null $zid_client_secret Zid Client Secret (optional)
     * @param  string|null $zid_access_token Zid Access Token (optional)
     * @param  string|null $zid_authorization Zid Authorization (optional)
     * @param  string|null $zid_refresh_token Zid refresh token (optional)
     * @param  string|null $flipkart_client_id Flipkart Client ID (optional)
     * @param  string|null $flipkart_client_secret Flipkart Client Secret (optional)
     * @param  string|null $allegro_client_id Allegro Client ID (optional)
     * @param  string|null $allegro_client_secret Allegro Client Secret (optional)
     * @param  string|null $allegro_access_token Allegro Access Token (optional)
     * @param  string|null $allegro_refresh_token Allegro Refresh Token (optional)
     * @param  string|null $allegro_environment Allegro Environment (optional, default to 'production')
     * @param  string|null $zoho_client_id Zoho Client ID (optional)
     * @param  string|null $zoho_client_secret Zoho Client Secret (optional)
     * @param  string|null $zoho_refresh_token Zoho Refresh Token (optional)
     * @param  string|null $zoho_region Zoho API endpoint Region (optional)
     * @param  int|null $tiendanube_user_id Tiendanube User ID (optional)
     * @param  string|null $tiendanube_access_token Tiendanube Access Token (optional)
     * @param  string|null $tiendanube_client_secret Tiendanube Client Secret (optional)
     * @param  string|null $otto_client_id Otto Client ID (optional)
     * @param  string|null $otto_client_secret Otto Client Secret (optional)
     * @param  string|null $otto_app_id Otto App ID (optional)
     * @param  string|null $otto_refresh_token Otto Refresh Token (optional)
     * @param  string|null $otto_environment Otto Environment (optional)
     * @param  string|null $otto_access_token Otto Access Token (optional)
     * @param  string|null $tiktokshop_app_key TikTok Shop App Key (optional)
     * @param  string|null $tiktokshop_app_secret TikTok Shop App Secret (optional)
     * @param  string|null $tiktokshop_refresh_token TikTok Shop Refresh Token (optional)
     * @param  string|null $tiktokshop_access_token TikTok Shop Access Token (optional)
     * @param  string|null $salla_client_id Salla Client ID (optional)
     * @param  string|null $salla_client_secret Salla Client Secret (optional)
     * @param  string|null $salla_refresh_token Salla Refresh Token (optional)
     * @param  string|null $salla_access_token Salla Access Token (optional)
     * @param  string|null $temu_app_key Temu App Key (optional)
     * @param  string|null $temu_app_secret Temu App Secret (optional)
     * @param  string|null $temu_access_token Temu Access Token (optional)
     * @param  string|null $temu_region Temu API endpoint Region. (optional, default to 'US')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountConfigUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountConfigUpdateAsync($replace_parameters = null, $new_store_url = null, $new_store_key = null, $bridge_url = null, $store_root = null, $db_tables_prefix = null, $user_agent = null, $_3dcart_private_key = null, $_3dcart_access_token = null, $_3dcartapi_api_key = null, $amazon_sp_client_id = null, $amazon_sp_client_secret = null, $amazon_sp_refresh_token = null, $amazon_sp_aws_region = null, $amazon_sp_api_environment = 'production', $amazon_seller_id = null, $aspdotnetstorefront_api_user = null, $aspdotnetstorefront_api_pass = null, $bigcommerceapi_admin_account = null, $bigcommerceapi_api_path = null, $bigcommerceapi_api_key = null, $bigcommerceapi_client_id = null, $bigcommerceapi_access_token = null, $bigcommerceapi_context = null, $bol_api_key = null, $bol_api_secret = null, $bol_retailer_id = null, $demandware_client_id = null, $demandware_api_password = null, $demandware_user_name = null, $demandware_user_password = null, $ebay_client_id = null, $ebay_client_secret = null, $ebay_runame = null, $ebay_access_token = null, $ebay_refresh_token = null, $ebay_environment = null, $ebay_site_id = 0, $ecwid_acess_token = null, $ecwid_store_id = null, $lazada_app_id = null, $lazada_app_secret = null, $lazada_refresh_token = null, $lazada_region = null, $etsy_keystring = null, $etsy_shared_secret = null, $etsy_access_token = null, $etsy_token_secret = null, $etsy_client_id = null, $etsy_refresh_token = null, $facebook_app_id = null, $facebook_app_secret = null, $facebook_access_token = null, $facebook_business_id = null, $neto_api_key = null, $neto_api_username = null, $shopline_access_token = null, $shopline_app_key = null, $shopline_app_secret = null, $shopline_shared_secret = null, $shopify_access_token = null, $shopify_api_key = null, $shopify_api_password = null, $shopify_shared_secret = null, $shopee_partner_id = null, $shopee_partner_key = null, $shopee_shop_id = null, $shopee_refresh_token = null, $shopee_region = null, $shopee_environment = null, $shoplazza_access_token = null, $shoplazza_shared_secret = null, $miva_access_token = null, $miva_signature = null, $shopware_access_key = null, $shopware_api_key = null, $shopware_api_secret = null, $bigcartel_user_name = null, $bigcartel_password = null, $volusion_login = null, $volusion_password = null, $walmart_client_id = null, $walmart_client_secret = null, $walmart_environment = 'production', $walmart_channel_type = null, $walmart_region = 'us', $square_client_id = null, $square_client_secret = null, $square_refresh_token = null, $squarespace_api_key = null, $squarespace_client_id = null, $squarespace_client_secret = null, $squarespace_access_token = null, $squarespace_refresh_token = null, $hybris_client_id = null, $hybris_client_secret = null, $hybris_username = null, $hybris_password = null, $hybris_websites = null, $lightspeed_api_key = null, $lightspeed_api_secret = null, $commercehq_api_key = null, $commercehq_api_password = null, $wc_consumer_key = null, $wc_consumer_secret = null, $magento_consumer_key = null, $magento_consumer_secret = null, $magento_access_token = null, $magento_token_secret = null, $prestashop_webservice_key = null, $wix_app_id = null, $wix_app_secret_key = null, $wix_instance_id = null, $wix_refresh_token = null, $mercado_libre_app_id = null, $mercado_libre_app_secret_key = null, $mercado_libre_refresh_token = null, $zid_client_id = null, $zid_client_secret = null, $zid_access_token = null, $zid_authorization = null, $zid_refresh_token = null, $flipkart_client_id = null, $flipkart_client_secret = null, $allegro_client_id = null, $allegro_client_secret = null, $allegro_access_token = null, $allegro_refresh_token = null, $allegro_environment = 'production', $zoho_client_id = null, $zoho_client_secret = null, $zoho_refresh_token = null, $zoho_region = null, $tiendanube_user_id = null, $tiendanube_access_token = null, $tiendanube_client_secret = null, $otto_client_id = null, $otto_client_secret = null, $otto_app_id = null, $otto_refresh_token = null, $otto_environment = null, $otto_access_token = null, $tiktokshop_app_key = null, $tiktokshop_app_secret = null, $tiktokshop_refresh_token = null, $tiktokshop_access_token = null, $salla_client_id = null, $salla_client_secret = null, $salla_refresh_token = null, $salla_access_token = null, $temu_app_key = null, $temu_app_secret = null, $temu_access_token = null, $temu_region = 'US', string $contentType = self::contentTypes['accountConfigUpdate'][0])
    {
        return $this->accountConfigUpdateAsyncWithHttpInfo($replace_parameters, $new_store_url, $new_store_key, $bridge_url, $store_root, $db_tables_prefix, $user_agent, $_3dcart_private_key, $_3dcart_access_token, $_3dcartapi_api_key, $amazon_sp_client_id, $amazon_sp_client_secret, $amazon_sp_refresh_token, $amazon_sp_aws_region, $amazon_sp_api_environment, $amazon_seller_id, $aspdotnetstorefront_api_user, $aspdotnetstorefront_api_pass, $bigcommerceapi_admin_account, $bigcommerceapi_api_path, $bigcommerceapi_api_key, $bigcommerceapi_client_id, $bigcommerceapi_access_token, $bigcommerceapi_context, $bol_api_key, $bol_api_secret, $bol_retailer_id, $demandware_client_id, $demandware_api_password, $demandware_user_name, $demandware_user_password, $ebay_client_id, $ebay_client_secret, $ebay_runame, $ebay_access_token, $ebay_refresh_token, $ebay_environment, $ebay_site_id, $ecwid_acess_token, $ecwid_store_id, $lazada_app_id, $lazada_app_secret, $lazada_refresh_token, $lazada_region, $etsy_keystring, $etsy_shared_secret, $etsy_access_token, $etsy_token_secret, $etsy_client_id, $etsy_refresh_token, $facebook_app_id, $facebook_app_secret, $facebook_access_token, $facebook_business_id, $neto_api_key, $neto_api_username, $shopline_access_token, $shopline_app_key, $shopline_app_secret, $shopline_shared_secret, $shopify_access_token, $shopify_api_key, $shopify_api_password, $shopify_shared_secret, $shopee_partner_id, $shopee_partner_key, $shopee_shop_id, $shopee_refresh_token, $shopee_region, $shopee_environment, $shoplazza_access_token, $shoplazza_shared_secret, $miva_access_token, $miva_signature, $shopware_access_key, $shopware_api_key, $shopware_api_secret, $bigcartel_user_name, $bigcartel_password, $volusion_login, $volusion_password, $walmart_client_id, $walmart_client_secret, $walmart_environment, $walmart_channel_type, $walmart_region, $square_client_id, $square_client_secret, $square_refresh_token, $squarespace_api_key, $squarespace_client_id, $squarespace_client_secret, $squarespace_access_token, $squarespace_refresh_token, $hybris_client_id, $hybris_client_secret, $hybris_username, $hybris_password, $hybris_websites, $lightspeed_api_key, $lightspeed_api_secret, $commercehq_api_key, $commercehq_api_password, $wc_consumer_key, $wc_consumer_secret, $magento_consumer_key, $magento_consumer_secret, $magento_access_token, $magento_token_secret, $prestashop_webservice_key, $wix_app_id, $wix_app_secret_key, $wix_instance_id, $wix_refresh_token, $mercado_libre_app_id, $mercado_libre_app_secret_key, $mercado_libre_refresh_token, $zid_client_id, $zid_client_secret, $zid_access_token, $zid_authorization, $zid_refresh_token, $flipkart_client_id, $flipkart_client_secret, $allegro_client_id, $allegro_client_secret, $allegro_access_token, $allegro_refresh_token, $allegro_environment, $zoho_client_id, $zoho_client_secret, $zoho_refresh_token, $zoho_region, $tiendanube_user_id, $tiendanube_access_token, $tiendanube_client_secret, $otto_client_id, $otto_client_secret, $otto_app_id, $otto_refresh_token, $otto_environment, $otto_access_token, $tiktokshop_app_key, $tiktokshop_app_secret, $tiktokshop_refresh_token, $tiktokshop_access_token, $salla_client_id, $salla_client_secret, $salla_refresh_token, $salla_access_token, $temu_app_key, $temu_app_secret, $temu_access_token, $temu_region, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountConfigUpdateAsyncWithHttpInfo
     *
     * account.config.update
     *
     * @param  bool|null $replace_parameters Identifies if there is a necessity to replace parameters (optional)
     * @param  string|null $new_store_url The web address of the store you want to update to connect to API2Cart (optional)
     * @param  string|null $new_store_key Update store key (optional)
     * @param  string|null $bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param  string|null $store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param  string|null $db_tables_prefix DB tables prefix (optional)
     * @param  string|null $user_agent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)
     * @param  string|null $_3dcart_private_key 3DCart Private Key (optional)
     * @param  string|null $_3dcart_access_token 3DCart Token (optional)
     * @param  string|null $_3dcartapi_api_key 3DCart API Key (optional)
     * @param  string|null $amazon_sp_client_id Amazon SP API app client id (optional)
     * @param  string|null $amazon_sp_client_secret Amazon SP API app client secret (optional)
     * @param  string|null $amazon_sp_refresh_token Amazon SP API OAuth refresh token (optional)
     * @param  string|null $amazon_sp_aws_region Amazon AWS Region (optional)
     * @param  string|null $amazon_sp_api_environment Amazon SP API environment (optional, default to 'production')
     * @param  string|null $amazon_seller_id Amazon Seller ID (Merchant token) (optional)
     * @param  string|null $aspdotnetstorefront_api_user It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param  string|null $aspdotnetstorefront_api_pass AspDotNetStorefront API Password (optional)
     * @param  string|null $bigcommerceapi_admin_account It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param  string|null $bigcommerceapi_api_path BigCommerce API URL (optional)
     * @param  string|null $bigcommerceapi_api_key Bigcommerce API Key (optional)
     * @param  string|null $bigcommerceapi_client_id Client ID of the requesting app (optional)
     * @param  string|null $bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $bigcommerceapi_context API Path section unique to the store (optional)
     * @param  string|null $bol_api_key Bol API Key (optional)
     * @param  string|null $bol_api_secret Bol API Secret (optional)
     * @param  int|null $bol_retailer_id Bol Retailer ID (optional)
     * @param  string|null $demandware_client_id Demandware client id (optional)
     * @param  string|null $demandware_api_password Demandware api password (optional)
     * @param  string|null $demandware_user_name Demandware user name (optional)
     * @param  string|null $demandware_user_password Demandware user password (optional)
     * @param  string|null $ebay_client_id Application ID (AppID). (optional)
     * @param  string|null $ebay_client_secret Shared Secret from eBay application (optional)
     * @param  string|null $ebay_runame The RuName value that eBay assigns to your application. (optional)
     * @param  string|null $ebay_access_token Used to authenticate API requests. (optional)
     * @param  string|null $ebay_refresh_token Used to renew the access token. (optional)
     * @param  string|null $ebay_environment eBay environment (optional)
     * @param  int|null $ebay_site_id eBay global ID (optional, default to 0)
     * @param  string|null $ecwid_acess_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $ecwid_store_id Store Id (optional)
     * @param  string|null $lazada_app_id Lazada App ID (optional)
     * @param  string|null $lazada_app_secret Lazada App Secret (optional)
     * @param  string|null $lazada_refresh_token Lazada Refresh Token (optional)
     * @param  string|null $lazada_region Lazada API endpoint Region (optional)
     * @param  string|null $etsy_keystring Etsy keystring (optional)
     * @param  string|null $etsy_shared_secret Etsy shared secret (optional)
     * @param  string|null $etsy_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $etsy_token_secret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $etsy_client_id Etsy Client Id (optional)
     * @param  string|null $etsy_refresh_token Etsy Refresh token (optional)
     * @param  string|null $facebook_app_id Facebook App ID (optional)
     * @param  string|null $facebook_app_secret Facebook App Secret (optional)
     * @param  string|null $facebook_access_token Facebook Access Token (optional)
     * @param  string|null $facebook_business_id Facebook Business ID (optional)
     * @param  string|null $neto_api_key Neto API Key (optional)
     * @param  string|null $neto_api_username Neto User Name (optional)
     * @param  string|null $shopline_access_token Shopline APP Key (optional)
     * @param  string|null $shopline_app_key Shopline APP Key (optional)
     * @param  string|null $shopline_app_secret Shopline App Secret (optional)
     * @param  string|null $shopline_shared_secret Shopline Shared Secret (optional)
     * @param  string|null $shopify_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $shopify_api_key Shopify API Key (optional)
     * @param  string|null $shopify_api_password Shopify API Password (optional)
     * @param  string|null $shopify_shared_secret Shared secret (optional)
     * @param  string|null $shopee_partner_id Shopee Partner ID (optional)
     * @param  string|null $shopee_partner_key Shopee Partner Key (optional)
     * @param  string|null $shopee_shop_id Shopee SHOP ID (optional)
     * @param  string|null $shopee_refresh_token Shopee Refresh Token (optional)
     * @param  string|null $shopee_region Shopee API endpoint Region. Use for Chinese Mainland or Brazil. (optional)
     * @param  string|null $shopee_environment Shopee Environment (optional)
     * @param  string|null $shoplazza_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $shoplazza_shared_secret Shared secret (optional)
     * @param  string|null $miva_access_token Miva access token (optional)
     * @param  string|null $miva_signature Miva signature (optional)
     * @param  string|null $shopware_access_key Shopware access key (optional)
     * @param  string|null $shopware_api_key Shopware api key (optional)
     * @param  string|null $shopware_api_secret Shopware client secret access key (optional)
     * @param  string|null $bigcartel_user_name Subdomain of store (optional)
     * @param  string|null $bigcartel_password BigCartel account password (optional)
     * @param  string|null $volusion_login It&#39;s a Volusion account for which API is enabled (optional)
     * @param  string|null $volusion_password Volusion API Password (optional)
     * @param  string|null $walmart_client_id Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)
     * @param  string|null $walmart_client_secret Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)
     * @param  string|null $walmart_environment Walmart environment (optional, default to 'production')
     * @param  string|null $walmart_channel_type Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param  string|null $walmart_region Walmart region (optional, default to 'us')
     * @param  string|null $square_client_id Square (Weebly) Client ID (optional)
     * @param  string|null $square_client_secret Square (Weebly) Client Secret (optional)
     * @param  string|null $square_refresh_token Square (Weebly) Refresh Token (optional)
     * @param  string|null $squarespace_api_key Squarespace API Key (optional)
     * @param  string|null $squarespace_client_id Squarespace Connector Client ID (optional)
     * @param  string|null $squarespace_client_secret Squarespace Connector Client Secret (optional)
     * @param  string|null $squarespace_access_token Squarespace access token (optional)
     * @param  string|null $squarespace_refresh_token Squarespace refresh token (optional)
     * @param  string|null $hybris_client_id Omni Commerce Connector Client ID (optional)
     * @param  string|null $hybris_client_secret Omni Commerce Connector Client Secret (optional)
     * @param  string|null $hybris_username User Name (optional)
     * @param  string|null $hybris_password User password (optional)
     * @param  string[]|null $hybris_websites Websites to stores mapping data (optional)
     * @param  string|null $lightspeed_api_key LightSpeed api key (optional)
     * @param  string|null $lightspeed_api_secret LightSpeed api secret (optional)
     * @param  string|null $commercehq_api_key CommerceHQ api key (optional)
     * @param  string|null $commercehq_api_password CommerceHQ api password (optional)
     * @param  string|null $wc_consumer_key Woocommerce consumer key (optional)
     * @param  string|null $wc_consumer_secret Woocommerce consumer secret (optional)
     * @param  string|null $magento_consumer_key Magento Consumer Key (optional)
     * @param  string|null $magento_consumer_secret Magento Consumer Secret (optional)
     * @param  string|null $magento_access_token Magento Access Token (optional)
     * @param  string|null $magento_token_secret Magento Token Secret (optional)
     * @param  string|null $prestashop_webservice_key Prestashop webservice key (optional)
     * @param  string|null $wix_app_id Wix App ID (optional)
     * @param  string|null $wix_app_secret_key Wix App Secret Key (optional)
     * @param  string|null $wix_instance_id Wix Instance ID (optional)
     * @param  string|null $wix_refresh_token Wix refresh token (optional)
     * @param  string|null $mercado_libre_app_id Mercado Libre App ID (optional)
     * @param  string|null $mercado_libre_app_secret_key Mercado Libre App Secret Key (optional)
     * @param  string|null $mercado_libre_refresh_token Mercado Libre Refresh Token (optional)
     * @param  int|null $zid_client_id Zid Client ID (optional)
     * @param  string|null $zid_client_secret Zid Client Secret (optional)
     * @param  string|null $zid_access_token Zid Access Token (optional)
     * @param  string|null $zid_authorization Zid Authorization (optional)
     * @param  string|null $zid_refresh_token Zid refresh token (optional)
     * @param  string|null $flipkart_client_id Flipkart Client ID (optional)
     * @param  string|null $flipkart_client_secret Flipkart Client Secret (optional)
     * @param  string|null $allegro_client_id Allegro Client ID (optional)
     * @param  string|null $allegro_client_secret Allegro Client Secret (optional)
     * @param  string|null $allegro_access_token Allegro Access Token (optional)
     * @param  string|null $allegro_refresh_token Allegro Refresh Token (optional)
     * @param  string|null $allegro_environment Allegro Environment (optional, default to 'production')
     * @param  string|null $zoho_client_id Zoho Client ID (optional)
     * @param  string|null $zoho_client_secret Zoho Client Secret (optional)
     * @param  string|null $zoho_refresh_token Zoho Refresh Token (optional)
     * @param  string|null $zoho_region Zoho API endpoint Region (optional)
     * @param  int|null $tiendanube_user_id Tiendanube User ID (optional)
     * @param  string|null $tiendanube_access_token Tiendanube Access Token (optional)
     * @param  string|null $tiendanube_client_secret Tiendanube Client Secret (optional)
     * @param  string|null $otto_client_id Otto Client ID (optional)
     * @param  string|null $otto_client_secret Otto Client Secret (optional)
     * @param  string|null $otto_app_id Otto App ID (optional)
     * @param  string|null $otto_refresh_token Otto Refresh Token (optional)
     * @param  string|null $otto_environment Otto Environment (optional)
     * @param  string|null $otto_access_token Otto Access Token (optional)
     * @param  string|null $tiktokshop_app_key TikTok Shop App Key (optional)
     * @param  string|null $tiktokshop_app_secret TikTok Shop App Secret (optional)
     * @param  string|null $tiktokshop_refresh_token TikTok Shop Refresh Token (optional)
     * @param  string|null $tiktokshop_access_token TikTok Shop Access Token (optional)
     * @param  string|null $salla_client_id Salla Client ID (optional)
     * @param  string|null $salla_client_secret Salla Client Secret (optional)
     * @param  string|null $salla_refresh_token Salla Refresh Token (optional)
     * @param  string|null $salla_access_token Salla Access Token (optional)
     * @param  string|null $temu_app_key Temu App Key (optional)
     * @param  string|null $temu_app_secret Temu App Secret (optional)
     * @param  string|null $temu_access_token Temu Access Token (optional)
     * @param  string|null $temu_region Temu API endpoint Region. (optional, default to 'US')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountConfigUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountConfigUpdateAsyncWithHttpInfo($replace_parameters = null, $new_store_url = null, $new_store_key = null, $bridge_url = null, $store_root = null, $db_tables_prefix = null, $user_agent = null, $_3dcart_private_key = null, $_3dcart_access_token = null, $_3dcartapi_api_key = null, $amazon_sp_client_id = null, $amazon_sp_client_secret = null, $amazon_sp_refresh_token = null, $amazon_sp_aws_region = null, $amazon_sp_api_environment = 'production', $amazon_seller_id = null, $aspdotnetstorefront_api_user = null, $aspdotnetstorefront_api_pass = null, $bigcommerceapi_admin_account = null, $bigcommerceapi_api_path = null, $bigcommerceapi_api_key = null, $bigcommerceapi_client_id = null, $bigcommerceapi_access_token = null, $bigcommerceapi_context = null, $bol_api_key = null, $bol_api_secret = null, $bol_retailer_id = null, $demandware_client_id = null, $demandware_api_password = null, $demandware_user_name = null, $demandware_user_password = null, $ebay_client_id = null, $ebay_client_secret = null, $ebay_runame = null, $ebay_access_token = null, $ebay_refresh_token = null, $ebay_environment = null, $ebay_site_id = 0, $ecwid_acess_token = null, $ecwid_store_id = null, $lazada_app_id = null, $lazada_app_secret = null, $lazada_refresh_token = null, $lazada_region = null, $etsy_keystring = null, $etsy_shared_secret = null, $etsy_access_token = null, $etsy_token_secret = null, $etsy_client_id = null, $etsy_refresh_token = null, $facebook_app_id = null, $facebook_app_secret = null, $facebook_access_token = null, $facebook_business_id = null, $neto_api_key = null, $neto_api_username = null, $shopline_access_token = null, $shopline_app_key = null, $shopline_app_secret = null, $shopline_shared_secret = null, $shopify_access_token = null, $shopify_api_key = null, $shopify_api_password = null, $shopify_shared_secret = null, $shopee_partner_id = null, $shopee_partner_key = null, $shopee_shop_id = null, $shopee_refresh_token = null, $shopee_region = null, $shopee_environment = null, $shoplazza_access_token = null, $shoplazza_shared_secret = null, $miva_access_token = null, $miva_signature = null, $shopware_access_key = null, $shopware_api_key = null, $shopware_api_secret = null, $bigcartel_user_name = null, $bigcartel_password = null, $volusion_login = null, $volusion_password = null, $walmart_client_id = null, $walmart_client_secret = null, $walmart_environment = 'production', $walmart_channel_type = null, $walmart_region = 'us', $square_client_id = null, $square_client_secret = null, $square_refresh_token = null, $squarespace_api_key = null, $squarespace_client_id = null, $squarespace_client_secret = null, $squarespace_access_token = null, $squarespace_refresh_token = null, $hybris_client_id = null, $hybris_client_secret = null, $hybris_username = null, $hybris_password = null, $hybris_websites = null, $lightspeed_api_key = null, $lightspeed_api_secret = null, $commercehq_api_key = null, $commercehq_api_password = null, $wc_consumer_key = null, $wc_consumer_secret = null, $magento_consumer_key = null, $magento_consumer_secret = null, $magento_access_token = null, $magento_token_secret = null, $prestashop_webservice_key = null, $wix_app_id = null, $wix_app_secret_key = null, $wix_instance_id = null, $wix_refresh_token = null, $mercado_libre_app_id = null, $mercado_libre_app_secret_key = null, $mercado_libre_refresh_token = null, $zid_client_id = null, $zid_client_secret = null, $zid_access_token = null, $zid_authorization = null, $zid_refresh_token = null, $flipkart_client_id = null, $flipkart_client_secret = null, $allegro_client_id = null, $allegro_client_secret = null, $allegro_access_token = null, $allegro_refresh_token = null, $allegro_environment = 'production', $zoho_client_id = null, $zoho_client_secret = null, $zoho_refresh_token = null, $zoho_region = null, $tiendanube_user_id = null, $tiendanube_access_token = null, $tiendanube_client_secret = null, $otto_client_id = null, $otto_client_secret = null, $otto_app_id = null, $otto_refresh_token = null, $otto_environment = null, $otto_access_token = null, $tiktokshop_app_key = null, $tiktokshop_app_secret = null, $tiktokshop_refresh_token = null, $tiktokshop_access_token = null, $salla_client_id = null, $salla_client_secret = null, $salla_refresh_token = null, $salla_access_token = null, $temu_app_key = null, $temu_app_secret = null, $temu_access_token = null, $temu_region = 'US', string $contentType = self::contentTypes['accountConfigUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccountConfigUpdate200Response';
        $request = $this->accountConfigUpdateRequest($replace_parameters, $new_store_url, $new_store_key, $bridge_url, $store_root, $db_tables_prefix, $user_agent, $_3dcart_private_key, $_3dcart_access_token, $_3dcartapi_api_key, $amazon_sp_client_id, $amazon_sp_client_secret, $amazon_sp_refresh_token, $amazon_sp_aws_region, $amazon_sp_api_environment, $amazon_seller_id, $aspdotnetstorefront_api_user, $aspdotnetstorefront_api_pass, $bigcommerceapi_admin_account, $bigcommerceapi_api_path, $bigcommerceapi_api_key, $bigcommerceapi_client_id, $bigcommerceapi_access_token, $bigcommerceapi_context, $bol_api_key, $bol_api_secret, $bol_retailer_id, $demandware_client_id, $demandware_api_password, $demandware_user_name, $demandware_user_password, $ebay_client_id, $ebay_client_secret, $ebay_runame, $ebay_access_token, $ebay_refresh_token, $ebay_environment, $ebay_site_id, $ecwid_acess_token, $ecwid_store_id, $lazada_app_id, $lazada_app_secret, $lazada_refresh_token, $lazada_region, $etsy_keystring, $etsy_shared_secret, $etsy_access_token, $etsy_token_secret, $etsy_client_id, $etsy_refresh_token, $facebook_app_id, $facebook_app_secret, $facebook_access_token, $facebook_business_id, $neto_api_key, $neto_api_username, $shopline_access_token, $shopline_app_key, $shopline_app_secret, $shopline_shared_secret, $shopify_access_token, $shopify_api_key, $shopify_api_password, $shopify_shared_secret, $shopee_partner_id, $shopee_partner_key, $shopee_shop_id, $shopee_refresh_token, $shopee_region, $shopee_environment, $shoplazza_access_token, $shoplazza_shared_secret, $miva_access_token, $miva_signature, $shopware_access_key, $shopware_api_key, $shopware_api_secret, $bigcartel_user_name, $bigcartel_password, $volusion_login, $volusion_password, $walmart_client_id, $walmart_client_secret, $walmart_environment, $walmart_channel_type, $walmart_region, $square_client_id, $square_client_secret, $square_refresh_token, $squarespace_api_key, $squarespace_client_id, $squarespace_client_secret, $squarespace_access_token, $squarespace_refresh_token, $hybris_client_id, $hybris_client_secret, $hybris_username, $hybris_password, $hybris_websites, $lightspeed_api_key, $lightspeed_api_secret, $commercehq_api_key, $commercehq_api_password, $wc_consumer_key, $wc_consumer_secret, $magento_consumer_key, $magento_consumer_secret, $magento_access_token, $magento_token_secret, $prestashop_webservice_key, $wix_app_id, $wix_app_secret_key, $wix_instance_id, $wix_refresh_token, $mercado_libre_app_id, $mercado_libre_app_secret_key, $mercado_libre_refresh_token, $zid_client_id, $zid_client_secret, $zid_access_token, $zid_authorization, $zid_refresh_token, $flipkart_client_id, $flipkart_client_secret, $allegro_client_id, $allegro_client_secret, $allegro_access_token, $allegro_refresh_token, $allegro_environment, $zoho_client_id, $zoho_client_secret, $zoho_refresh_token, $zoho_region, $tiendanube_user_id, $tiendanube_access_token, $tiendanube_client_secret, $otto_client_id, $otto_client_secret, $otto_app_id, $otto_refresh_token, $otto_environment, $otto_access_token, $tiktokshop_app_key, $tiktokshop_app_secret, $tiktokshop_refresh_token, $tiktokshop_access_token, $salla_client_id, $salla_client_secret, $salla_refresh_token, $salla_access_token, $temu_app_key, $temu_app_secret, $temu_access_token, $temu_region, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountConfigUpdate'
     *
     * @param  bool|null $replace_parameters Identifies if there is a necessity to replace parameters (optional)
     * @param  string|null $new_store_url The web address of the store you want to update to connect to API2Cart (optional)
     * @param  string|null $new_store_key Update store key (optional)
     * @param  string|null $bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param  string|null $store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param  string|null $db_tables_prefix DB tables prefix (optional)
     * @param  string|null $user_agent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)
     * @param  string|null $_3dcart_private_key 3DCart Private Key (optional)
     * @param  string|null $_3dcart_access_token 3DCart Token (optional)
     * @param  string|null $_3dcartapi_api_key 3DCart API Key (optional)
     * @param  string|null $amazon_sp_client_id Amazon SP API app client id (optional)
     * @param  string|null $amazon_sp_client_secret Amazon SP API app client secret (optional)
     * @param  string|null $amazon_sp_refresh_token Amazon SP API OAuth refresh token (optional)
     * @param  string|null $amazon_sp_aws_region Amazon AWS Region (optional)
     * @param  string|null $amazon_sp_api_environment Amazon SP API environment (optional, default to 'production')
     * @param  string|null $amazon_seller_id Amazon Seller ID (Merchant token) (optional)
     * @param  string|null $aspdotnetstorefront_api_user It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param  string|null $aspdotnetstorefront_api_pass AspDotNetStorefront API Password (optional)
     * @param  string|null $bigcommerceapi_admin_account It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param  string|null $bigcommerceapi_api_path BigCommerce API URL (optional)
     * @param  string|null $bigcommerceapi_api_key Bigcommerce API Key (optional)
     * @param  string|null $bigcommerceapi_client_id Client ID of the requesting app (optional)
     * @param  string|null $bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $bigcommerceapi_context API Path section unique to the store (optional)
     * @param  string|null $bol_api_key Bol API Key (optional)
     * @param  string|null $bol_api_secret Bol API Secret (optional)
     * @param  int|null $bol_retailer_id Bol Retailer ID (optional)
     * @param  string|null $demandware_client_id Demandware client id (optional)
     * @param  string|null $demandware_api_password Demandware api password (optional)
     * @param  string|null $demandware_user_name Demandware user name (optional)
     * @param  string|null $demandware_user_password Demandware user password (optional)
     * @param  string|null $ebay_client_id Application ID (AppID). (optional)
     * @param  string|null $ebay_client_secret Shared Secret from eBay application (optional)
     * @param  string|null $ebay_runame The RuName value that eBay assigns to your application. (optional)
     * @param  string|null $ebay_access_token Used to authenticate API requests. (optional)
     * @param  string|null $ebay_refresh_token Used to renew the access token. (optional)
     * @param  string|null $ebay_environment eBay environment (optional)
     * @param  int|null $ebay_site_id eBay global ID (optional, default to 0)
     * @param  string|null $ecwid_acess_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $ecwid_store_id Store Id (optional)
     * @param  string|null $lazada_app_id Lazada App ID (optional)
     * @param  string|null $lazada_app_secret Lazada App Secret (optional)
     * @param  string|null $lazada_refresh_token Lazada Refresh Token (optional)
     * @param  string|null $lazada_region Lazada API endpoint Region (optional)
     * @param  string|null $etsy_keystring Etsy keystring (optional)
     * @param  string|null $etsy_shared_secret Etsy shared secret (optional)
     * @param  string|null $etsy_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $etsy_token_secret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $etsy_client_id Etsy Client Id (optional)
     * @param  string|null $etsy_refresh_token Etsy Refresh token (optional)
     * @param  string|null $facebook_app_id Facebook App ID (optional)
     * @param  string|null $facebook_app_secret Facebook App Secret (optional)
     * @param  string|null $facebook_access_token Facebook Access Token (optional)
     * @param  string|null $facebook_business_id Facebook Business ID (optional)
     * @param  string|null $neto_api_key Neto API Key (optional)
     * @param  string|null $neto_api_username Neto User Name (optional)
     * @param  string|null $shopline_access_token Shopline APP Key (optional)
     * @param  string|null $shopline_app_key Shopline APP Key (optional)
     * @param  string|null $shopline_app_secret Shopline App Secret (optional)
     * @param  string|null $shopline_shared_secret Shopline Shared Secret (optional)
     * @param  string|null $shopify_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $shopify_api_key Shopify API Key (optional)
     * @param  string|null $shopify_api_password Shopify API Password (optional)
     * @param  string|null $shopify_shared_secret Shared secret (optional)
     * @param  string|null $shopee_partner_id Shopee Partner ID (optional)
     * @param  string|null $shopee_partner_key Shopee Partner Key (optional)
     * @param  string|null $shopee_shop_id Shopee SHOP ID (optional)
     * @param  string|null $shopee_refresh_token Shopee Refresh Token (optional)
     * @param  string|null $shopee_region Shopee API endpoint Region. Use for Chinese Mainland or Brazil. (optional)
     * @param  string|null $shopee_environment Shopee Environment (optional)
     * @param  string|null $shoplazza_access_token Access token authorizing the app to access resources on behalf of a user (optional)
     * @param  string|null $shoplazza_shared_secret Shared secret (optional)
     * @param  string|null $miva_access_token Miva access token (optional)
     * @param  string|null $miva_signature Miva signature (optional)
     * @param  string|null $shopware_access_key Shopware access key (optional)
     * @param  string|null $shopware_api_key Shopware api key (optional)
     * @param  string|null $shopware_api_secret Shopware client secret access key (optional)
     * @param  string|null $bigcartel_user_name Subdomain of store (optional)
     * @param  string|null $bigcartel_password BigCartel account password (optional)
     * @param  string|null $volusion_login It&#39;s a Volusion account for which API is enabled (optional)
     * @param  string|null $volusion_password Volusion API Password (optional)
     * @param  string|null $walmart_client_id Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)
     * @param  string|null $walmart_client_secret Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)
     * @param  string|null $walmart_environment Walmart environment (optional, default to 'production')
     * @param  string|null $walmart_channel_type Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param  string|null $walmart_region Walmart region (optional, default to 'us')
     * @param  string|null $square_client_id Square (Weebly) Client ID (optional)
     * @param  string|null $square_client_secret Square (Weebly) Client Secret (optional)
     * @param  string|null $square_refresh_token Square (Weebly) Refresh Token (optional)
     * @param  string|null $squarespace_api_key Squarespace API Key (optional)
     * @param  string|null $squarespace_client_id Squarespace Connector Client ID (optional)
     * @param  string|null $squarespace_client_secret Squarespace Connector Client Secret (optional)
     * @param  string|null $squarespace_access_token Squarespace access token (optional)
     * @param  string|null $squarespace_refresh_token Squarespace refresh token (optional)
     * @param  string|null $hybris_client_id Omni Commerce Connector Client ID (optional)
     * @param  string|null $hybris_client_secret Omni Commerce Connector Client Secret (optional)
     * @param  string|null $hybris_username User Name (optional)
     * @param  string|null $hybris_password User password (optional)
     * @param  string[]|null $hybris_websites Websites to stores mapping data (optional)
     * @param  string|null $lightspeed_api_key LightSpeed api key (optional)
     * @param  string|null $lightspeed_api_secret LightSpeed api secret (optional)
     * @param  string|null $commercehq_api_key CommerceHQ api key (optional)
     * @param  string|null $commercehq_api_password CommerceHQ api password (optional)
     * @param  string|null $wc_consumer_key Woocommerce consumer key (optional)
     * @param  string|null $wc_consumer_secret Woocommerce consumer secret (optional)
     * @param  string|null $magento_consumer_key Magento Consumer Key (optional)
     * @param  string|null $magento_consumer_secret Magento Consumer Secret (optional)
     * @param  string|null $magento_access_token Magento Access Token (optional)
     * @param  string|null $magento_token_secret Magento Token Secret (optional)
     * @param  string|null $prestashop_webservice_key Prestashop webservice key (optional)
     * @param  string|null $wix_app_id Wix App ID (optional)
     * @param  string|null $wix_app_secret_key Wix App Secret Key (optional)
     * @param  string|null $wix_instance_id Wix Instance ID (optional)
     * @param  string|null $wix_refresh_token Wix refresh token (optional)
     * @param  string|null $mercado_libre_app_id Mercado Libre App ID (optional)
     * @param  string|null $mercado_libre_app_secret_key Mercado Libre App Secret Key (optional)
     * @param  string|null $mercado_libre_refresh_token Mercado Libre Refresh Token (optional)
     * @param  int|null $zid_client_id Zid Client ID (optional)
     * @param  string|null $zid_client_secret Zid Client Secret (optional)
     * @param  string|null $zid_access_token Zid Access Token (optional)
     * @param  string|null $zid_authorization Zid Authorization (optional)
     * @param  string|null $zid_refresh_token Zid refresh token (optional)
     * @param  string|null $flipkart_client_id Flipkart Client ID (optional)
     * @param  string|null $flipkart_client_secret Flipkart Client Secret (optional)
     * @param  string|null $allegro_client_id Allegro Client ID (optional)
     * @param  string|null $allegro_client_secret Allegro Client Secret (optional)
     * @param  string|null $allegro_access_token Allegro Access Token (optional)
     * @param  string|null $allegro_refresh_token Allegro Refresh Token (optional)
     * @param  string|null $allegro_environment Allegro Environment (optional, default to 'production')
     * @param  string|null $zoho_client_id Zoho Client ID (optional)
     * @param  string|null $zoho_client_secret Zoho Client Secret (optional)
     * @param  string|null $zoho_refresh_token Zoho Refresh Token (optional)
     * @param  string|null $zoho_region Zoho API endpoint Region (optional)
     * @param  int|null $tiendanube_user_id Tiendanube User ID (optional)
     * @param  string|null $tiendanube_access_token Tiendanube Access Token (optional)
     * @param  string|null $tiendanube_client_secret Tiendanube Client Secret (optional)
     * @param  string|null $otto_client_id Otto Client ID (optional)
     * @param  string|null $otto_client_secret Otto Client Secret (optional)
     * @param  string|null $otto_app_id Otto App ID (optional)
     * @param  string|null $otto_refresh_token Otto Refresh Token (optional)
     * @param  string|null $otto_environment Otto Environment (optional)
     * @param  string|null $otto_access_token Otto Access Token (optional)
     * @param  string|null $tiktokshop_app_key TikTok Shop App Key (optional)
     * @param  string|null $tiktokshop_app_secret TikTok Shop App Secret (optional)
     * @param  string|null $tiktokshop_refresh_token TikTok Shop Refresh Token (optional)
     * @param  string|null $tiktokshop_access_token TikTok Shop Access Token (optional)
     * @param  string|null $salla_client_id Salla Client ID (optional)
     * @param  string|null $salla_client_secret Salla Client Secret (optional)
     * @param  string|null $salla_refresh_token Salla Refresh Token (optional)
     * @param  string|null $salla_access_token Salla Access Token (optional)
     * @param  string|null $temu_app_key Temu App Key (optional)
     * @param  string|null $temu_app_secret Temu App Secret (optional)
     * @param  string|null $temu_access_token Temu Access Token (optional)
     * @param  string|null $temu_region Temu API endpoint Region. (optional, default to 'US')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountConfigUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountConfigUpdateRequest($replace_parameters = null, $new_store_url = null, $new_store_key = null, $bridge_url = null, $store_root = null, $db_tables_prefix = null, $user_agent = null, $_3dcart_private_key = null, $_3dcart_access_token = null, $_3dcartapi_api_key = null, $amazon_sp_client_id = null, $amazon_sp_client_secret = null, $amazon_sp_refresh_token = null, $amazon_sp_aws_region = null, $amazon_sp_api_environment = 'production', $amazon_seller_id = null, $aspdotnetstorefront_api_user = null, $aspdotnetstorefront_api_pass = null, $bigcommerceapi_admin_account = null, $bigcommerceapi_api_path = null, $bigcommerceapi_api_key = null, $bigcommerceapi_client_id = null, $bigcommerceapi_access_token = null, $bigcommerceapi_context = null, $bol_api_key = null, $bol_api_secret = null, $bol_retailer_id = null, $demandware_client_id = null, $demandware_api_password = null, $demandware_user_name = null, $demandware_user_password = null, $ebay_client_id = null, $ebay_client_secret = null, $ebay_runame = null, $ebay_access_token = null, $ebay_refresh_token = null, $ebay_environment = null, $ebay_site_id = 0, $ecwid_acess_token = null, $ecwid_store_id = null, $lazada_app_id = null, $lazada_app_secret = null, $lazada_refresh_token = null, $lazada_region = null, $etsy_keystring = null, $etsy_shared_secret = null, $etsy_access_token = null, $etsy_token_secret = null, $etsy_client_id = null, $etsy_refresh_token = null, $facebook_app_id = null, $facebook_app_secret = null, $facebook_access_token = null, $facebook_business_id = null, $neto_api_key = null, $neto_api_username = null, $shopline_access_token = null, $shopline_app_key = null, $shopline_app_secret = null, $shopline_shared_secret = null, $shopify_access_token = null, $shopify_api_key = null, $shopify_api_password = null, $shopify_shared_secret = null, $shopee_partner_id = null, $shopee_partner_key = null, $shopee_shop_id = null, $shopee_refresh_token = null, $shopee_region = null, $shopee_environment = null, $shoplazza_access_token = null, $shoplazza_shared_secret = null, $miva_access_token = null, $miva_signature = null, $shopware_access_key = null, $shopware_api_key = null, $shopware_api_secret = null, $bigcartel_user_name = null, $bigcartel_password = null, $volusion_login = null, $volusion_password = null, $walmart_client_id = null, $walmart_client_secret = null, $walmart_environment = 'production', $walmart_channel_type = null, $walmart_region = 'us', $square_client_id = null, $square_client_secret = null, $square_refresh_token = null, $squarespace_api_key = null, $squarespace_client_id = null, $squarespace_client_secret = null, $squarespace_access_token = null, $squarespace_refresh_token = null, $hybris_client_id = null, $hybris_client_secret = null, $hybris_username = null, $hybris_password = null, $hybris_websites = null, $lightspeed_api_key = null, $lightspeed_api_secret = null, $commercehq_api_key = null, $commercehq_api_password = null, $wc_consumer_key = null, $wc_consumer_secret = null, $magento_consumer_key = null, $magento_consumer_secret = null, $magento_access_token = null, $magento_token_secret = null, $prestashop_webservice_key = null, $wix_app_id = null, $wix_app_secret_key = null, $wix_instance_id = null, $wix_refresh_token = null, $mercado_libre_app_id = null, $mercado_libre_app_secret_key = null, $mercado_libre_refresh_token = null, $zid_client_id = null, $zid_client_secret = null, $zid_access_token = null, $zid_authorization = null, $zid_refresh_token = null, $flipkart_client_id = null, $flipkart_client_secret = null, $allegro_client_id = null, $allegro_client_secret = null, $allegro_access_token = null, $allegro_refresh_token = null, $allegro_environment = 'production', $zoho_client_id = null, $zoho_client_secret = null, $zoho_refresh_token = null, $zoho_region = null, $tiendanube_user_id = null, $tiendanube_access_token = null, $tiendanube_client_secret = null, $otto_client_id = null, $otto_client_secret = null, $otto_app_id = null, $otto_refresh_token = null, $otto_environment = null, $otto_access_token = null, $tiktokshop_app_key = null, $tiktokshop_app_secret = null, $tiktokshop_refresh_token = null, $tiktokshop_access_token = null, $salla_client_id = null, $salla_client_secret = null, $salla_refresh_token = null, $salla_access_token = null, $temu_app_key = null, $temu_app_secret = null, $temu_access_token = null, $temu_region = 'US', string $contentType = self::contentTypes['accountConfigUpdate'][0])
    {




























































































































































        $resourcePath = '/account.config.update.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $replace_parameters,
            'replace_parameters', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $new_store_url,
            'new_store_url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $new_store_key,
            'new_store_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bridge_url,
            'bridge_url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_root,
            'store_root', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $db_tables_prefix,
            'db_tables_prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_agent,
            'user_agent', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $_3dcart_private_key,
            '3dcart_private_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $_3dcart_access_token,
            '3dcart_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $_3dcartapi_api_key,
            '3dcartapi_api_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amazon_sp_client_id,
            'amazon_sp_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amazon_sp_client_secret,
            'amazon_sp_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amazon_sp_refresh_token,
            'amazon_sp_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amazon_sp_aws_region,
            'amazon_sp_aws_region', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amazon_sp_api_environment,
            'amazon_sp_api_environment', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amazon_seller_id,
            'amazon_seller_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $aspdotnetstorefront_api_user,
            'aspdotnetstorefront_api_user', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $aspdotnetstorefront_api_pass,
            'aspdotnetstorefront_api_pass', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bigcommerceapi_admin_account,
            'bigcommerceapi_admin_account', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bigcommerceapi_api_path,
            'bigcommerceapi_api_path', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bigcommerceapi_api_key,
            'bigcommerceapi_api_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bigcommerceapi_client_id,
            'bigcommerceapi_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bigcommerceapi_access_token,
            'bigcommerceapi_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bigcommerceapi_context,
            'bigcommerceapi_context', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bol_api_key,
            'bol_api_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bol_api_secret,
            'bol_api_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bol_retailer_id,
            'bol_retailer_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $demandware_client_id,
            'demandware_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $demandware_api_password,
            'demandware_api_password', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $demandware_user_name,
            'demandware_user_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $demandware_user_password,
            'demandware_user_password', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ebay_client_id,
            'ebay_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ebay_client_secret,
            'ebay_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ebay_runame,
            'ebay_runame', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ebay_access_token,
            'ebay_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ebay_refresh_token,
            'ebay_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ebay_environment,
            'ebay_environment', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ebay_site_id,
            'ebay_site_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ecwid_acess_token,
            'ecwid_acess_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ecwid_store_id,
            'ecwid_store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lazada_app_id,
            'lazada_app_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lazada_app_secret,
            'lazada_app_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lazada_refresh_token,
            'lazada_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lazada_region,
            'lazada_region', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $etsy_keystring,
            'etsy_keystring', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $etsy_shared_secret,
            'etsy_shared_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $etsy_access_token,
            'etsy_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $etsy_token_secret,
            'etsy_token_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $etsy_client_id,
            'etsy_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $etsy_refresh_token,
            'etsy_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $facebook_app_id,
            'facebook_app_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $facebook_app_secret,
            'facebook_app_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $facebook_access_token,
            'facebook_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $facebook_business_id,
            'facebook_business_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $neto_api_key,
            'neto_api_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $neto_api_username,
            'neto_api_username', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopline_access_token,
            'shopline_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopline_app_key,
            'shopline_app_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopline_app_secret,
            'shopline_app_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopline_shared_secret,
            'shopline_shared_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopify_access_token,
            'shopify_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopify_api_key,
            'shopify_api_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopify_api_password,
            'shopify_api_password', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopify_shared_secret,
            'shopify_shared_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopee_partner_id,
            'shopee_partner_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopee_partner_key,
            'shopee_partner_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopee_shop_id,
            'shopee_shop_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopee_refresh_token,
            'shopee_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopee_region,
            'shopee_region', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopee_environment,
            'shopee_environment', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shoplazza_access_token,
            'shoplazza_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shoplazza_shared_secret,
            'shoplazza_shared_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $miva_access_token,
            'miva_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $miva_signature,
            'miva_signature', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopware_access_key,
            'shopware_access_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopware_api_key,
            'shopware_api_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shopware_api_secret,
            'shopware_api_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bigcartel_user_name,
            'bigcartel_user_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bigcartel_password,
            'bigcartel_password', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $volusion_login,
            'volusion_login', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $volusion_password,
            'volusion_password', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $walmart_client_id,
            'walmart_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $walmart_client_secret,
            'walmart_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $walmart_environment,
            'walmart_environment', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $walmart_channel_type,
            'walmart_channel_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $walmart_region,
            'walmart_region', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $square_client_id,
            'square_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $square_client_secret,
            'square_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $square_refresh_token,
            'square_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $squarespace_api_key,
            'squarespace_api_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $squarespace_client_id,
            'squarespace_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $squarespace_client_secret,
            'squarespace_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $squarespace_access_token,
            'squarespace_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $squarespace_refresh_token,
            'squarespace_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hybris_client_id,
            'hybris_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hybris_client_secret,
            'hybris_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hybris_username,
            'hybris_username', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hybris_password,
            'hybris_password', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hybris_websites,
            'hybris_websites', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lightspeed_api_key,
            'lightspeed_api_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lightspeed_api_secret,
            'lightspeed_api_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $commercehq_api_key,
            'commercehq_api_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $commercehq_api_password,
            'commercehq_api_password', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wc_consumer_key,
            'wc_consumer_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wc_consumer_secret,
            'wc_consumer_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $magento_consumer_key,
            'magento_consumer_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $magento_consumer_secret,
            'magento_consumer_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $magento_access_token,
            'magento_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $magento_token_secret,
            'magento_token_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prestashop_webservice_key,
            'prestashop_webservice_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wix_app_id,
            'wix_app_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wix_app_secret_key,
            'wix_app_secret_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wix_instance_id,
            'wix_instance_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wix_refresh_token,
            'wix_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mercado_libre_app_id,
            'mercado_libre_app_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mercado_libre_app_secret_key,
            'mercado_libre_app_secret_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mercado_libre_refresh_token,
            'mercado_libre_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zid_client_id,
            'zid_client_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zid_client_secret,
            'zid_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zid_access_token,
            'zid_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zid_authorization,
            'zid_authorization', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zid_refresh_token,
            'zid_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $flipkart_client_id,
            'flipkart_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $flipkart_client_secret,
            'flipkart_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allegro_client_id,
            'allegro_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allegro_client_secret,
            'allegro_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allegro_access_token,
            'allegro_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allegro_refresh_token,
            'allegro_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allegro_environment,
            'allegro_environment', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zoho_client_id,
            'zoho_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zoho_client_secret,
            'zoho_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zoho_refresh_token,
            'zoho_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zoho_region,
            'zoho_region', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tiendanube_user_id,
            'tiendanube_user_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tiendanube_access_token,
            'tiendanube_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tiendanube_client_secret,
            'tiendanube_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $otto_client_id,
            'otto_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $otto_client_secret,
            'otto_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $otto_app_id,
            'otto_app_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $otto_refresh_token,
            'otto_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $otto_environment,
            'otto_environment', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $otto_access_token,
            'otto_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tiktokshop_app_key,
            'tiktokshop_app_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tiktokshop_app_secret,
            'tiktokshop_app_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tiktokshop_refresh_token,
            'tiktokshop_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tiktokshop_access_token,
            'tiktokshop_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $salla_client_id,
            'salla_client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $salla_client_secret,
            'salla_client_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $salla_refresh_token,
            'salla_refresh_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $salla_access_token,
            'salla_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $temu_app_key,
            'temu_app_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $temu_app_secret,
            'temu_app_secret', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $temu_access_token,
            'temu_access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $temu_region,
            'temu_region', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountFailedWebhooks
     *
     * account.failed_webhooks
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $ids List of сomma-separated webhook ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountFailedWebhooks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccountFailedWebhooks200Response
     */
    public function accountFailedWebhooks($start = 0, $count = 10, $ids = null, string $contentType = self::contentTypes['accountFailedWebhooks'][0])
    {
        list($response) = $this->accountFailedWebhooksWithHttpInfo($start, $count, $ids, $contentType);
        return $response;
    }

    /**
     * Operation accountFailedWebhooksWithHttpInfo
     *
     * account.failed_webhooks
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $ids List of сomma-separated webhook ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountFailedWebhooks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccountFailedWebhooks200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountFailedWebhooksWithHttpInfo($start = 0, $count = 10, $ids = null, string $contentType = self::contentTypes['accountFailedWebhooks'][0])
    {
        $request = $this->accountFailedWebhooksRequest($start, $count, $ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccountFailedWebhooks200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccountFailedWebhooks200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccountFailedWebhooks200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AccountFailedWebhooks200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccountFailedWebhooks200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountFailedWebhooksAsync
     *
     * account.failed_webhooks
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $ids List of сomma-separated webhook ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountFailedWebhooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountFailedWebhooksAsync($start = 0, $count = 10, $ids = null, string $contentType = self::contentTypes['accountFailedWebhooks'][0])
    {
        return $this->accountFailedWebhooksAsyncWithHttpInfo($start, $count, $ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountFailedWebhooksAsyncWithHttpInfo
     *
     * account.failed_webhooks
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $ids List of сomma-separated webhook ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountFailedWebhooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountFailedWebhooksAsyncWithHttpInfo($start = 0, $count = 10, $ids = null, string $contentType = self::contentTypes['accountFailedWebhooks'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccountFailedWebhooks200Response';
        $request = $this->accountFailedWebhooksRequest($start, $count, $ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountFailedWebhooks'
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $ids List of сomma-separated webhook ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountFailedWebhooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountFailedWebhooksRequest($start = 0, $count = 10, $ids = null, string $contentType = self::contentTypes['accountFailedWebhooks'][0])
    {





        $resourcePath = '/account.failed_webhooks.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountSupportedPlatforms
     *
     * account.supported_platforms
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountSupportedPlatforms'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccountSupportedPlatforms200Response
     */
    public function accountSupportedPlatforms(string $contentType = self::contentTypes['accountSupportedPlatforms'][0])
    {
        list($response) = $this->accountSupportedPlatformsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation accountSupportedPlatformsWithHttpInfo
     *
     * account.supported_platforms
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountSupportedPlatforms'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccountSupportedPlatforms200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountSupportedPlatformsWithHttpInfo(string $contentType = self::contentTypes['accountSupportedPlatforms'][0])
    {
        $request = $this->accountSupportedPlatformsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccountSupportedPlatforms200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccountSupportedPlatforms200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccountSupportedPlatforms200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AccountSupportedPlatforms200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccountSupportedPlatforms200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountSupportedPlatformsAsync
     *
     * account.supported_platforms
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountSupportedPlatforms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountSupportedPlatformsAsync(string $contentType = self::contentTypes['accountSupportedPlatforms'][0])
    {
        return $this->accountSupportedPlatformsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountSupportedPlatformsAsyncWithHttpInfo
     *
     * account.supported_platforms
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountSupportedPlatforms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountSupportedPlatformsAsyncWithHttpInfo(string $contentType = self::contentTypes['accountSupportedPlatforms'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccountSupportedPlatforms200Response';
        $request = $this->accountSupportedPlatformsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountSupportedPlatforms'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountSupportedPlatforms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountSupportedPlatformsRequest(string $contentType = self::contentTypes['accountSupportedPlatforms'][0])
    {


        $resourcePath = '/account.supported_platforms.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
