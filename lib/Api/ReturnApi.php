<?php
/**
 * ReturnApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ReturnApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReturnApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'returnActionList' => [
            'application/json',
        ],
        'returnCount' => [
            'application/json',
        ],
        'returnInfo' => [
            'application/json',
        ],
        'returnList' => [
            'application/json',
        ],
        'returnReasonList' => [
            'application/json',
        ],
        'returnStatusList' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation returnActionList
     *
     * return.action.list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnActionList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReturnActionList200Response
     */
    public function returnActionList(string $contentType = self::contentTypes['returnActionList'][0])
    {
        list($response) = $this->returnActionListWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation returnActionListWithHttpInfo
     *
     * return.action.list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnActionList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReturnActionList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnActionListWithHttpInfo(string $contentType = self::contentTypes['returnActionList'][0])
    {
        $request = $this->returnActionListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReturnActionList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReturnActionList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReturnActionList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ReturnActionList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReturnActionList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnActionListAsync
     *
     * return.action.list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnActionList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnActionListAsync(string $contentType = self::contentTypes['returnActionList'][0])
    {
        return $this->returnActionListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnActionListAsyncWithHttpInfo
     *
     * return.action.list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnActionList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnActionListAsyncWithHttpInfo(string $contentType = self::contentTypes['returnActionList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReturnActionList200Response';
        $request = $this->returnActionListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnActionList'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnActionList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnActionListRequest(string $contentType = self::contentTypes['returnActionList'][0])
    {


        $resourcePath = '/return.action.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnCount
     *
     * return.count
     *
     * @param  string|null $order_ids Counts return requests specified by order ids (optional)
     * @param  string|null $customer_id Counts return requests quantity specified by customer id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $status Defines status (optional)
     * @param  string|null $return_type Retrieves returns specified by return type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnCount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReturnCount200Response
     */
    public function returnCount($order_ids = null, $customer_id = null, $store_id = null, $status = null, $return_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['returnCount'][0])
    {
        list($response) = $this->returnCountWithHttpInfo($order_ids, $customer_id, $store_id, $status, $return_type, $created_from, $created_to, $modified_from, $modified_to, $report_request_id, $disable_report_cache, $contentType);
        return $response;
    }

    /**
     * Operation returnCountWithHttpInfo
     *
     * return.count
     *
     * @param  string|null $order_ids Counts return requests specified by order ids (optional)
     * @param  string|null $customer_id Counts return requests quantity specified by customer id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $status Defines status (optional)
     * @param  string|null $return_type Retrieves returns specified by return type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnCount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReturnCount200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnCountWithHttpInfo($order_ids = null, $customer_id = null, $store_id = null, $status = null, $return_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['returnCount'][0])
    {
        $request = $this->returnCountRequest($order_ids, $customer_id, $store_id, $status, $return_type, $created_from, $created_to, $modified_from, $modified_to, $report_request_id, $disable_report_cache, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReturnCount200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReturnCount200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReturnCount200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ReturnCount200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReturnCount200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnCountAsync
     *
     * return.count
     *
     * @param  string|null $order_ids Counts return requests specified by order ids (optional)
     * @param  string|null $customer_id Counts return requests quantity specified by customer id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $status Defines status (optional)
     * @param  string|null $return_type Retrieves returns specified by return type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnCountAsync($order_ids = null, $customer_id = null, $store_id = null, $status = null, $return_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['returnCount'][0])
    {
        return $this->returnCountAsyncWithHttpInfo($order_ids, $customer_id, $store_id, $status, $return_type, $created_from, $created_to, $modified_from, $modified_to, $report_request_id, $disable_report_cache, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnCountAsyncWithHttpInfo
     *
     * return.count
     *
     * @param  string|null $order_ids Counts return requests specified by order ids (optional)
     * @param  string|null $customer_id Counts return requests quantity specified by customer id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $status Defines status (optional)
     * @param  string|null $return_type Retrieves returns specified by return type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnCountAsyncWithHttpInfo($order_ids = null, $customer_id = null, $store_id = null, $status = null, $return_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['returnCount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReturnCount200Response';
        $request = $this->returnCountRequest($order_ids, $customer_id, $store_id, $status, $return_type, $created_from, $created_to, $modified_from, $modified_to, $report_request_id, $disable_report_cache, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnCount'
     *
     * @param  string|null $order_ids Counts return requests specified by order ids (optional)
     * @param  string|null $customer_id Counts return requests quantity specified by customer id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $status Defines status (optional)
     * @param  string|null $return_type Retrieves returns specified by return type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnCountRequest($order_ids = null, $customer_id = null, $store_id = null, $status = null, $return_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['returnCount'][0])
    {













        $resourcePath = '/return.count.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_ids,
            'order_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer_id,
            'customer_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_type,
            'return_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_from,
            'created_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_to,
            'created_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_from,
            'modified_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_to,
            'modified_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_request_id,
            'report_request_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disable_report_cache,
            'disable_report_cache', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnInfo
     *
     * return.info
     *
     * @param  string $id Entity id (required)
     * @param  string|null $order_id Defines the order id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_products')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReturnInfo200Response
     */
    public function returnInfo($id, $order_id = null, $store_id = null, $params = 'id,order_products', $exclude = null, $response_fields = null, string $contentType = self::contentTypes['returnInfo'][0])
    {
        list($response) = $this->returnInfoWithHttpInfo($id, $order_id, $store_id, $params, $exclude, $response_fields, $contentType);
        return $response;
    }

    /**
     * Operation returnInfoWithHttpInfo
     *
     * return.info
     *
     * @param  string $id Entity id (required)
     * @param  string|null $order_id Defines the order id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_products')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReturnInfo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnInfoWithHttpInfo($id, $order_id = null, $store_id = null, $params = 'id,order_products', $exclude = null, $response_fields = null, string $contentType = self::contentTypes['returnInfo'][0])
    {
        $request = $this->returnInfoRequest($id, $order_id, $store_id, $params, $exclude, $response_fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReturnInfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReturnInfo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReturnInfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ReturnInfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReturnInfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnInfoAsync
     *
     * return.info
     *
     * @param  string $id Entity id (required)
     * @param  string|null $order_id Defines the order id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_products')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnInfoAsync($id, $order_id = null, $store_id = null, $params = 'id,order_products', $exclude = null, $response_fields = null, string $contentType = self::contentTypes['returnInfo'][0])
    {
        return $this->returnInfoAsyncWithHttpInfo($id, $order_id, $store_id, $params, $exclude, $response_fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnInfoAsyncWithHttpInfo
     *
     * return.info
     *
     * @param  string $id Entity id (required)
     * @param  string|null $order_id Defines the order id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_products')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnInfoAsyncWithHttpInfo($id, $order_id = null, $store_id = null, $params = 'id,order_products', $exclude = null, $response_fields = null, string $contentType = self::contentTypes['returnInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReturnInfo200Response';
        $request = $this->returnInfoRequest($id, $order_id, $store_id, $params, $exclude, $response_fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnInfo'
     *
     * @param  string $id Entity id (required)
     * @param  string|null $order_id Defines the order id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_products')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnInfoRequest($id, $order_id = null, $store_id = null, $params = 'id,order_products', $exclude = null, $response_fields = null, string $contentType = self::contentTypes['returnInfo'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling returnInfo'
            );
        }







        $resourcePath = '/return.info.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'order_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $params,
            'params', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude,
            'exclude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_fields,
            'response_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnList
     *
     * return.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_products')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $order_id Defines the order id (optional)
     * @param  string|null $order_ids Retrieves return requests specified by order ids (optional)
     * @param  string|null $customer_id Retrieves return requests specified by customer id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $status Defines status (optional)
     * @param  string|null $return_type Retrieves returns specified by return type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelResponseReturnList
     */
    public function returnList($start = 0, $count = 10, $page_cursor = null, $params = 'id,order_products', $exclude = null, $response_fields = null, $order_id = null, $order_ids = null, $customer_id = null, $store_id = null, $status = null, $return_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['returnList'][0])
    {
        list($response) = $this->returnListWithHttpInfo($start, $count, $page_cursor, $params, $exclude, $response_fields, $order_id, $order_ids, $customer_id, $store_id, $status, $return_type, $created_from, $created_to, $modified_from, $modified_to, $report_request_id, $disable_report_cache, $contentType);
        return $response;
    }

    /**
     * Operation returnListWithHttpInfo
     *
     * return.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_products')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $order_id Defines the order id (optional)
     * @param  string|null $order_ids Retrieves return requests specified by order ids (optional)
     * @param  string|null $customer_id Retrieves return requests specified by customer id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $status Defines status (optional)
     * @param  string|null $return_type Retrieves returns specified by return type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelResponseReturnList, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnListWithHttpInfo($start = 0, $count = 10, $page_cursor = null, $params = 'id,order_products', $exclude = null, $response_fields = null, $order_id = null, $order_ids = null, $customer_id = null, $store_id = null, $status = null, $return_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['returnList'][0])
    {
        $request = $this->returnListRequest($start, $count, $page_cursor, $params, $exclude, $response_fields, $order_id, $order_ids, $customer_id, $store_id, $status, $return_type, $created_from, $created_to, $modified_from, $modified_to, $report_request_id, $disable_report_cache, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelResponseReturnList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModelResponseReturnList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelResponseReturnList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ModelResponseReturnList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelResponseReturnList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnListAsync
     *
     * return.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_products')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $order_id Defines the order id (optional)
     * @param  string|null $order_ids Retrieves return requests specified by order ids (optional)
     * @param  string|null $customer_id Retrieves return requests specified by customer id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $status Defines status (optional)
     * @param  string|null $return_type Retrieves returns specified by return type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnListAsync($start = 0, $count = 10, $page_cursor = null, $params = 'id,order_products', $exclude = null, $response_fields = null, $order_id = null, $order_ids = null, $customer_id = null, $store_id = null, $status = null, $return_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['returnList'][0])
    {
        return $this->returnListAsyncWithHttpInfo($start, $count, $page_cursor, $params, $exclude, $response_fields, $order_id, $order_ids, $customer_id, $store_id, $status, $return_type, $created_from, $created_to, $modified_from, $modified_to, $report_request_id, $disable_report_cache, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnListAsyncWithHttpInfo
     *
     * return.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_products')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $order_id Defines the order id (optional)
     * @param  string|null $order_ids Retrieves return requests specified by order ids (optional)
     * @param  string|null $customer_id Retrieves return requests specified by customer id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $status Defines status (optional)
     * @param  string|null $return_type Retrieves returns specified by return type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnListAsyncWithHttpInfo($start = 0, $count = 10, $page_cursor = null, $params = 'id,order_products', $exclude = null, $response_fields = null, $order_id = null, $order_ids = null, $customer_id = null, $store_id = null, $status = null, $return_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['returnList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModelResponseReturnList';
        $request = $this->returnListRequest($start, $count, $page_cursor, $params, $exclude, $response_fields, $order_id, $order_ids, $customer_id, $store_id, $status, $return_type, $created_from, $created_to, $modified_from, $modified_to, $report_request_id, $disable_report_cache, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnList'
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_products')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $order_id Defines the order id (optional)
     * @param  string|null $order_ids Retrieves return requests specified by order ids (optional)
     * @param  string|null $customer_id Retrieves return requests specified by customer id (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $status Defines status (optional)
     * @param  string|null $return_type Retrieves returns specified by return type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnListRequest($start = 0, $count = 10, $page_cursor = null, $params = 'id,order_products', $exclude = null, $response_fields = null, $order_id = null, $order_ids = null, $customer_id = null, $store_id = null, $status = null, $return_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['returnList'][0])
    {




















        $resourcePath = '/return.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_cursor,
            'page_cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $params,
            'params', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude,
            'exclude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_fields,
            'response_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'order_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_ids,
            'order_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer_id,
            'customer_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_type,
            'return_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_from,
            'created_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_to,
            'created_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_from,
            'modified_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_to,
            'modified_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_request_id,
            'report_request_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disable_report_cache,
            'disable_report_cache', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnReasonList
     *
     * return.reason.list
     *
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnReasonList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReturnReasonList200Response
     */
    public function returnReasonList($store_id = null, string $contentType = self::contentTypes['returnReasonList'][0])
    {
        list($response) = $this->returnReasonListWithHttpInfo($store_id, $contentType);
        return $response;
    }

    /**
     * Operation returnReasonListWithHttpInfo
     *
     * return.reason.list
     *
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnReasonList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReturnReasonList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnReasonListWithHttpInfo($store_id = null, string $contentType = self::contentTypes['returnReasonList'][0])
    {
        $request = $this->returnReasonListRequest($store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReturnReasonList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReturnReasonList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReturnReasonList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ReturnReasonList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReturnReasonList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnReasonListAsync
     *
     * return.reason.list
     *
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnReasonList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnReasonListAsync($store_id = null, string $contentType = self::contentTypes['returnReasonList'][0])
    {
        return $this->returnReasonListAsyncWithHttpInfo($store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnReasonListAsyncWithHttpInfo
     *
     * return.reason.list
     *
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnReasonList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnReasonListAsyncWithHttpInfo($store_id = null, string $contentType = self::contentTypes['returnReasonList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReturnReasonList200Response';
        $request = $this->returnReasonListRequest($store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnReasonList'
     *
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnReasonList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnReasonListRequest($store_id = null, string $contentType = self::contentTypes['returnReasonList'][0])
    {



        $resourcePath = '/return.reason.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation returnStatusList
     *
     * return.status.list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnStatusList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReturnStatusList200Response
     */
    public function returnStatusList(string $contentType = self::contentTypes['returnStatusList'][0])
    {
        list($response) = $this->returnStatusListWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation returnStatusListWithHttpInfo
     *
     * return.status.list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnStatusList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReturnStatusList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function returnStatusListWithHttpInfo(string $contentType = self::contentTypes['returnStatusList'][0])
    {
        $request = $this->returnStatusListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReturnStatusList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReturnStatusList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReturnStatusList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ReturnStatusList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReturnStatusList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation returnStatusListAsync
     *
     * return.status.list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnStatusList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnStatusListAsync(string $contentType = self::contentTypes['returnStatusList'][0])
    {
        return $this->returnStatusListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation returnStatusListAsyncWithHttpInfo
     *
     * return.status.list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnStatusList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function returnStatusListAsyncWithHttpInfo(string $contentType = self::contentTypes['returnStatusList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReturnStatusList200Response';
        $request = $this->returnStatusListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'returnStatusList'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['returnStatusList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function returnStatusListRequest(string $contentType = self::contentTypes['returnStatusList'][0])
    {


        $resourcePath = '/return.status.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
