<?php
/**
 * CategoryApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CategoryApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CategoryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'categoryAdd' => [
            'application/json',
        ],
        'categoryAddBatch' => [
            'application/json',
        ],
        'categoryAssign' => [
            'application/json',
        ],
        'categoryCount' => [
            'application/json',
        ],
        'categoryDelete' => [
            'application/json',
        ],
        'categoryFind' => [
            'application/json',
        ],
        'categoryImageAdd' => [
            'application/json',
        ],
        'categoryImageDelete' => [
            'application/json',
        ],
        'categoryInfo' => [
            'application/json',
        ],
        'categoryList' => [
            'application/json',
        ],
        'categoryUnassign' => [
            'application/json',
        ],
        'categoryUpdate' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation categoryAdd
     *
     * category.add
     *
     * @param  string $name Defines category&#39;s name that has to be added (required)
     * @param  string|null $description Defines category&#39;s description (optional)
     * @param  string|null $short_description Defines short description (optional)
     * @param  string|null $parent_id Adds categories specified by parent id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $created_time Entity&#39;s date creation (optional)
     * @param  string|null $modified_time Entity&#39;s date modification (optional)
     * @param  int|null $sort_order Sort number in the list (optional, default to 0)
     * @param  string|null $meta_title Defines unique meta title for each entity (optional)
     * @param  string|null $meta_description Defines unique meta description of a entity (optional)
     * @param  string|null $meta_keywords Defines unique meta keywords for each entity (optional)
     * @param  string|null $seo_url Defines unique category&#39;s URL for SEO (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $stores_ids Create category in the stores that is specified by comma-separated stores&#39; id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CategoryAdd200Response
     */
    public function categoryAdd($name, $description = null, $short_description = null, $parent_id = null, $avail = true, $created_time = null, $modified_time = null, $sort_order = 0, $meta_title = null, $meta_description = null, $meta_keywords = null, $seo_url = null, $store_id = null, $stores_ids = null, $lang_id = null, string $contentType = self::contentTypes['categoryAdd'][0])
    {
        list($response) = $this->categoryAddWithHttpInfo($name, $description, $short_description, $parent_id, $avail, $created_time, $modified_time, $sort_order, $meta_title, $meta_description, $meta_keywords, $seo_url, $store_id, $stores_ids, $lang_id, $contentType);
        return $response;
    }

    /**
     * Operation categoryAddWithHttpInfo
     *
     * category.add
     *
     * @param  string $name Defines category&#39;s name that has to be added (required)
     * @param  string|null $description Defines category&#39;s description (optional)
     * @param  string|null $short_description Defines short description (optional)
     * @param  string|null $parent_id Adds categories specified by parent id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $created_time Entity&#39;s date creation (optional)
     * @param  string|null $modified_time Entity&#39;s date modification (optional)
     * @param  int|null $sort_order Sort number in the list (optional, default to 0)
     * @param  string|null $meta_title Defines unique meta title for each entity (optional)
     * @param  string|null $meta_description Defines unique meta description of a entity (optional)
     * @param  string|null $meta_keywords Defines unique meta keywords for each entity (optional)
     * @param  string|null $seo_url Defines unique category&#39;s URL for SEO (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $stores_ids Create category in the stores that is specified by comma-separated stores&#39; id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CategoryAdd200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function categoryAddWithHttpInfo($name, $description = null, $short_description = null, $parent_id = null, $avail = true, $created_time = null, $modified_time = null, $sort_order = 0, $meta_title = null, $meta_description = null, $meta_keywords = null, $seo_url = null, $store_id = null, $stores_ids = null, $lang_id = null, string $contentType = self::contentTypes['categoryAdd'][0])
    {
        $request = $this->categoryAddRequest($name, $description, $short_description, $parent_id, $avail, $created_time, $modified_time, $sort_order, $meta_title, $meta_description, $meta_keywords, $seo_url, $store_id, $stores_ids, $lang_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CategoryAdd200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CategoryAdd200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CategoryAdd200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\CategoryAdd200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CategoryAdd200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation categoryAddAsync
     *
     * category.add
     *
     * @param  string $name Defines category&#39;s name that has to be added (required)
     * @param  string|null $description Defines category&#39;s description (optional)
     * @param  string|null $short_description Defines short description (optional)
     * @param  string|null $parent_id Adds categories specified by parent id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $created_time Entity&#39;s date creation (optional)
     * @param  string|null $modified_time Entity&#39;s date modification (optional)
     * @param  int|null $sort_order Sort number in the list (optional, default to 0)
     * @param  string|null $meta_title Defines unique meta title for each entity (optional)
     * @param  string|null $meta_description Defines unique meta description of a entity (optional)
     * @param  string|null $meta_keywords Defines unique meta keywords for each entity (optional)
     * @param  string|null $seo_url Defines unique category&#39;s URL for SEO (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $stores_ids Create category in the stores that is specified by comma-separated stores&#39; id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryAddAsync($name, $description = null, $short_description = null, $parent_id = null, $avail = true, $created_time = null, $modified_time = null, $sort_order = 0, $meta_title = null, $meta_description = null, $meta_keywords = null, $seo_url = null, $store_id = null, $stores_ids = null, $lang_id = null, string $contentType = self::contentTypes['categoryAdd'][0])
    {
        return $this->categoryAddAsyncWithHttpInfo($name, $description, $short_description, $parent_id, $avail, $created_time, $modified_time, $sort_order, $meta_title, $meta_description, $meta_keywords, $seo_url, $store_id, $stores_ids, $lang_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation categoryAddAsyncWithHttpInfo
     *
     * category.add
     *
     * @param  string $name Defines category&#39;s name that has to be added (required)
     * @param  string|null $description Defines category&#39;s description (optional)
     * @param  string|null $short_description Defines short description (optional)
     * @param  string|null $parent_id Adds categories specified by parent id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $created_time Entity&#39;s date creation (optional)
     * @param  string|null $modified_time Entity&#39;s date modification (optional)
     * @param  int|null $sort_order Sort number in the list (optional, default to 0)
     * @param  string|null $meta_title Defines unique meta title for each entity (optional)
     * @param  string|null $meta_description Defines unique meta description of a entity (optional)
     * @param  string|null $meta_keywords Defines unique meta keywords for each entity (optional)
     * @param  string|null $seo_url Defines unique category&#39;s URL for SEO (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $stores_ids Create category in the stores that is specified by comma-separated stores&#39; id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryAddAsyncWithHttpInfo($name, $description = null, $short_description = null, $parent_id = null, $avail = true, $created_time = null, $modified_time = null, $sort_order = 0, $meta_title = null, $meta_description = null, $meta_keywords = null, $seo_url = null, $store_id = null, $stores_ids = null, $lang_id = null, string $contentType = self::contentTypes['categoryAdd'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CategoryAdd200Response';
        $request = $this->categoryAddRequest($name, $description, $short_description, $parent_id, $avail, $created_time, $modified_time, $sort_order, $meta_title, $meta_description, $meta_keywords, $seo_url, $store_id, $stores_ids, $lang_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'categoryAdd'
     *
     * @param  string $name Defines category&#39;s name that has to be added (required)
     * @param  string|null $description Defines category&#39;s description (optional)
     * @param  string|null $short_description Defines short description (optional)
     * @param  string|null $parent_id Adds categories specified by parent id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $created_time Entity&#39;s date creation (optional)
     * @param  string|null $modified_time Entity&#39;s date modification (optional)
     * @param  int|null $sort_order Sort number in the list (optional, default to 0)
     * @param  string|null $meta_title Defines unique meta title for each entity (optional)
     * @param  string|null $meta_description Defines unique meta description of a entity (optional)
     * @param  string|null $meta_keywords Defines unique meta keywords for each entity (optional)
     * @param  string|null $seo_url Defines unique category&#39;s URL for SEO (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $stores_ids Create category in the stores that is specified by comma-separated stores&#39; id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function categoryAddRequest($name, $description = null, $short_description = null, $parent_id = null, $avail = true, $created_time = null, $modified_time = null, $sort_order = 0, $meta_title = null, $meta_description = null, $meta_keywords = null, $seo_url = null, $store_id = null, $stores_ids = null, $lang_id = null, string $contentType = self::contentTypes['categoryAdd'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling categoryAdd'
            );
        }
















        $resourcePath = '/category.add.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $short_description,
            'short_description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parent_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $avail,
            'avail', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_time,
            'created_time', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_time,
            'modified_time', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sort_order', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $meta_title,
            'meta_title', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $meta_description,
            'meta_description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $meta_keywords,
            'meta_keywords', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $seo_url,
            'seo_url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stores_ids,
            'stores_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang_id,
            'lang_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation categoryAddBatch
     *
     * category.add.batch
     *
     * @param  \OpenAPI\Client\Model\CategoryAddBatch $category_add_batch category_add_batch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAddBatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CategoryAddBatch200Response
     */
    public function categoryAddBatch($category_add_batch, string $contentType = self::contentTypes['categoryAddBatch'][0])
    {
        list($response) = $this->categoryAddBatchWithHttpInfo($category_add_batch, $contentType);
        return $response;
    }

    /**
     * Operation categoryAddBatchWithHttpInfo
     *
     * category.add.batch
     *
     * @param  \OpenAPI\Client\Model\CategoryAddBatch $category_add_batch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAddBatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CategoryAddBatch200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function categoryAddBatchWithHttpInfo($category_add_batch, string $contentType = self::contentTypes['categoryAddBatch'][0])
    {
        $request = $this->categoryAddBatchRequest($category_add_batch, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CategoryAddBatch200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CategoryAddBatch200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CategoryAddBatch200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\CategoryAddBatch200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CategoryAddBatch200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation categoryAddBatchAsync
     *
     * category.add.batch
     *
     * @param  \OpenAPI\Client\Model\CategoryAddBatch $category_add_batch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAddBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryAddBatchAsync($category_add_batch, string $contentType = self::contentTypes['categoryAddBatch'][0])
    {
        return $this->categoryAddBatchAsyncWithHttpInfo($category_add_batch, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation categoryAddBatchAsyncWithHttpInfo
     *
     * category.add.batch
     *
     * @param  \OpenAPI\Client\Model\CategoryAddBatch $category_add_batch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAddBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryAddBatchAsyncWithHttpInfo($category_add_batch, string $contentType = self::contentTypes['categoryAddBatch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CategoryAddBatch200Response';
        $request = $this->categoryAddBatchRequest($category_add_batch, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'categoryAddBatch'
     *
     * @param  \OpenAPI\Client\Model\CategoryAddBatch $category_add_batch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAddBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function categoryAddBatchRequest($category_add_batch, string $contentType = self::contentTypes['categoryAddBatch'][0])
    {

        // verify the required parameter 'category_add_batch' is set
        if ($category_add_batch === null || (is_array($category_add_batch) && count($category_add_batch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_add_batch when calling categoryAddBatch'
            );
        }


        $resourcePath = '/category.add.batch.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($category_add_batch)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($category_add_batch));
            } else {
                $httpBody = $category_add_batch;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation categoryAssign
     *
     * category.assign
     *
     * @param  string $category_id Defines category assign, specified by category id (required)
     * @param  string $product_id Defines category assign to the product, specified by product id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAssign'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CartConfigUpdate200Response
     */
    public function categoryAssign($category_id, $product_id, $store_id = null, string $contentType = self::contentTypes['categoryAssign'][0])
    {
        list($response) = $this->categoryAssignWithHttpInfo($category_id, $product_id, $store_id, $contentType);
        return $response;
    }

    /**
     * Operation categoryAssignWithHttpInfo
     *
     * category.assign
     *
     * @param  string $category_id Defines category assign, specified by category id (required)
     * @param  string $product_id Defines category assign to the product, specified by product id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAssign'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CartConfigUpdate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function categoryAssignWithHttpInfo($category_id, $product_id, $store_id = null, string $contentType = self::contentTypes['categoryAssign'][0])
    {
        $request = $this->categoryAssignRequest($category_id, $product_id, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CartConfigUpdate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CartConfigUpdate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CartConfigUpdate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\CartConfigUpdate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CartConfigUpdate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation categoryAssignAsync
     *
     * category.assign
     *
     * @param  string $category_id Defines category assign, specified by category id (required)
     * @param  string $product_id Defines category assign to the product, specified by product id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAssign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryAssignAsync($category_id, $product_id, $store_id = null, string $contentType = self::contentTypes['categoryAssign'][0])
    {
        return $this->categoryAssignAsyncWithHttpInfo($category_id, $product_id, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation categoryAssignAsyncWithHttpInfo
     *
     * category.assign
     *
     * @param  string $category_id Defines category assign, specified by category id (required)
     * @param  string $product_id Defines category assign to the product, specified by product id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAssign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryAssignAsyncWithHttpInfo($category_id, $product_id, $store_id = null, string $contentType = self::contentTypes['categoryAssign'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CartConfigUpdate200Response';
        $request = $this->categoryAssignRequest($category_id, $product_id, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'categoryAssign'
     *
     * @param  string $category_id Defines category assign, specified by category id (required)
     * @param  string $product_id Defines category assign to the product, specified by product id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryAssign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function categoryAssignRequest($category_id, $product_id, $store_id = null, string $contentType = self::contentTypes['categoryAssign'][0])
    {

        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling categoryAssign'
            );
        }

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling categoryAssign'
            );
        }



        $resourcePath = '/category.assign.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category_id,
            'category_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id,
            'product_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation categoryCount
     *
     * category.count
     *
     * @param  string|null $parent_id Counts categories specified by parent id (optional)
     * @param  string|null $store_id Counts category specified by store id (optional)
     * @param  string|null $lang_id Counts category specified by language id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $product_type A categorization for the product (optional)
     * @param  string|null $find_value Entity search that is specified by some value (optional)
     * @param  string|null $find_where Counts categories that are searched specified by field (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryCount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CategoryCount200Response
     */
    public function categoryCount($parent_id = null, $store_id = null, $lang_id = null, $avail = true, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $product_type = null, $find_value = null, $find_where = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['categoryCount'][0])
    {
        list($response) = $this->categoryCountWithHttpInfo($parent_id, $store_id, $lang_id, $avail, $created_from, $created_to, $modified_from, $modified_to, $product_type, $find_value, $find_where, $report_request_id, $disable_report_cache, $contentType);
        return $response;
    }

    /**
     * Operation categoryCountWithHttpInfo
     *
     * category.count
     *
     * @param  string|null $parent_id Counts categories specified by parent id (optional)
     * @param  string|null $store_id Counts category specified by store id (optional)
     * @param  string|null $lang_id Counts category specified by language id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $product_type A categorization for the product (optional)
     * @param  string|null $find_value Entity search that is specified by some value (optional)
     * @param  string|null $find_where Counts categories that are searched specified by field (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryCount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CategoryCount200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function categoryCountWithHttpInfo($parent_id = null, $store_id = null, $lang_id = null, $avail = true, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $product_type = null, $find_value = null, $find_where = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['categoryCount'][0])
    {
        $request = $this->categoryCountRequest($parent_id, $store_id, $lang_id, $avail, $created_from, $created_to, $modified_from, $modified_to, $product_type, $find_value, $find_where, $report_request_id, $disable_report_cache, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CategoryCount200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CategoryCount200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CategoryCount200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\CategoryCount200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CategoryCount200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation categoryCountAsync
     *
     * category.count
     *
     * @param  string|null $parent_id Counts categories specified by parent id (optional)
     * @param  string|null $store_id Counts category specified by store id (optional)
     * @param  string|null $lang_id Counts category specified by language id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $product_type A categorization for the product (optional)
     * @param  string|null $find_value Entity search that is specified by some value (optional)
     * @param  string|null $find_where Counts categories that are searched specified by field (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryCountAsync($parent_id = null, $store_id = null, $lang_id = null, $avail = true, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $product_type = null, $find_value = null, $find_where = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['categoryCount'][0])
    {
        return $this->categoryCountAsyncWithHttpInfo($parent_id, $store_id, $lang_id, $avail, $created_from, $created_to, $modified_from, $modified_to, $product_type, $find_value, $find_where, $report_request_id, $disable_report_cache, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation categoryCountAsyncWithHttpInfo
     *
     * category.count
     *
     * @param  string|null $parent_id Counts categories specified by parent id (optional)
     * @param  string|null $store_id Counts category specified by store id (optional)
     * @param  string|null $lang_id Counts category specified by language id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $product_type A categorization for the product (optional)
     * @param  string|null $find_value Entity search that is specified by some value (optional)
     * @param  string|null $find_where Counts categories that are searched specified by field (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryCountAsyncWithHttpInfo($parent_id = null, $store_id = null, $lang_id = null, $avail = true, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $product_type = null, $find_value = null, $find_where = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['categoryCount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CategoryCount200Response';
        $request = $this->categoryCountRequest($parent_id, $store_id, $lang_id, $avail, $created_from, $created_to, $modified_from, $modified_to, $product_type, $find_value, $find_where, $report_request_id, $disable_report_cache, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'categoryCount'
     *
     * @param  string|null $parent_id Counts categories specified by parent id (optional)
     * @param  string|null $store_id Counts category specified by store id (optional)
     * @param  string|null $lang_id Counts category specified by language id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $product_type A categorization for the product (optional)
     * @param  string|null $find_value Entity search that is specified by some value (optional)
     * @param  string|null $find_where Counts categories that are searched specified by field (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function categoryCountRequest($parent_id = null, $store_id = null, $lang_id = null, $avail = true, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $product_type = null, $find_value = null, $find_where = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['categoryCount'][0])
    {















        $resourcePath = '/category.count.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parent_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang_id,
            'lang_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $avail,
            'avail', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_from,
            'created_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_to,
            'created_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_from,
            'modified_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_to,
            'modified_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_type,
            'product_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $find_value,
            'find_value', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $find_where,
            'find_where', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_request_id,
            'report_request_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disable_report_cache,
            'disable_report_cache', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation categoryDelete
     *
     * category.delete
     *
     * @param  string $id Defines category removal, specified by category id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CategoryDelete200Response
     */
    public function categoryDelete($id, $store_id = null, string $contentType = self::contentTypes['categoryDelete'][0])
    {
        list($response) = $this->categoryDeleteWithHttpInfo($id, $store_id, $contentType);
        return $response;
    }

    /**
     * Operation categoryDeleteWithHttpInfo
     *
     * category.delete
     *
     * @param  string $id Defines category removal, specified by category id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CategoryDelete200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function categoryDeleteWithHttpInfo($id, $store_id = null, string $contentType = self::contentTypes['categoryDelete'][0])
    {
        $request = $this->categoryDeleteRequest($id, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CategoryDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CategoryDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CategoryDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\CategoryDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CategoryDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation categoryDeleteAsync
     *
     * category.delete
     *
     * @param  string $id Defines category removal, specified by category id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryDeleteAsync($id, $store_id = null, string $contentType = self::contentTypes['categoryDelete'][0])
    {
        return $this->categoryDeleteAsyncWithHttpInfo($id, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation categoryDeleteAsyncWithHttpInfo
     *
     * category.delete
     *
     * @param  string $id Defines category removal, specified by category id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryDeleteAsyncWithHttpInfo($id, $store_id = null, string $contentType = self::contentTypes['categoryDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CategoryDelete200Response';
        $request = $this->categoryDeleteRequest($id, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'categoryDelete'
     *
     * @param  string $id Defines category removal, specified by category id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function categoryDeleteRequest($id, $store_id = null, string $contentType = self::contentTypes['categoryDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling categoryDelete'
            );
        }



        $resourcePath = '/category.delete.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation categoryFind
     *
     * category.find
     *
     * @param  string $find_value Entity search that is specified by some value (required)
     * @param  string|null $find_where Entity search that is specified by the comma-separated unique fields (optional, default to 'name')
     * @param  string|null $find_params Entity search that is specified by comma-separated parameters (optional, default to 'whole_words')
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryFind'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CategoryFind200Response
     */
    public function categoryFind($find_value, $find_where = 'name', $find_params = 'whole_words', $store_id = null, $lang_id = null, string $contentType = self::contentTypes['categoryFind'][0])
    {
        list($response) = $this->categoryFindWithHttpInfo($find_value, $find_where, $find_params, $store_id, $lang_id, $contentType);
        return $response;
    }

    /**
     * Operation categoryFindWithHttpInfo
     *
     * category.find
     *
     * @param  string $find_value Entity search that is specified by some value (required)
     * @param  string|null $find_where Entity search that is specified by the comma-separated unique fields (optional, default to 'name')
     * @param  string|null $find_params Entity search that is specified by comma-separated parameters (optional, default to 'whole_words')
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryFind'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CategoryFind200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function categoryFindWithHttpInfo($find_value, $find_where = 'name', $find_params = 'whole_words', $store_id = null, $lang_id = null, string $contentType = self::contentTypes['categoryFind'][0])
    {
        $request = $this->categoryFindRequest($find_value, $find_where, $find_params, $store_id, $lang_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CategoryFind200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CategoryFind200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CategoryFind200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\CategoryFind200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CategoryFind200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation categoryFindAsync
     *
     * category.find
     *
     * @param  string $find_value Entity search that is specified by some value (required)
     * @param  string|null $find_where Entity search that is specified by the comma-separated unique fields (optional, default to 'name')
     * @param  string|null $find_params Entity search that is specified by comma-separated parameters (optional, default to 'whole_words')
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryFind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryFindAsync($find_value, $find_where = 'name', $find_params = 'whole_words', $store_id = null, $lang_id = null, string $contentType = self::contentTypes['categoryFind'][0])
    {
        return $this->categoryFindAsyncWithHttpInfo($find_value, $find_where, $find_params, $store_id, $lang_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation categoryFindAsyncWithHttpInfo
     *
     * category.find
     *
     * @param  string $find_value Entity search that is specified by some value (required)
     * @param  string|null $find_where Entity search that is specified by the comma-separated unique fields (optional, default to 'name')
     * @param  string|null $find_params Entity search that is specified by comma-separated parameters (optional, default to 'whole_words')
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryFind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryFindAsyncWithHttpInfo($find_value, $find_where = 'name', $find_params = 'whole_words', $store_id = null, $lang_id = null, string $contentType = self::contentTypes['categoryFind'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CategoryFind200Response';
        $request = $this->categoryFindRequest($find_value, $find_where, $find_params, $store_id, $lang_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'categoryFind'
     *
     * @param  string $find_value Entity search that is specified by some value (required)
     * @param  string|null $find_where Entity search that is specified by the comma-separated unique fields (optional, default to 'name')
     * @param  string|null $find_params Entity search that is specified by comma-separated parameters (optional, default to 'whole_words')
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryFind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function categoryFindRequest($find_value, $find_where = 'name', $find_params = 'whole_words', $store_id = null, $lang_id = null, string $contentType = self::contentTypes['categoryFind'][0])
    {

        // verify the required parameter 'find_value' is set
        if ($find_value === null || (is_array($find_value) && count($find_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $find_value when calling categoryFind'
            );
        }






        $resourcePath = '/category.find.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $find_value,
            'find_value', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $find_where,
            'find_where', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $find_params,
            'find_params', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang_id,
            'lang_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation categoryImageAdd
     *
     * category.image.add
     *
     * @param  string $category_id Defines category id where the image should be added (required)
     * @param  string $image_name Defines image&#39;s name (required)
     * @param  string $url Defines URL of the image that has to be added (required)
     * @param  string $type Defines image&#39;s types that are specified by comma-separated list (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $label Defines alternative text that has to be attached to the picture (optional)
     * @param  string|null $mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)
     * @param  int|null $position Defines image’s position in the list (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryImageAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CategoryImageAdd200Response
     */
    public function categoryImageAdd($category_id, $image_name, $url, $type, $store_id = null, $label = null, $mime = null, $position = 0, string $contentType = self::contentTypes['categoryImageAdd'][0])
    {
        list($response) = $this->categoryImageAddWithHttpInfo($category_id, $image_name, $url, $type, $store_id, $label, $mime, $position, $contentType);
        return $response;
    }

    /**
     * Operation categoryImageAddWithHttpInfo
     *
     * category.image.add
     *
     * @param  string $category_id Defines category id where the image should be added (required)
     * @param  string $image_name Defines image&#39;s name (required)
     * @param  string $url Defines URL of the image that has to be added (required)
     * @param  string $type Defines image&#39;s types that are specified by comma-separated list (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $label Defines alternative text that has to be attached to the picture (optional)
     * @param  string|null $mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)
     * @param  int|null $position Defines image’s position in the list (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryImageAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CategoryImageAdd200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function categoryImageAddWithHttpInfo($category_id, $image_name, $url, $type, $store_id = null, $label = null, $mime = null, $position = 0, string $contentType = self::contentTypes['categoryImageAdd'][0])
    {
        $request = $this->categoryImageAddRequest($category_id, $image_name, $url, $type, $store_id, $label, $mime, $position, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CategoryImageAdd200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CategoryImageAdd200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CategoryImageAdd200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\CategoryImageAdd200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CategoryImageAdd200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation categoryImageAddAsync
     *
     * category.image.add
     *
     * @param  string $category_id Defines category id where the image should be added (required)
     * @param  string $image_name Defines image&#39;s name (required)
     * @param  string $url Defines URL of the image that has to be added (required)
     * @param  string $type Defines image&#39;s types that are specified by comma-separated list (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $label Defines alternative text that has to be attached to the picture (optional)
     * @param  string|null $mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)
     * @param  int|null $position Defines image’s position in the list (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryImageAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryImageAddAsync($category_id, $image_name, $url, $type, $store_id = null, $label = null, $mime = null, $position = 0, string $contentType = self::contentTypes['categoryImageAdd'][0])
    {
        return $this->categoryImageAddAsyncWithHttpInfo($category_id, $image_name, $url, $type, $store_id, $label, $mime, $position, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation categoryImageAddAsyncWithHttpInfo
     *
     * category.image.add
     *
     * @param  string $category_id Defines category id where the image should be added (required)
     * @param  string $image_name Defines image&#39;s name (required)
     * @param  string $url Defines URL of the image that has to be added (required)
     * @param  string $type Defines image&#39;s types that are specified by comma-separated list (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $label Defines alternative text that has to be attached to the picture (optional)
     * @param  string|null $mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)
     * @param  int|null $position Defines image’s position in the list (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryImageAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryImageAddAsyncWithHttpInfo($category_id, $image_name, $url, $type, $store_id = null, $label = null, $mime = null, $position = 0, string $contentType = self::contentTypes['categoryImageAdd'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CategoryImageAdd200Response';
        $request = $this->categoryImageAddRequest($category_id, $image_name, $url, $type, $store_id, $label, $mime, $position, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'categoryImageAdd'
     *
     * @param  string $category_id Defines category id where the image should be added (required)
     * @param  string $image_name Defines image&#39;s name (required)
     * @param  string $url Defines URL of the image that has to be added (required)
     * @param  string $type Defines image&#39;s types that are specified by comma-separated list (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $label Defines alternative text that has to be attached to the picture (optional)
     * @param  string|null $mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)
     * @param  int|null $position Defines image’s position in the list (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryImageAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function categoryImageAddRequest($category_id, $image_name, $url, $type, $store_id = null, $label = null, $mime = null, $position = 0, string $contentType = self::contentTypes['categoryImageAdd'][0])
    {

        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling categoryImageAdd'
            );
        }

        // verify the required parameter 'image_name' is set
        if ($image_name === null || (is_array($image_name) && count($image_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_name when calling categoryImageAdd'
            );
        }

        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling categoryImageAdd'
            );
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling categoryImageAdd'
            );
        }






        $resourcePath = '/category.image.add.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category_id,
            'category_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $image_name,
            'image_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $url,
            'url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $label,
            'label', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mime,
            'mime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $position,
            'position', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation categoryImageDelete
     *
     * category.image.delete
     *
     * @param  string $category_id Defines category id where the image should be deleted (required)
     * @param  string $image_id Define image id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryImageDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AttributeDelete200Response
     */
    public function categoryImageDelete($category_id, $image_id, $store_id = null, string $contentType = self::contentTypes['categoryImageDelete'][0])
    {
        list($response) = $this->categoryImageDeleteWithHttpInfo($category_id, $image_id, $store_id, $contentType);
        return $response;
    }

    /**
     * Operation categoryImageDeleteWithHttpInfo
     *
     * category.image.delete
     *
     * @param  string $category_id Defines category id where the image should be deleted (required)
     * @param  string $image_id Define image id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryImageDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AttributeDelete200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function categoryImageDeleteWithHttpInfo($category_id, $image_id, $store_id = null, string $contentType = self::contentTypes['categoryImageDelete'][0])
    {
        $request = $this->categoryImageDeleteRequest($category_id, $image_id, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AttributeDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AttributeDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AttributeDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AttributeDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AttributeDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation categoryImageDeleteAsync
     *
     * category.image.delete
     *
     * @param  string $category_id Defines category id where the image should be deleted (required)
     * @param  string $image_id Define image id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryImageDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryImageDeleteAsync($category_id, $image_id, $store_id = null, string $contentType = self::contentTypes['categoryImageDelete'][0])
    {
        return $this->categoryImageDeleteAsyncWithHttpInfo($category_id, $image_id, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation categoryImageDeleteAsyncWithHttpInfo
     *
     * category.image.delete
     *
     * @param  string $category_id Defines category id where the image should be deleted (required)
     * @param  string $image_id Define image id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryImageDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryImageDeleteAsyncWithHttpInfo($category_id, $image_id, $store_id = null, string $contentType = self::contentTypes['categoryImageDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AttributeDelete200Response';
        $request = $this->categoryImageDeleteRequest($category_id, $image_id, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'categoryImageDelete'
     *
     * @param  string $category_id Defines category id where the image should be deleted (required)
     * @param  string $image_id Define image id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryImageDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function categoryImageDeleteRequest($category_id, $image_id, $store_id = null, string $contentType = self::contentTypes['categoryImageDelete'][0])
    {

        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling categoryImageDelete'
            );
        }

        // verify the required parameter 'image_id' is set
        if ($image_id === null || (is_array($image_id) && count($image_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_id when calling categoryImageDelete'
            );
        }



        $resourcePath = '/category.image.delete.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category_id,
            'category_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $image_id,
            'image_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation categoryInfo
     *
     * category.info
     *
     * @param  string $id Retrieves category&#39;s info specified by category id (required)
     * @param  string|null $store_id Retrieves category info  specified by store id (optional)
     * @param  string|null $lang_id Retrieves category info  specified by language id (optional)
     * @param  string|null $schema_type The name of the requirements set for the provided schema. (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,parent_id,name,description')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CategoryInfo200Response
     */
    public function categoryInfo($id, $store_id = null, $lang_id = null, $schema_type = null, $response_fields = null, $params = 'id,parent_id,name,description', $exclude = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['categoryInfo'][0])
    {
        list($response) = $this->categoryInfoWithHttpInfo($id, $store_id, $lang_id, $schema_type, $response_fields, $params, $exclude, $report_request_id, $disable_report_cache, $contentType);
        return $response;
    }

    /**
     * Operation categoryInfoWithHttpInfo
     *
     * category.info
     *
     * @param  string $id Retrieves category&#39;s info specified by category id (required)
     * @param  string|null $store_id Retrieves category info  specified by store id (optional)
     * @param  string|null $lang_id Retrieves category info  specified by language id (optional)
     * @param  string|null $schema_type The name of the requirements set for the provided schema. (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,parent_id,name,description')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CategoryInfo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function categoryInfoWithHttpInfo($id, $store_id = null, $lang_id = null, $schema_type = null, $response_fields = null, $params = 'id,parent_id,name,description', $exclude = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['categoryInfo'][0])
    {
        $request = $this->categoryInfoRequest($id, $store_id, $lang_id, $schema_type, $response_fields, $params, $exclude, $report_request_id, $disable_report_cache, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CategoryInfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CategoryInfo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CategoryInfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\CategoryInfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CategoryInfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation categoryInfoAsync
     *
     * category.info
     *
     * @param  string $id Retrieves category&#39;s info specified by category id (required)
     * @param  string|null $store_id Retrieves category info  specified by store id (optional)
     * @param  string|null $lang_id Retrieves category info  specified by language id (optional)
     * @param  string|null $schema_type The name of the requirements set for the provided schema. (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,parent_id,name,description')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryInfoAsync($id, $store_id = null, $lang_id = null, $schema_type = null, $response_fields = null, $params = 'id,parent_id,name,description', $exclude = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['categoryInfo'][0])
    {
        return $this->categoryInfoAsyncWithHttpInfo($id, $store_id, $lang_id, $schema_type, $response_fields, $params, $exclude, $report_request_id, $disable_report_cache, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation categoryInfoAsyncWithHttpInfo
     *
     * category.info
     *
     * @param  string $id Retrieves category&#39;s info specified by category id (required)
     * @param  string|null $store_id Retrieves category info  specified by store id (optional)
     * @param  string|null $lang_id Retrieves category info  specified by language id (optional)
     * @param  string|null $schema_type The name of the requirements set for the provided schema. (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,parent_id,name,description')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryInfoAsyncWithHttpInfo($id, $store_id = null, $lang_id = null, $schema_type = null, $response_fields = null, $params = 'id,parent_id,name,description', $exclude = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['categoryInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CategoryInfo200Response';
        $request = $this->categoryInfoRequest($id, $store_id, $lang_id, $schema_type, $response_fields, $params, $exclude, $report_request_id, $disable_report_cache, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'categoryInfo'
     *
     * @param  string $id Retrieves category&#39;s info specified by category id (required)
     * @param  string|null $store_id Retrieves category info  specified by store id (optional)
     * @param  string|null $lang_id Retrieves category info  specified by language id (optional)
     * @param  string|null $schema_type The name of the requirements set for the provided schema. (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,parent_id,name,description')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function categoryInfoRequest($id, $store_id = null, $lang_id = null, $schema_type = null, $response_fields = null, $params = 'id,parent_id,name,description', $exclude = null, $report_request_id = null, $disable_report_cache = false, string $contentType = self::contentTypes['categoryInfo'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling categoryInfo'
            );
        }










        $resourcePath = '/category.info.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang_id,
            'lang_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $schema_type,
            'schema_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_fields,
            'response_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $params,
            'params', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude,
            'exclude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_request_id,
            'report_request_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disable_report_cache,
            'disable_report_cache', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation categoryList
     *
     * category.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Retrieves categories specified by store id (optional)
     * @param  string|null $lang_id Retrieves categorys specified by language id (optional)
     * @param  string|null $parent_id Retrieves categories specified by parent id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $product_type A categorization for the product (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $find_value Entity search that is specified by some value (optional)
     * @param  string|null $find_where Category search that is specified by field (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,parent_id,name,description')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  bool|null $disable_cache Disable cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelResponseCategoryList
     */
    public function categoryList($start = 0, $count = 10, $page_cursor = null, $store_id = null, $lang_id = null, $parent_id = null, $avail = true, $product_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $find_value = null, $find_where = null, $response_fields = null, $params = 'id,parent_id,name,description', $exclude = null, $report_request_id = null, $disable_report_cache = false, $disable_cache = false, string $contentType = self::contentTypes['categoryList'][0])
    {
        list($response) = $this->categoryListWithHttpInfo($start, $count, $page_cursor, $store_id, $lang_id, $parent_id, $avail, $product_type, $created_from, $created_to, $modified_from, $modified_to, $find_value, $find_where, $response_fields, $params, $exclude, $report_request_id, $disable_report_cache, $disable_cache, $contentType);
        return $response;
    }

    /**
     * Operation categoryListWithHttpInfo
     *
     * category.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Retrieves categories specified by store id (optional)
     * @param  string|null $lang_id Retrieves categorys specified by language id (optional)
     * @param  string|null $parent_id Retrieves categories specified by parent id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $product_type A categorization for the product (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $find_value Entity search that is specified by some value (optional)
     * @param  string|null $find_where Category search that is specified by field (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,parent_id,name,description')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  bool|null $disable_cache Disable cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelResponseCategoryList, HTTP status code, HTTP response headers (array of strings)
     */
    public function categoryListWithHttpInfo($start = 0, $count = 10, $page_cursor = null, $store_id = null, $lang_id = null, $parent_id = null, $avail = true, $product_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $find_value = null, $find_where = null, $response_fields = null, $params = 'id,parent_id,name,description', $exclude = null, $report_request_id = null, $disable_report_cache = false, $disable_cache = false, string $contentType = self::contentTypes['categoryList'][0])
    {
        $request = $this->categoryListRequest($start, $count, $page_cursor, $store_id, $lang_id, $parent_id, $avail, $product_type, $created_from, $created_to, $modified_from, $modified_to, $find_value, $find_where, $response_fields, $params, $exclude, $report_request_id, $disable_report_cache, $disable_cache, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelResponseCategoryList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModelResponseCategoryList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelResponseCategoryList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ModelResponseCategoryList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelResponseCategoryList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation categoryListAsync
     *
     * category.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Retrieves categories specified by store id (optional)
     * @param  string|null $lang_id Retrieves categorys specified by language id (optional)
     * @param  string|null $parent_id Retrieves categories specified by parent id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $product_type A categorization for the product (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $find_value Entity search that is specified by some value (optional)
     * @param  string|null $find_where Category search that is specified by field (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,parent_id,name,description')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  bool|null $disable_cache Disable cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryListAsync($start = 0, $count = 10, $page_cursor = null, $store_id = null, $lang_id = null, $parent_id = null, $avail = true, $product_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $find_value = null, $find_where = null, $response_fields = null, $params = 'id,parent_id,name,description', $exclude = null, $report_request_id = null, $disable_report_cache = false, $disable_cache = false, string $contentType = self::contentTypes['categoryList'][0])
    {
        return $this->categoryListAsyncWithHttpInfo($start, $count, $page_cursor, $store_id, $lang_id, $parent_id, $avail, $product_type, $created_from, $created_to, $modified_from, $modified_to, $find_value, $find_where, $response_fields, $params, $exclude, $report_request_id, $disable_report_cache, $disable_cache, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation categoryListAsyncWithHttpInfo
     *
     * category.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Retrieves categories specified by store id (optional)
     * @param  string|null $lang_id Retrieves categorys specified by language id (optional)
     * @param  string|null $parent_id Retrieves categories specified by parent id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $product_type A categorization for the product (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $find_value Entity search that is specified by some value (optional)
     * @param  string|null $find_where Category search that is specified by field (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,parent_id,name,description')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  bool|null $disable_cache Disable cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryListAsyncWithHttpInfo($start = 0, $count = 10, $page_cursor = null, $store_id = null, $lang_id = null, $parent_id = null, $avail = true, $product_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $find_value = null, $find_where = null, $response_fields = null, $params = 'id,parent_id,name,description', $exclude = null, $report_request_id = null, $disable_report_cache = false, $disable_cache = false, string $contentType = self::contentTypes['categoryList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModelResponseCategoryList';
        $request = $this->categoryListRequest($start, $count, $page_cursor, $store_id, $lang_id, $parent_id, $avail, $product_type, $created_from, $created_to, $modified_from, $modified_to, $find_value, $find_where, $response_fields, $params, $exclude, $report_request_id, $disable_report_cache, $disable_cache, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'categoryList'
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Retrieves categories specified by store id (optional)
     * @param  string|null $lang_id Retrieves categorys specified by language id (optional)
     * @param  string|null $parent_id Retrieves categories specified by parent id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional, default to true)
     * @param  string|null $product_type A categorization for the product (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $find_value Entity search that is specified by some value (optional)
     * @param  string|null $find_where Category search that is specified by field (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,parent_id,name,description')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string|null $report_request_id Report request id (optional)
     * @param  bool|null $disable_report_cache Disable report cache for current request (optional, default to false)
     * @param  bool|null $disable_cache Disable cache for current request (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function categoryListRequest($start = 0, $count = 10, $page_cursor = null, $store_id = null, $lang_id = null, $parent_id = null, $avail = true, $product_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $find_value = null, $find_where = null, $response_fields = null, $params = 'id,parent_id,name,description', $exclude = null, $report_request_id = null, $disable_report_cache = false, $disable_cache = false, string $contentType = self::contentTypes['categoryList'][0])
    {






















        $resourcePath = '/category.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_cursor,
            'page_cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang_id,
            'lang_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parent_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $avail,
            'avail', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_type,
            'product_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_from,
            'created_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_to,
            'created_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_from,
            'modified_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_to,
            'modified_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $find_value,
            'find_value', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $find_where,
            'find_where', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_fields,
            'response_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $params,
            'params', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude,
            'exclude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report_request_id,
            'report_request_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disable_report_cache,
            'disable_report_cache', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disable_cache,
            'disable_cache', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation categoryUnassign
     *
     * category.unassign
     *
     * @param  string $category_id Defines category unassign, specified by category id (required)
     * @param  string $product_id Defines category unassign to the product, specified by product id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryUnassign'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CartConfigUpdate200Response
     */
    public function categoryUnassign($category_id, $product_id, $store_id = null, string $contentType = self::contentTypes['categoryUnassign'][0])
    {
        list($response) = $this->categoryUnassignWithHttpInfo($category_id, $product_id, $store_id, $contentType);
        return $response;
    }

    /**
     * Operation categoryUnassignWithHttpInfo
     *
     * category.unassign
     *
     * @param  string $category_id Defines category unassign, specified by category id (required)
     * @param  string $product_id Defines category unassign to the product, specified by product id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryUnassign'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CartConfigUpdate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function categoryUnassignWithHttpInfo($category_id, $product_id, $store_id = null, string $contentType = self::contentTypes['categoryUnassign'][0])
    {
        $request = $this->categoryUnassignRequest($category_id, $product_id, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CartConfigUpdate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CartConfigUpdate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CartConfigUpdate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\CartConfigUpdate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CartConfigUpdate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation categoryUnassignAsync
     *
     * category.unassign
     *
     * @param  string $category_id Defines category unassign, specified by category id (required)
     * @param  string $product_id Defines category unassign to the product, specified by product id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryUnassign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryUnassignAsync($category_id, $product_id, $store_id = null, string $contentType = self::contentTypes['categoryUnassign'][0])
    {
        return $this->categoryUnassignAsyncWithHttpInfo($category_id, $product_id, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation categoryUnassignAsyncWithHttpInfo
     *
     * category.unassign
     *
     * @param  string $category_id Defines category unassign, specified by category id (required)
     * @param  string $product_id Defines category unassign to the product, specified by product id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryUnassign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryUnassignAsyncWithHttpInfo($category_id, $product_id, $store_id = null, string $contentType = self::contentTypes['categoryUnassign'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CartConfigUpdate200Response';
        $request = $this->categoryUnassignRequest($category_id, $product_id, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'categoryUnassign'
     *
     * @param  string $category_id Defines category unassign, specified by category id (required)
     * @param  string $product_id Defines category unassign to the product, specified by product id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryUnassign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function categoryUnassignRequest($category_id, $product_id, $store_id = null, string $contentType = self::contentTypes['categoryUnassign'][0])
    {

        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling categoryUnassign'
            );
        }

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling categoryUnassign'
            );
        }



        $resourcePath = '/category.unassign.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category_id,
            'category_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id,
            'product_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation categoryUpdate
     *
     * category.update
     *
     * @param  string $id Defines category update specified by category id (required)
     * @param  string|null $name Defines new category’s name (optional)
     * @param  string|null $description Defines new category&#39;s description (optional)
     * @param  string|null $short_description Defines short description (optional)
     * @param  string|null $parent_id Defines new parent category id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional)
     * @param  int|null $sort_order Sort number in the list (optional)
     * @param  string|null $modified_time Entity&#39;s date modification (optional)
     * @param  string|null $meta_title Defines unique meta title for each entity (optional)
     * @param  string|null $meta_description Defines unique meta description of a entity (optional)
     * @param  string|null $meta_keywords Defines unique meta keywords for each entity (optional)
     * @param  string|null $seo_url Defines unique category&#39;s URL for SEO (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $stores_ids Update category in the stores that is specified by comma-separated stores&#39; id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccountConfigUpdate200Response
     */
    public function categoryUpdate($id, $name = null, $description = null, $short_description = null, $parent_id = null, $avail = null, $sort_order = null, $modified_time = null, $meta_title = null, $meta_description = null, $meta_keywords = null, $seo_url = null, $store_id = null, $stores_ids = null, $lang_id = null, string $contentType = self::contentTypes['categoryUpdate'][0])
    {
        list($response) = $this->categoryUpdateWithHttpInfo($id, $name, $description, $short_description, $parent_id, $avail, $sort_order, $modified_time, $meta_title, $meta_description, $meta_keywords, $seo_url, $store_id, $stores_ids, $lang_id, $contentType);
        return $response;
    }

    /**
     * Operation categoryUpdateWithHttpInfo
     *
     * category.update
     *
     * @param  string $id Defines category update specified by category id (required)
     * @param  string|null $name Defines new category’s name (optional)
     * @param  string|null $description Defines new category&#39;s description (optional)
     * @param  string|null $short_description Defines short description (optional)
     * @param  string|null $parent_id Defines new parent category id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional)
     * @param  int|null $sort_order Sort number in the list (optional)
     * @param  string|null $modified_time Entity&#39;s date modification (optional)
     * @param  string|null $meta_title Defines unique meta title for each entity (optional)
     * @param  string|null $meta_description Defines unique meta description of a entity (optional)
     * @param  string|null $meta_keywords Defines unique meta keywords for each entity (optional)
     * @param  string|null $seo_url Defines unique category&#39;s URL for SEO (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $stores_ids Update category in the stores that is specified by comma-separated stores&#39; id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccountConfigUpdate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function categoryUpdateWithHttpInfo($id, $name = null, $description = null, $short_description = null, $parent_id = null, $avail = null, $sort_order = null, $modified_time = null, $meta_title = null, $meta_description = null, $meta_keywords = null, $seo_url = null, $store_id = null, $stores_ids = null, $lang_id = null, string $contentType = self::contentTypes['categoryUpdate'][0])
    {
        $request = $this->categoryUpdateRequest($id, $name, $description, $short_description, $parent_id, $avail, $sort_order, $modified_time, $meta_title, $meta_description, $meta_keywords, $seo_url, $store_id, $stores_ids, $lang_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccountConfigUpdate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccountConfigUpdate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccountConfigUpdate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AccountConfigUpdate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccountConfigUpdate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation categoryUpdateAsync
     *
     * category.update
     *
     * @param  string $id Defines category update specified by category id (required)
     * @param  string|null $name Defines new category’s name (optional)
     * @param  string|null $description Defines new category&#39;s description (optional)
     * @param  string|null $short_description Defines short description (optional)
     * @param  string|null $parent_id Defines new parent category id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional)
     * @param  int|null $sort_order Sort number in the list (optional)
     * @param  string|null $modified_time Entity&#39;s date modification (optional)
     * @param  string|null $meta_title Defines unique meta title for each entity (optional)
     * @param  string|null $meta_description Defines unique meta description of a entity (optional)
     * @param  string|null $meta_keywords Defines unique meta keywords for each entity (optional)
     * @param  string|null $seo_url Defines unique category&#39;s URL for SEO (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $stores_ids Update category in the stores that is specified by comma-separated stores&#39; id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryUpdateAsync($id, $name = null, $description = null, $short_description = null, $parent_id = null, $avail = null, $sort_order = null, $modified_time = null, $meta_title = null, $meta_description = null, $meta_keywords = null, $seo_url = null, $store_id = null, $stores_ids = null, $lang_id = null, string $contentType = self::contentTypes['categoryUpdate'][0])
    {
        return $this->categoryUpdateAsyncWithHttpInfo($id, $name, $description, $short_description, $parent_id, $avail, $sort_order, $modified_time, $meta_title, $meta_description, $meta_keywords, $seo_url, $store_id, $stores_ids, $lang_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation categoryUpdateAsyncWithHttpInfo
     *
     * category.update
     *
     * @param  string $id Defines category update specified by category id (required)
     * @param  string|null $name Defines new category’s name (optional)
     * @param  string|null $description Defines new category&#39;s description (optional)
     * @param  string|null $short_description Defines short description (optional)
     * @param  string|null $parent_id Defines new parent category id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional)
     * @param  int|null $sort_order Sort number in the list (optional)
     * @param  string|null $modified_time Entity&#39;s date modification (optional)
     * @param  string|null $meta_title Defines unique meta title for each entity (optional)
     * @param  string|null $meta_description Defines unique meta description of a entity (optional)
     * @param  string|null $meta_keywords Defines unique meta keywords for each entity (optional)
     * @param  string|null $seo_url Defines unique category&#39;s URL for SEO (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $stores_ids Update category in the stores that is specified by comma-separated stores&#39; id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function categoryUpdateAsyncWithHttpInfo($id, $name = null, $description = null, $short_description = null, $parent_id = null, $avail = null, $sort_order = null, $modified_time = null, $meta_title = null, $meta_description = null, $meta_keywords = null, $seo_url = null, $store_id = null, $stores_ids = null, $lang_id = null, string $contentType = self::contentTypes['categoryUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccountConfigUpdate200Response';
        $request = $this->categoryUpdateRequest($id, $name, $description, $short_description, $parent_id, $avail, $sort_order, $modified_time, $meta_title, $meta_description, $meta_keywords, $seo_url, $store_id, $stores_ids, $lang_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'categoryUpdate'
     *
     * @param  string $id Defines category update specified by category id (required)
     * @param  string|null $name Defines new category’s name (optional)
     * @param  string|null $description Defines new category&#39;s description (optional)
     * @param  string|null $short_description Defines short description (optional)
     * @param  string|null $parent_id Defines new parent category id (optional)
     * @param  bool|null $avail Defines category&#39;s visibility status (optional)
     * @param  int|null $sort_order Sort number in the list (optional)
     * @param  string|null $modified_time Entity&#39;s date modification (optional)
     * @param  string|null $meta_title Defines unique meta title for each entity (optional)
     * @param  string|null $meta_description Defines unique meta description of a entity (optional)
     * @param  string|null $meta_keywords Defines unique meta keywords for each entity (optional)
     * @param  string|null $seo_url Defines unique category&#39;s URL for SEO (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $stores_ids Update category in the stores that is specified by comma-separated stores&#39; id (optional)
     * @param  string|null $lang_id Language id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['categoryUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function categoryUpdateRequest($id, $name = null, $description = null, $short_description = null, $parent_id = null, $avail = null, $sort_order = null, $modified_time = null, $meta_title = null, $meta_description = null, $meta_keywords = null, $seo_url = null, $store_id = null, $stores_ids = null, $lang_id = null, string $contentType = self::contentTypes['categoryUpdate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling categoryUpdate'
            );
        }
















        $resourcePath = '/category.update.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $short_description,
            'short_description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parent_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $avail,
            'avail', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sort_order', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_time,
            'modified_time', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $meta_title,
            'meta_title', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $meta_description,
            'meta_description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $meta_keywords,
            'meta_keywords', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $seo_url,
            'seo_url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stores_ids,
            'stores_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang_id,
            'lang_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
