<?php
/**
 * OrderApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'orderAbandonedList' => [
            'application/json',
        ],
        'orderAdd' => [
            'application/json',
        ],
        'orderCount' => [
            'application/json',
        ],
        'orderFinancialStatusList' => [
            'application/json',
        ],
        'orderFulfillmentStatusList' => [
            'application/json',
        ],
        'orderInfo' => [
            'application/json',
        ],
        'orderList' => [
            'application/json',
        ],
        'orderPreestimateShippingList' => [
            'application/json',
        ],
        'orderRefundAdd' => [
            'application/json',
        ],
        'orderReturnAdd' => [
            'application/json',
        ],
        'orderReturnDelete' => [
            'application/json',
        ],
        'orderReturnUpdate' => [
            'application/json',
        ],
        'orderShipmentAdd' => [
            'application/json',
        ],
        'orderShipmentAddBatch' => [
            'application/json',
        ],
        'orderShipmentDelete' => [
            'application/json',
        ],
        'orderShipmentInfo' => [
            'application/json',
        ],
        'orderShipmentList' => [
            'application/json',
        ],
        'orderShipmentTrackingAdd' => [
            'application/json',
        ],
        'orderShipmentUpdate' => [
            'application/json',
        ],
        'orderStatusList' => [
            'application/json',
        ],
        'orderTransactionList' => [
            'application/json',
        ],
        'orderUpdate' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation orderAbandonedList
     *
     * order.abandoned.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $customer_id Retrieves orders specified by customer id (optional)
     * @param  string|null $customer_email Retrieves orders specified by customer email (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  bool|null $skip_empty_email Filter empty emails (optional, default to false)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'customer,totals,items')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAbandonedList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelResponseOrderAbandonedList
     */
    public function orderAbandonedList($start = 0, $count = 10, $page_cursor = null, $customer_id = null, $customer_email = null, $store_id = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $skip_empty_email = false, $response_fields = null, $params = 'customer,totals,items', $exclude = null, string $contentType = self::contentTypes['orderAbandonedList'][0])
    {
        list($response) = $this->orderAbandonedListWithHttpInfo($start, $count, $page_cursor, $customer_id, $customer_email, $store_id, $created_from, $created_to, $modified_from, $modified_to, $skip_empty_email, $response_fields, $params, $exclude, $contentType);
        return $response;
    }

    /**
     * Operation orderAbandonedListWithHttpInfo
     *
     * order.abandoned.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $customer_id Retrieves orders specified by customer id (optional)
     * @param  string|null $customer_email Retrieves orders specified by customer email (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  bool|null $skip_empty_email Filter empty emails (optional, default to false)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'customer,totals,items')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAbandonedList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelResponseOrderAbandonedList, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderAbandonedListWithHttpInfo($start = 0, $count = 10, $page_cursor = null, $customer_id = null, $customer_email = null, $store_id = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $skip_empty_email = false, $response_fields = null, $params = 'customer,totals,items', $exclude = null, string $contentType = self::contentTypes['orderAbandonedList'][0])
    {
        $request = $this->orderAbandonedListRequest($start, $count, $page_cursor, $customer_id, $customer_email, $store_id, $created_from, $created_to, $modified_from, $modified_to, $skip_empty_email, $response_fields, $params, $exclude, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelResponseOrderAbandonedList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModelResponseOrderAbandonedList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelResponseOrderAbandonedList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ModelResponseOrderAbandonedList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelResponseOrderAbandonedList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderAbandonedListAsync
     *
     * order.abandoned.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $customer_id Retrieves orders specified by customer id (optional)
     * @param  string|null $customer_email Retrieves orders specified by customer email (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  bool|null $skip_empty_email Filter empty emails (optional, default to false)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'customer,totals,items')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAbandonedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderAbandonedListAsync($start = 0, $count = 10, $page_cursor = null, $customer_id = null, $customer_email = null, $store_id = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $skip_empty_email = false, $response_fields = null, $params = 'customer,totals,items', $exclude = null, string $contentType = self::contentTypes['orderAbandonedList'][0])
    {
        return $this->orderAbandonedListAsyncWithHttpInfo($start, $count, $page_cursor, $customer_id, $customer_email, $store_id, $created_from, $created_to, $modified_from, $modified_to, $skip_empty_email, $response_fields, $params, $exclude, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderAbandonedListAsyncWithHttpInfo
     *
     * order.abandoned.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $customer_id Retrieves orders specified by customer id (optional)
     * @param  string|null $customer_email Retrieves orders specified by customer email (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  bool|null $skip_empty_email Filter empty emails (optional, default to false)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'customer,totals,items')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAbandonedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderAbandonedListAsyncWithHttpInfo($start = 0, $count = 10, $page_cursor = null, $customer_id = null, $customer_email = null, $store_id = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $skip_empty_email = false, $response_fields = null, $params = 'customer,totals,items', $exclude = null, string $contentType = self::contentTypes['orderAbandonedList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModelResponseOrderAbandonedList';
        $request = $this->orderAbandonedListRequest($start, $count, $page_cursor, $customer_id, $customer_email, $store_id, $created_from, $created_to, $modified_from, $modified_to, $skip_empty_email, $response_fields, $params, $exclude, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderAbandonedList'
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $customer_id Retrieves orders specified by customer id (optional)
     * @param  string|null $customer_email Retrieves orders specified by customer email (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  bool|null $skip_empty_email Filter empty emails (optional, default to false)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'customer,totals,items')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAbandonedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderAbandonedListRequest($start = 0, $count = 10, $page_cursor = null, $customer_id = null, $customer_email = null, $store_id = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $skip_empty_email = false, $response_fields = null, $params = 'customer,totals,items', $exclude = null, string $contentType = self::contentTypes['orderAbandonedList'][0])
    {
















        $resourcePath = '/order.abandoned.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_cursor,
            'page_cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer_id,
            'customer_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer_email,
            'customer_email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_from,
            'created_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_to,
            'created_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_from,
            'modified_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_to,
            'modified_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip_empty_email,
            'skip_empty_email', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_fields,
            'response_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $params,
            'params', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude,
            'exclude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderAdd
     *
     * order.add
     *
     * @param  \OpenAPI\Client\Model\OrderAdd $order_add order_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderAdd200Response
     */
    public function orderAdd($order_add, string $contentType = self::contentTypes['orderAdd'][0])
    {
        list($response) = $this->orderAddWithHttpInfo($order_add, $contentType);
        return $response;
    }

    /**
     * Operation orderAddWithHttpInfo
     *
     * order.add
     *
     * @param  \OpenAPI\Client\Model\OrderAdd $order_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderAdd200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderAddWithHttpInfo($order_add, string $contentType = self::contentTypes['orderAdd'][0])
    {
        $request = $this->orderAddRequest($order_add, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderAdd200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderAdd200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderAdd200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\OrderAdd200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderAdd200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderAddAsync
     *
     * order.add
     *
     * @param  \OpenAPI\Client\Model\OrderAdd $order_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderAddAsync($order_add, string $contentType = self::contentTypes['orderAdd'][0])
    {
        return $this->orderAddAsyncWithHttpInfo($order_add, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderAddAsyncWithHttpInfo
     *
     * order.add
     *
     * @param  \OpenAPI\Client\Model\OrderAdd $order_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderAddAsyncWithHttpInfo($order_add, string $contentType = self::contentTypes['orderAdd'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderAdd200Response';
        $request = $this->orderAddRequest($order_add, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderAdd'
     *
     * @param  \OpenAPI\Client\Model\OrderAdd $order_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderAddRequest($order_add, string $contentType = self::contentTypes['orderAdd'][0])
    {

        // verify the required parameter 'order_add' is set
        if ($order_add === null || (is_array($order_add) && count($order_add) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_add when calling orderAdd'
            );
        }


        $resourcePath = '/order.add.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_add)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_add));
            } else {
                $httpBody = $order_add;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderCount
     *
     * order.count
     *
     * @param  string|null $order_ids Counts orders specified by order ids (optional)
     * @param  string|null $ids Counts orders specified by ids (optional)
     * @param  string|null $customer_id Counts orders quantity specified by customer id (optional)
     * @param  string|null $store_id Counts orders quantity specified by store id (optional)
     * @param  string|null $customer_email Counts orders quantity specified by customer email (optional)
     * @param  string|null $order_status Counts orders quantity specified by order status (optional)
     * @param  string[]|null $order_status_ids Retrieves orders specified by order statuses (optional)
     * @param  string|null $ebay_order_status Counts orders quantity specified by order status (optional)
     * @param  string|null $financial_status Counts orders quantity specified by financial status (optional)
     * @param  string[]|null $financial_status_ids Retrieves orders count specified by financial status ids (optional)
     * @param  string|null $fulfillment_channel Retrieves order with a fulfillment channel (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $shipping_method Retrieve entities according to shipping method (optional)
     * @param  string|null $delivery_method Retrieves order with delivery method (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string|null $ship_node_type Retrieves order with ship node type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderCount200Response
     */
    public function orderCount($order_ids = null, $ids = null, $customer_id = null, $store_id = null, $customer_email = null, $order_status = null, $order_status_ids = null, $ebay_order_status = null, $financial_status = null, $financial_status_ids = null, $fulfillment_channel = null, $fulfillment_status = null, $shipping_method = null, $delivery_method = null, $tags = null, $ship_node_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, string $contentType = self::contentTypes['orderCount'][0])
    {
        list($response) = $this->orderCountWithHttpInfo($order_ids, $ids, $customer_id, $store_id, $customer_email, $order_status, $order_status_ids, $ebay_order_status, $financial_status, $financial_status_ids, $fulfillment_channel, $fulfillment_status, $shipping_method, $delivery_method, $tags, $ship_node_type, $created_from, $created_to, $modified_from, $modified_to, $contentType);
        return $response;
    }

    /**
     * Operation orderCountWithHttpInfo
     *
     * order.count
     *
     * @param  string|null $order_ids Counts orders specified by order ids (optional)
     * @param  string|null $ids Counts orders specified by ids (optional)
     * @param  string|null $customer_id Counts orders quantity specified by customer id (optional)
     * @param  string|null $store_id Counts orders quantity specified by store id (optional)
     * @param  string|null $customer_email Counts orders quantity specified by customer email (optional)
     * @param  string|null $order_status Counts orders quantity specified by order status (optional)
     * @param  string[]|null $order_status_ids Retrieves orders specified by order statuses (optional)
     * @param  string|null $ebay_order_status Counts orders quantity specified by order status (optional)
     * @param  string|null $financial_status Counts orders quantity specified by financial status (optional)
     * @param  string[]|null $financial_status_ids Retrieves orders count specified by financial status ids (optional)
     * @param  string|null $fulfillment_channel Retrieves order with a fulfillment channel (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $shipping_method Retrieve entities according to shipping method (optional)
     * @param  string|null $delivery_method Retrieves order with delivery method (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string|null $ship_node_type Retrieves order with ship node type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderCount200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderCountWithHttpInfo($order_ids = null, $ids = null, $customer_id = null, $store_id = null, $customer_email = null, $order_status = null, $order_status_ids = null, $ebay_order_status = null, $financial_status = null, $financial_status_ids = null, $fulfillment_channel = null, $fulfillment_status = null, $shipping_method = null, $delivery_method = null, $tags = null, $ship_node_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, string $contentType = self::contentTypes['orderCount'][0])
    {
        $request = $this->orderCountRequest($order_ids, $ids, $customer_id, $store_id, $customer_email, $order_status, $order_status_ids, $ebay_order_status, $financial_status, $financial_status_ids, $fulfillment_channel, $fulfillment_status, $shipping_method, $delivery_method, $tags, $ship_node_type, $created_from, $created_to, $modified_from, $modified_to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderCount200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderCount200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderCount200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\OrderCount200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderCount200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderCountAsync
     *
     * order.count
     *
     * @param  string|null $order_ids Counts orders specified by order ids (optional)
     * @param  string|null $ids Counts orders specified by ids (optional)
     * @param  string|null $customer_id Counts orders quantity specified by customer id (optional)
     * @param  string|null $store_id Counts orders quantity specified by store id (optional)
     * @param  string|null $customer_email Counts orders quantity specified by customer email (optional)
     * @param  string|null $order_status Counts orders quantity specified by order status (optional)
     * @param  string[]|null $order_status_ids Retrieves orders specified by order statuses (optional)
     * @param  string|null $ebay_order_status Counts orders quantity specified by order status (optional)
     * @param  string|null $financial_status Counts orders quantity specified by financial status (optional)
     * @param  string[]|null $financial_status_ids Retrieves orders count specified by financial status ids (optional)
     * @param  string|null $fulfillment_channel Retrieves order with a fulfillment channel (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $shipping_method Retrieve entities according to shipping method (optional)
     * @param  string|null $delivery_method Retrieves order with delivery method (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string|null $ship_node_type Retrieves order with ship node type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCountAsync($order_ids = null, $ids = null, $customer_id = null, $store_id = null, $customer_email = null, $order_status = null, $order_status_ids = null, $ebay_order_status = null, $financial_status = null, $financial_status_ids = null, $fulfillment_channel = null, $fulfillment_status = null, $shipping_method = null, $delivery_method = null, $tags = null, $ship_node_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, string $contentType = self::contentTypes['orderCount'][0])
    {
        return $this->orderCountAsyncWithHttpInfo($order_ids, $ids, $customer_id, $store_id, $customer_email, $order_status, $order_status_ids, $ebay_order_status, $financial_status, $financial_status_ids, $fulfillment_channel, $fulfillment_status, $shipping_method, $delivery_method, $tags, $ship_node_type, $created_from, $created_to, $modified_from, $modified_to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderCountAsyncWithHttpInfo
     *
     * order.count
     *
     * @param  string|null $order_ids Counts orders specified by order ids (optional)
     * @param  string|null $ids Counts orders specified by ids (optional)
     * @param  string|null $customer_id Counts orders quantity specified by customer id (optional)
     * @param  string|null $store_id Counts orders quantity specified by store id (optional)
     * @param  string|null $customer_email Counts orders quantity specified by customer email (optional)
     * @param  string|null $order_status Counts orders quantity specified by order status (optional)
     * @param  string[]|null $order_status_ids Retrieves orders specified by order statuses (optional)
     * @param  string|null $ebay_order_status Counts orders quantity specified by order status (optional)
     * @param  string|null $financial_status Counts orders quantity specified by financial status (optional)
     * @param  string[]|null $financial_status_ids Retrieves orders count specified by financial status ids (optional)
     * @param  string|null $fulfillment_channel Retrieves order with a fulfillment channel (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $shipping_method Retrieve entities according to shipping method (optional)
     * @param  string|null $delivery_method Retrieves order with delivery method (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string|null $ship_node_type Retrieves order with ship node type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCountAsyncWithHttpInfo($order_ids = null, $ids = null, $customer_id = null, $store_id = null, $customer_email = null, $order_status = null, $order_status_ids = null, $ebay_order_status = null, $financial_status = null, $financial_status_ids = null, $fulfillment_channel = null, $fulfillment_status = null, $shipping_method = null, $delivery_method = null, $tags = null, $ship_node_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, string $contentType = self::contentTypes['orderCount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderCount200Response';
        $request = $this->orderCountRequest($order_ids, $ids, $customer_id, $store_id, $customer_email, $order_status, $order_status_ids, $ebay_order_status, $financial_status, $financial_status_ids, $fulfillment_channel, $fulfillment_status, $shipping_method, $delivery_method, $tags, $ship_node_type, $created_from, $created_to, $modified_from, $modified_to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderCount'
     *
     * @param  string|null $order_ids Counts orders specified by order ids (optional)
     * @param  string|null $ids Counts orders specified by ids (optional)
     * @param  string|null $customer_id Counts orders quantity specified by customer id (optional)
     * @param  string|null $store_id Counts orders quantity specified by store id (optional)
     * @param  string|null $customer_email Counts orders quantity specified by customer email (optional)
     * @param  string|null $order_status Counts orders quantity specified by order status (optional)
     * @param  string[]|null $order_status_ids Retrieves orders specified by order statuses (optional)
     * @param  string|null $ebay_order_status Counts orders quantity specified by order status (optional)
     * @param  string|null $financial_status Counts orders quantity specified by financial status (optional)
     * @param  string[]|null $financial_status_ids Retrieves orders count specified by financial status ids (optional)
     * @param  string|null $fulfillment_channel Retrieves order with a fulfillment channel (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $shipping_method Retrieve entities according to shipping method (optional)
     * @param  string|null $delivery_method Retrieves order with delivery method (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string|null $ship_node_type Retrieves order with ship node type (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderCountRequest($order_ids = null, $ids = null, $customer_id = null, $store_id = null, $customer_email = null, $order_status = null, $order_status_ids = null, $ebay_order_status = null, $financial_status = null, $financial_status_ids = null, $fulfillment_channel = null, $fulfillment_status = null, $shipping_method = null, $delivery_method = null, $tags = null, $ship_node_type = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, string $contentType = self::contentTypes['orderCount'][0])
    {






















        $resourcePath = '/order.count.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_ids,
            'order_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer_id,
            'customer_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer_email,
            'customer_email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_status,
            'order_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_status_ids,
            'order_status_ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ebay_order_status,
            'ebay_order_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $financial_status,
            'financial_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $financial_status_ids,
            'financial_status_ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillment_channel,
            'fulfillment_channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillment_status,
            'fulfillment_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipping_method,
            'shipping_method', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_method,
            'delivery_method', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ship_node_type,
            'ship_node_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_from,
            'created_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_to,
            'created_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_from,
            'modified_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_to,
            'modified_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderFinancialStatusList
     *
     * order.financial_status.list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderFinancialStatusList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderFinancialStatusList200Response
     */
    public function orderFinancialStatusList(string $contentType = self::contentTypes['orderFinancialStatusList'][0])
    {
        list($response) = $this->orderFinancialStatusListWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation orderFinancialStatusListWithHttpInfo
     *
     * order.financial_status.list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderFinancialStatusList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderFinancialStatusList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderFinancialStatusListWithHttpInfo(string $contentType = self::contentTypes['orderFinancialStatusList'][0])
    {
        $request = $this->orderFinancialStatusListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderFinancialStatusList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderFinancialStatusList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderFinancialStatusList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\OrderFinancialStatusList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderFinancialStatusList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderFinancialStatusListAsync
     *
     * order.financial_status.list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderFinancialStatusList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderFinancialStatusListAsync(string $contentType = self::contentTypes['orderFinancialStatusList'][0])
    {
        return $this->orderFinancialStatusListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderFinancialStatusListAsyncWithHttpInfo
     *
     * order.financial_status.list
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderFinancialStatusList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderFinancialStatusListAsyncWithHttpInfo(string $contentType = self::contentTypes['orderFinancialStatusList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderFinancialStatusList200Response';
        $request = $this->orderFinancialStatusListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderFinancialStatusList'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderFinancialStatusList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderFinancialStatusListRequest(string $contentType = self::contentTypes['orderFinancialStatusList'][0])
    {


        $resourcePath = '/order.financial_status.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderFulfillmentStatusList
     *
     * order.fulfillment_status.list
     *
     * @param  string|null $action Available statuses for the specified action. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderFulfillmentStatusList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderFulfillmentStatusList200Response
     */
    public function orderFulfillmentStatusList($action = null, string $contentType = self::contentTypes['orderFulfillmentStatusList'][0])
    {
        list($response) = $this->orderFulfillmentStatusListWithHttpInfo($action, $contentType);
        return $response;
    }

    /**
     * Operation orderFulfillmentStatusListWithHttpInfo
     *
     * order.fulfillment_status.list
     *
     * @param  string|null $action Available statuses for the specified action. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderFulfillmentStatusList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderFulfillmentStatusList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderFulfillmentStatusListWithHttpInfo($action = null, string $contentType = self::contentTypes['orderFulfillmentStatusList'][0])
    {
        $request = $this->orderFulfillmentStatusListRequest($action, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderFulfillmentStatusList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderFulfillmentStatusList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderFulfillmentStatusList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\OrderFulfillmentStatusList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderFulfillmentStatusList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderFulfillmentStatusListAsync
     *
     * order.fulfillment_status.list
     *
     * @param  string|null $action Available statuses for the specified action. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderFulfillmentStatusList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderFulfillmentStatusListAsync($action = null, string $contentType = self::contentTypes['orderFulfillmentStatusList'][0])
    {
        return $this->orderFulfillmentStatusListAsyncWithHttpInfo($action, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderFulfillmentStatusListAsyncWithHttpInfo
     *
     * order.fulfillment_status.list
     *
     * @param  string|null $action Available statuses for the specified action. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderFulfillmentStatusList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderFulfillmentStatusListAsyncWithHttpInfo($action = null, string $contentType = self::contentTypes['orderFulfillmentStatusList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderFulfillmentStatusList200Response';
        $request = $this->orderFulfillmentStatusListRequest($action, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderFulfillmentStatusList'
     *
     * @param  string|null $action Available statuses for the specified action. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderFulfillmentStatusList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderFulfillmentStatusListRequest($action = null, string $contentType = self::contentTypes['orderFulfillmentStatusList'][0])
    {



        $resourcePath = '/order.fulfillment_status.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $action,
            'action', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderInfo
     *
     * order.info
     *
     * @param  string|null $id Retrieves order info specified by id (optional)
     * @param  string|null $order_id Retrieves order’s info specified by order id (optional)
     * @param  string|null $store_id Defines store id where the order should be found (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'order_id,customer,totals,address,items,bundles,status')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  bool|null $enable_cache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)
     * @param  bool|null $use_latest_api_version Use the latest platform API version (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderInfo200Response
     */
    public function orderInfo($id = null, $order_id = null, $store_id = null, $params = 'order_id,customer,totals,address,items,bundles,status', $response_fields = null, $exclude = null, $enable_cache = false, $use_latest_api_version = false, string $contentType = self::contentTypes['orderInfo'][0])
    {
        list($response) = $this->orderInfoWithHttpInfo($id, $order_id, $store_id, $params, $response_fields, $exclude, $enable_cache, $use_latest_api_version, $contentType);
        return $response;
    }

    /**
     * Operation orderInfoWithHttpInfo
     *
     * order.info
     *
     * @param  string|null $id Retrieves order info specified by id (optional)
     * @param  string|null $order_id Retrieves order’s info specified by order id (optional)
     * @param  string|null $store_id Defines store id where the order should be found (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'order_id,customer,totals,address,items,bundles,status')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  bool|null $enable_cache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)
     * @param  bool|null $use_latest_api_version Use the latest platform API version (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderInfo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderInfoWithHttpInfo($id = null, $order_id = null, $store_id = null, $params = 'order_id,customer,totals,address,items,bundles,status', $response_fields = null, $exclude = null, $enable_cache = false, $use_latest_api_version = false, string $contentType = self::contentTypes['orderInfo'][0])
    {
        $request = $this->orderInfoRequest($id, $order_id, $store_id, $params, $response_fields, $exclude, $enable_cache, $use_latest_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderInfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderInfo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderInfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\OrderInfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderInfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderInfoAsync
     *
     * order.info
     *
     * @param  string|null $id Retrieves order info specified by id (optional)
     * @param  string|null $order_id Retrieves order’s info specified by order id (optional)
     * @param  string|null $store_id Defines store id where the order should be found (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'order_id,customer,totals,address,items,bundles,status')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  bool|null $enable_cache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)
     * @param  bool|null $use_latest_api_version Use the latest platform API version (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderInfoAsync($id = null, $order_id = null, $store_id = null, $params = 'order_id,customer,totals,address,items,bundles,status', $response_fields = null, $exclude = null, $enable_cache = false, $use_latest_api_version = false, string $contentType = self::contentTypes['orderInfo'][0])
    {
        return $this->orderInfoAsyncWithHttpInfo($id, $order_id, $store_id, $params, $response_fields, $exclude, $enable_cache, $use_latest_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderInfoAsyncWithHttpInfo
     *
     * order.info
     *
     * @param  string|null $id Retrieves order info specified by id (optional)
     * @param  string|null $order_id Retrieves order’s info specified by order id (optional)
     * @param  string|null $store_id Defines store id where the order should be found (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'order_id,customer,totals,address,items,bundles,status')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  bool|null $enable_cache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)
     * @param  bool|null $use_latest_api_version Use the latest platform API version (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderInfoAsyncWithHttpInfo($id = null, $order_id = null, $store_id = null, $params = 'order_id,customer,totals,address,items,bundles,status', $response_fields = null, $exclude = null, $enable_cache = false, $use_latest_api_version = false, string $contentType = self::contentTypes['orderInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderInfo200Response';
        $request = $this->orderInfoRequest($id, $order_id, $store_id, $params, $response_fields, $exclude, $enable_cache, $use_latest_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderInfo'
     *
     * @param  string|null $id Retrieves order info specified by id (optional)
     * @param  string|null $order_id Retrieves order’s info specified by order id (optional)
     * @param  string|null $store_id Defines store id where the order should be found (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'order_id,customer,totals,address,items,bundles,status')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  bool|null $enable_cache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)
     * @param  bool|null $use_latest_api_version Use the latest platform API version (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderInfoRequest($id = null, $order_id = null, $store_id = null, $params = 'order_id,customer,totals,address,items,bundles,status', $response_fields = null, $exclude = null, $enable_cache = false, $use_latest_api_version = false, string $contentType = self::contentTypes['orderInfo'][0])
    {










        $resourcePath = '/order.info.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'order_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $params,
            'params', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_fields,
            'response_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude,
            'exclude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_cache,
            'enable_cache', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $use_latest_api_version,
            'use_latest_api_version', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderList
     *
     * order.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $ids Retrieves orders specified by ids (optional)
     * @param  string|null $order_ids Retrieves orders specified by order ids (optional)
     * @param  string|null $since_id Retrieve entities starting from the specified id. (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $customer_id Retrieves orders specified by customer id (optional)
     * @param  string|null $customer_email Retrieves orders specified by customer email (optional)
     * @param  string|null $basket_id Retrieves order’s info specified by basket id. (optional)
     * @param  string|null $currency_id Currency Id (optional)
     * @param  string|null $phone Filter orders by customer&#39;s phone number (optional)
     * @param  string|null $order_status Retrieves orders specified by order status (optional)
     * @param  string[]|null $order_status_ids Retrieves orders specified by order statuses (optional)
     * @param  string|null $ebay_order_status Retrieves orders specified by order status (optional)
     * @param  string|null $financial_status Retrieves orders specified by financial status (optional)
     * @param  string[]|null $financial_status_ids Retrieves orders specified by financial status ids (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $return_status Retrieves orders specified by return status (optional)
     * @param  string|null $fulfillment_channel Retrieves order with a fulfillment channel (optional)
     * @param  string|null $shipping_method Retrieve entities according to shipping method (optional)
     * @param  string|null $skip_order_ids Skipped orders by ids (optional)
     * @param  bool|null $is_deleted Filter deleted orders (optional)
     * @param  string|null $shipping_country_iso3 Retrieve entities according to shipping country (optional)
     * @param  string|null $delivery_method Retrieves order with delivery method (optional)
     * @param  string|null $ship_node_type Retrieves order with ship node type (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string|null $sort_by Set field to sort by (optional, default to 'order_id')
     * @param  string|null $sort_direction Set sorting direction (optional, default to 'asc')
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'order_id,customer,totals,address,items,bundles,status')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  bool|null $enable_cache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)
     * @param  bool|null $use_latest_api_version Use the latest platform API version (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelResponseOrderList
     */
    public function orderList($start = 0, $count = 10, $page_cursor = null, $ids = null, $order_ids = null, $since_id = null, $store_id = null, $customer_id = null, $customer_email = null, $basket_id = null, $currency_id = null, $phone = null, $order_status = null, $order_status_ids = null, $ebay_order_status = null, $financial_status = null, $financial_status_ids = null, $fulfillment_status = null, $return_status = null, $fulfillment_channel = null, $shipping_method = null, $skip_order_ids = null, $is_deleted = null, $shipping_country_iso3 = null, $delivery_method = null, $ship_node_type = null, $created_to = null, $created_from = null, $modified_to = null, $modified_from = null, $tags = null, $sort_by = 'order_id', $sort_direction = 'asc', $params = 'order_id,customer,totals,address,items,bundles,status', $response_fields = null, $exclude = null, $enable_cache = false, $use_latest_api_version = false, string $contentType = self::contentTypes['orderList'][0])
    {
        list($response) = $this->orderListWithHttpInfo($start, $count, $page_cursor, $ids, $order_ids, $since_id, $store_id, $customer_id, $customer_email, $basket_id, $currency_id, $phone, $order_status, $order_status_ids, $ebay_order_status, $financial_status, $financial_status_ids, $fulfillment_status, $return_status, $fulfillment_channel, $shipping_method, $skip_order_ids, $is_deleted, $shipping_country_iso3, $delivery_method, $ship_node_type, $created_to, $created_from, $modified_to, $modified_from, $tags, $sort_by, $sort_direction, $params, $response_fields, $exclude, $enable_cache, $use_latest_api_version, $contentType);
        return $response;
    }

    /**
     * Operation orderListWithHttpInfo
     *
     * order.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $ids Retrieves orders specified by ids (optional)
     * @param  string|null $order_ids Retrieves orders specified by order ids (optional)
     * @param  string|null $since_id Retrieve entities starting from the specified id. (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $customer_id Retrieves orders specified by customer id (optional)
     * @param  string|null $customer_email Retrieves orders specified by customer email (optional)
     * @param  string|null $basket_id Retrieves order’s info specified by basket id. (optional)
     * @param  string|null $currency_id Currency Id (optional)
     * @param  string|null $phone Filter orders by customer&#39;s phone number (optional)
     * @param  string|null $order_status Retrieves orders specified by order status (optional)
     * @param  string[]|null $order_status_ids Retrieves orders specified by order statuses (optional)
     * @param  string|null $ebay_order_status Retrieves orders specified by order status (optional)
     * @param  string|null $financial_status Retrieves orders specified by financial status (optional)
     * @param  string[]|null $financial_status_ids Retrieves orders specified by financial status ids (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $return_status Retrieves orders specified by return status (optional)
     * @param  string|null $fulfillment_channel Retrieves order with a fulfillment channel (optional)
     * @param  string|null $shipping_method Retrieve entities according to shipping method (optional)
     * @param  string|null $skip_order_ids Skipped orders by ids (optional)
     * @param  bool|null $is_deleted Filter deleted orders (optional)
     * @param  string|null $shipping_country_iso3 Retrieve entities according to shipping country (optional)
     * @param  string|null $delivery_method Retrieves order with delivery method (optional)
     * @param  string|null $ship_node_type Retrieves order with ship node type (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string|null $sort_by Set field to sort by (optional, default to 'order_id')
     * @param  string|null $sort_direction Set sorting direction (optional, default to 'asc')
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'order_id,customer,totals,address,items,bundles,status')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  bool|null $enable_cache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)
     * @param  bool|null $use_latest_api_version Use the latest platform API version (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelResponseOrderList, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderListWithHttpInfo($start = 0, $count = 10, $page_cursor = null, $ids = null, $order_ids = null, $since_id = null, $store_id = null, $customer_id = null, $customer_email = null, $basket_id = null, $currency_id = null, $phone = null, $order_status = null, $order_status_ids = null, $ebay_order_status = null, $financial_status = null, $financial_status_ids = null, $fulfillment_status = null, $return_status = null, $fulfillment_channel = null, $shipping_method = null, $skip_order_ids = null, $is_deleted = null, $shipping_country_iso3 = null, $delivery_method = null, $ship_node_type = null, $created_to = null, $created_from = null, $modified_to = null, $modified_from = null, $tags = null, $sort_by = 'order_id', $sort_direction = 'asc', $params = 'order_id,customer,totals,address,items,bundles,status', $response_fields = null, $exclude = null, $enable_cache = false, $use_latest_api_version = false, string $contentType = self::contentTypes['orderList'][0])
    {
        $request = $this->orderListRequest($start, $count, $page_cursor, $ids, $order_ids, $since_id, $store_id, $customer_id, $customer_email, $basket_id, $currency_id, $phone, $order_status, $order_status_ids, $ebay_order_status, $financial_status, $financial_status_ids, $fulfillment_status, $return_status, $fulfillment_channel, $shipping_method, $skip_order_ids, $is_deleted, $shipping_country_iso3, $delivery_method, $ship_node_type, $created_to, $created_from, $modified_to, $modified_from, $tags, $sort_by, $sort_direction, $params, $response_fields, $exclude, $enable_cache, $use_latest_api_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelResponseOrderList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModelResponseOrderList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelResponseOrderList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ModelResponseOrderList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelResponseOrderList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderListAsync
     *
     * order.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $ids Retrieves orders specified by ids (optional)
     * @param  string|null $order_ids Retrieves orders specified by order ids (optional)
     * @param  string|null $since_id Retrieve entities starting from the specified id. (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $customer_id Retrieves orders specified by customer id (optional)
     * @param  string|null $customer_email Retrieves orders specified by customer email (optional)
     * @param  string|null $basket_id Retrieves order’s info specified by basket id. (optional)
     * @param  string|null $currency_id Currency Id (optional)
     * @param  string|null $phone Filter orders by customer&#39;s phone number (optional)
     * @param  string|null $order_status Retrieves orders specified by order status (optional)
     * @param  string[]|null $order_status_ids Retrieves orders specified by order statuses (optional)
     * @param  string|null $ebay_order_status Retrieves orders specified by order status (optional)
     * @param  string|null $financial_status Retrieves orders specified by financial status (optional)
     * @param  string[]|null $financial_status_ids Retrieves orders specified by financial status ids (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $return_status Retrieves orders specified by return status (optional)
     * @param  string|null $fulfillment_channel Retrieves order with a fulfillment channel (optional)
     * @param  string|null $shipping_method Retrieve entities according to shipping method (optional)
     * @param  string|null $skip_order_ids Skipped orders by ids (optional)
     * @param  bool|null $is_deleted Filter deleted orders (optional)
     * @param  string|null $shipping_country_iso3 Retrieve entities according to shipping country (optional)
     * @param  string|null $delivery_method Retrieves order with delivery method (optional)
     * @param  string|null $ship_node_type Retrieves order with ship node type (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string|null $sort_by Set field to sort by (optional, default to 'order_id')
     * @param  string|null $sort_direction Set sorting direction (optional, default to 'asc')
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'order_id,customer,totals,address,items,bundles,status')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  bool|null $enable_cache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)
     * @param  bool|null $use_latest_api_version Use the latest platform API version (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderListAsync($start = 0, $count = 10, $page_cursor = null, $ids = null, $order_ids = null, $since_id = null, $store_id = null, $customer_id = null, $customer_email = null, $basket_id = null, $currency_id = null, $phone = null, $order_status = null, $order_status_ids = null, $ebay_order_status = null, $financial_status = null, $financial_status_ids = null, $fulfillment_status = null, $return_status = null, $fulfillment_channel = null, $shipping_method = null, $skip_order_ids = null, $is_deleted = null, $shipping_country_iso3 = null, $delivery_method = null, $ship_node_type = null, $created_to = null, $created_from = null, $modified_to = null, $modified_from = null, $tags = null, $sort_by = 'order_id', $sort_direction = 'asc', $params = 'order_id,customer,totals,address,items,bundles,status', $response_fields = null, $exclude = null, $enable_cache = false, $use_latest_api_version = false, string $contentType = self::contentTypes['orderList'][0])
    {
        return $this->orderListAsyncWithHttpInfo($start, $count, $page_cursor, $ids, $order_ids, $since_id, $store_id, $customer_id, $customer_email, $basket_id, $currency_id, $phone, $order_status, $order_status_ids, $ebay_order_status, $financial_status, $financial_status_ids, $fulfillment_status, $return_status, $fulfillment_channel, $shipping_method, $skip_order_ids, $is_deleted, $shipping_country_iso3, $delivery_method, $ship_node_type, $created_to, $created_from, $modified_to, $modified_from, $tags, $sort_by, $sort_direction, $params, $response_fields, $exclude, $enable_cache, $use_latest_api_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderListAsyncWithHttpInfo
     *
     * order.list
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $ids Retrieves orders specified by ids (optional)
     * @param  string|null $order_ids Retrieves orders specified by order ids (optional)
     * @param  string|null $since_id Retrieve entities starting from the specified id. (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $customer_id Retrieves orders specified by customer id (optional)
     * @param  string|null $customer_email Retrieves orders specified by customer email (optional)
     * @param  string|null $basket_id Retrieves order’s info specified by basket id. (optional)
     * @param  string|null $currency_id Currency Id (optional)
     * @param  string|null $phone Filter orders by customer&#39;s phone number (optional)
     * @param  string|null $order_status Retrieves orders specified by order status (optional)
     * @param  string[]|null $order_status_ids Retrieves orders specified by order statuses (optional)
     * @param  string|null $ebay_order_status Retrieves orders specified by order status (optional)
     * @param  string|null $financial_status Retrieves orders specified by financial status (optional)
     * @param  string[]|null $financial_status_ids Retrieves orders specified by financial status ids (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $return_status Retrieves orders specified by return status (optional)
     * @param  string|null $fulfillment_channel Retrieves order with a fulfillment channel (optional)
     * @param  string|null $shipping_method Retrieve entities according to shipping method (optional)
     * @param  string|null $skip_order_ids Skipped orders by ids (optional)
     * @param  bool|null $is_deleted Filter deleted orders (optional)
     * @param  string|null $shipping_country_iso3 Retrieve entities according to shipping country (optional)
     * @param  string|null $delivery_method Retrieves order with delivery method (optional)
     * @param  string|null $ship_node_type Retrieves order with ship node type (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string|null $sort_by Set field to sort by (optional, default to 'order_id')
     * @param  string|null $sort_direction Set sorting direction (optional, default to 'asc')
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'order_id,customer,totals,address,items,bundles,status')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  bool|null $enable_cache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)
     * @param  bool|null $use_latest_api_version Use the latest platform API version (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderListAsyncWithHttpInfo($start = 0, $count = 10, $page_cursor = null, $ids = null, $order_ids = null, $since_id = null, $store_id = null, $customer_id = null, $customer_email = null, $basket_id = null, $currency_id = null, $phone = null, $order_status = null, $order_status_ids = null, $ebay_order_status = null, $financial_status = null, $financial_status_ids = null, $fulfillment_status = null, $return_status = null, $fulfillment_channel = null, $shipping_method = null, $skip_order_ids = null, $is_deleted = null, $shipping_country_iso3 = null, $delivery_method = null, $ship_node_type = null, $created_to = null, $created_from = null, $modified_to = null, $modified_from = null, $tags = null, $sort_by = 'order_id', $sort_direction = 'asc', $params = 'order_id,customer,totals,address,items,bundles,status', $response_fields = null, $exclude = null, $enable_cache = false, $use_latest_api_version = false, string $contentType = self::contentTypes['orderList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModelResponseOrderList';
        $request = $this->orderListRequest($start, $count, $page_cursor, $ids, $order_ids, $since_id, $store_id, $customer_id, $customer_email, $basket_id, $currency_id, $phone, $order_status, $order_status_ids, $ebay_order_status, $financial_status, $financial_status_ids, $fulfillment_status, $return_status, $fulfillment_channel, $shipping_method, $skip_order_ids, $is_deleted, $shipping_country_iso3, $delivery_method, $ship_node_type, $created_to, $created_from, $modified_to, $modified_from, $tags, $sort_by, $sort_direction, $params, $response_fields, $exclude, $enable_cache, $use_latest_api_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderList'
     *
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $ids Retrieves orders specified by ids (optional)
     * @param  string|null $order_ids Retrieves orders specified by order ids (optional)
     * @param  string|null $since_id Retrieve entities starting from the specified id. (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $customer_id Retrieves orders specified by customer id (optional)
     * @param  string|null $customer_email Retrieves orders specified by customer email (optional)
     * @param  string|null $basket_id Retrieves order’s info specified by basket id. (optional)
     * @param  string|null $currency_id Currency Id (optional)
     * @param  string|null $phone Filter orders by customer&#39;s phone number (optional)
     * @param  string|null $order_status Retrieves orders specified by order status (optional)
     * @param  string[]|null $order_status_ids Retrieves orders specified by order statuses (optional)
     * @param  string|null $ebay_order_status Retrieves orders specified by order status (optional)
     * @param  string|null $financial_status Retrieves orders specified by financial status (optional)
     * @param  string[]|null $financial_status_ids Retrieves orders specified by financial status ids (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $return_status Retrieves orders specified by return status (optional)
     * @param  string|null $fulfillment_channel Retrieves order with a fulfillment channel (optional)
     * @param  string|null $shipping_method Retrieve entities according to shipping method (optional)
     * @param  string|null $skip_order_ids Skipped orders by ids (optional)
     * @param  bool|null $is_deleted Filter deleted orders (optional)
     * @param  string|null $shipping_country_iso3 Retrieve entities according to shipping country (optional)
     * @param  string|null $delivery_method Retrieves order with delivery method (optional)
     * @param  string|null $ship_node_type Retrieves order with ship node type (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string|null $sort_by Set field to sort by (optional, default to 'order_id')
     * @param  string|null $sort_direction Set sorting direction (optional, default to 'asc')
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'order_id,customer,totals,address,items,bundles,status')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  bool|null $enable_cache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)
     * @param  bool|null $use_latest_api_version Use the latest platform API version (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderListRequest($start = 0, $count = 10, $page_cursor = null, $ids = null, $order_ids = null, $since_id = null, $store_id = null, $customer_id = null, $customer_email = null, $basket_id = null, $currency_id = null, $phone = null, $order_status = null, $order_status_ids = null, $ebay_order_status = null, $financial_status = null, $financial_status_ids = null, $fulfillment_status = null, $return_status = null, $fulfillment_channel = null, $shipping_method = null, $skip_order_ids = null, $is_deleted = null, $shipping_country_iso3 = null, $delivery_method = null, $ship_node_type = null, $created_to = null, $created_from = null, $modified_to = null, $modified_from = null, $tags = null, $sort_by = 'order_id', $sort_direction = 'asc', $params = 'order_id,customer,totals,address,items,bundles,status', $response_fields = null, $exclude = null, $enable_cache = false, $use_latest_api_version = false, string $contentType = self::contentTypes['orderList'][0])
    {








































        $resourcePath = '/order.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_cursor,
            'page_cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_ids,
            'order_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $since_id,
            'since_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer_id,
            'customer_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer_email,
            'customer_email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $basket_id,
            'basket_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency_id,
            'currency_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $phone,
            'phone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_status,
            'order_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_status_ids,
            'order_status_ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ebay_order_status,
            'ebay_order_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $financial_status,
            'financial_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $financial_status_ids,
            'financial_status_ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillment_status,
            'fulfillment_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_status,
            'return_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillment_channel,
            'fulfillment_channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipping_method,
            'shipping_method', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip_order_ids,
            'skip_order_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_deleted,
            'is_deleted', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipping_country_iso3,
            'shipping_country_iso3', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delivery_method,
            'delivery_method', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ship_node_type,
            'ship_node_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_to,
            'created_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_from,
            'created_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_to,
            'modified_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_from,
            'modified_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sort_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_direction,
            'sort_direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $params,
            'params', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_fields,
            'response_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude,
            'exclude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enable_cache,
            'enable_cache', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $use_latest_api_version,
            'use_latest_api_version', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderPreestimateShippingList
     *
     * order.preestimate_shipping.list
     *
     * @param  \OpenAPI\Client\Model\OrderPreestimateShippingList $order_preestimate_shipping_list order_preestimate_shipping_list (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPreestimateShippingList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelResponseOrderPreestimateShippingList
     */
    public function orderPreestimateShippingList($order_preestimate_shipping_list, string $contentType = self::contentTypes['orderPreestimateShippingList'][0])
    {
        list($response) = $this->orderPreestimateShippingListWithHttpInfo($order_preestimate_shipping_list, $contentType);
        return $response;
    }

    /**
     * Operation orderPreestimateShippingListWithHttpInfo
     *
     * order.preestimate_shipping.list
     *
     * @param  \OpenAPI\Client\Model\OrderPreestimateShippingList $order_preestimate_shipping_list (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPreestimateShippingList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelResponseOrderPreestimateShippingList, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderPreestimateShippingListWithHttpInfo($order_preestimate_shipping_list, string $contentType = self::contentTypes['orderPreestimateShippingList'][0])
    {
        $request = $this->orderPreestimateShippingListRequest($order_preestimate_shipping_list, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelResponseOrderPreestimateShippingList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModelResponseOrderPreestimateShippingList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelResponseOrderPreestimateShippingList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ModelResponseOrderPreestimateShippingList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelResponseOrderPreestimateShippingList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderPreestimateShippingListAsync
     *
     * order.preestimate_shipping.list
     *
     * @param  \OpenAPI\Client\Model\OrderPreestimateShippingList $order_preestimate_shipping_list (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPreestimateShippingList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderPreestimateShippingListAsync($order_preestimate_shipping_list, string $contentType = self::contentTypes['orderPreestimateShippingList'][0])
    {
        return $this->orderPreestimateShippingListAsyncWithHttpInfo($order_preestimate_shipping_list, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderPreestimateShippingListAsyncWithHttpInfo
     *
     * order.preestimate_shipping.list
     *
     * @param  \OpenAPI\Client\Model\OrderPreestimateShippingList $order_preestimate_shipping_list (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPreestimateShippingList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderPreestimateShippingListAsyncWithHttpInfo($order_preestimate_shipping_list, string $contentType = self::contentTypes['orderPreestimateShippingList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModelResponseOrderPreestimateShippingList';
        $request = $this->orderPreestimateShippingListRequest($order_preestimate_shipping_list, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderPreestimateShippingList'
     *
     * @param  \OpenAPI\Client\Model\OrderPreestimateShippingList $order_preestimate_shipping_list (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderPreestimateShippingList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderPreestimateShippingListRequest($order_preestimate_shipping_list, string $contentType = self::contentTypes['orderPreestimateShippingList'][0])
    {

        // verify the required parameter 'order_preestimate_shipping_list' is set
        if ($order_preestimate_shipping_list === null || (is_array($order_preestimate_shipping_list) && count($order_preestimate_shipping_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_preestimate_shipping_list when calling orderPreestimateShippingList'
            );
        }


        $resourcePath = '/order.preestimate_shipping.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_preestimate_shipping_list)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_preestimate_shipping_list));
            } else {
                $httpBody = $order_preestimate_shipping_list;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderRefundAdd
     *
     * order.refund.add
     *
     * @param  \OpenAPI\Client\Model\OrderRefundAdd $order_refund_add order_refund_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderRefundAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderRefundAdd200Response
     */
    public function orderRefundAdd($order_refund_add, string $contentType = self::contentTypes['orderRefundAdd'][0])
    {
        list($response) = $this->orderRefundAddWithHttpInfo($order_refund_add, $contentType);
        return $response;
    }

    /**
     * Operation orderRefundAddWithHttpInfo
     *
     * order.refund.add
     *
     * @param  \OpenAPI\Client\Model\OrderRefundAdd $order_refund_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderRefundAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderRefundAdd200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderRefundAddWithHttpInfo($order_refund_add, string $contentType = self::contentTypes['orderRefundAdd'][0])
    {
        $request = $this->orderRefundAddRequest($order_refund_add, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderRefundAdd200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderRefundAdd200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderRefundAdd200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\OrderRefundAdd200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderRefundAdd200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderRefundAddAsync
     *
     * order.refund.add
     *
     * @param  \OpenAPI\Client\Model\OrderRefundAdd $order_refund_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderRefundAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderRefundAddAsync($order_refund_add, string $contentType = self::contentTypes['orderRefundAdd'][0])
    {
        return $this->orderRefundAddAsyncWithHttpInfo($order_refund_add, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderRefundAddAsyncWithHttpInfo
     *
     * order.refund.add
     *
     * @param  \OpenAPI\Client\Model\OrderRefundAdd $order_refund_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderRefundAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderRefundAddAsyncWithHttpInfo($order_refund_add, string $contentType = self::contentTypes['orderRefundAdd'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderRefundAdd200Response';
        $request = $this->orderRefundAddRequest($order_refund_add, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderRefundAdd'
     *
     * @param  \OpenAPI\Client\Model\OrderRefundAdd $order_refund_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderRefundAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderRefundAddRequest($order_refund_add, string $contentType = self::contentTypes['orderRefundAdd'][0])
    {

        // verify the required parameter 'order_refund_add' is set
        if ($order_refund_add === null || (is_array($order_refund_add) && count($order_refund_add) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_refund_add when calling orderRefundAdd'
            );
        }


        $resourcePath = '/order.refund.add.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_refund_add)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_refund_add));
            } else {
                $httpBody = $order_refund_add;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderReturnAdd
     *
     * order.return.add
     *
     * @param  \OpenAPI\Client\Model\OrderReturnAdd $order_return_add order_return_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderReturnAdd200Response
     */
    public function orderReturnAdd($order_return_add, string $contentType = self::contentTypes['orderReturnAdd'][0])
    {
        list($response) = $this->orderReturnAddWithHttpInfo($order_return_add, $contentType);
        return $response;
    }

    /**
     * Operation orderReturnAddWithHttpInfo
     *
     * order.return.add
     *
     * @param  \OpenAPI\Client\Model\OrderReturnAdd $order_return_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderReturnAdd200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderReturnAddWithHttpInfo($order_return_add, string $contentType = self::contentTypes['orderReturnAdd'][0])
    {
        $request = $this->orderReturnAddRequest($order_return_add, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderReturnAdd200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderReturnAdd200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderReturnAdd200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\OrderReturnAdd200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderReturnAdd200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderReturnAddAsync
     *
     * order.return.add
     *
     * @param  \OpenAPI\Client\Model\OrderReturnAdd $order_return_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderReturnAddAsync($order_return_add, string $contentType = self::contentTypes['orderReturnAdd'][0])
    {
        return $this->orderReturnAddAsyncWithHttpInfo($order_return_add, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderReturnAddAsyncWithHttpInfo
     *
     * order.return.add
     *
     * @param  \OpenAPI\Client\Model\OrderReturnAdd $order_return_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderReturnAddAsyncWithHttpInfo($order_return_add, string $contentType = self::contentTypes['orderReturnAdd'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderReturnAdd200Response';
        $request = $this->orderReturnAddRequest($order_return_add, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderReturnAdd'
     *
     * @param  \OpenAPI\Client\Model\OrderReturnAdd $order_return_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderReturnAddRequest($order_return_add, string $contentType = self::contentTypes['orderReturnAdd'][0])
    {

        // verify the required parameter 'order_return_add' is set
        if ($order_return_add === null || (is_array($order_return_add) && count($order_return_add) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_return_add when calling orderReturnAdd'
            );
        }


        $resourcePath = '/order.return.add.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_return_add)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_return_add));
            } else {
                $httpBody = $order_return_add;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderReturnDelete
     *
     * order.return.delete
     *
     * @param  string $return_id Return ID (required)
     * @param  string $order_id Defines the order id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AttributeValueDelete200Response
     */
    public function orderReturnDelete($return_id, $order_id, $store_id = null, string $contentType = self::contentTypes['orderReturnDelete'][0])
    {
        list($response) = $this->orderReturnDeleteWithHttpInfo($return_id, $order_id, $store_id, $contentType);
        return $response;
    }

    /**
     * Operation orderReturnDeleteWithHttpInfo
     *
     * order.return.delete
     *
     * @param  string $return_id Return ID (required)
     * @param  string $order_id Defines the order id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AttributeValueDelete200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderReturnDeleteWithHttpInfo($return_id, $order_id, $store_id = null, string $contentType = self::contentTypes['orderReturnDelete'][0])
    {
        $request = $this->orderReturnDeleteRequest($return_id, $order_id, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AttributeValueDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AttributeValueDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AttributeValueDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AttributeValueDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AttributeValueDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderReturnDeleteAsync
     *
     * order.return.delete
     *
     * @param  string $return_id Return ID (required)
     * @param  string $order_id Defines the order id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderReturnDeleteAsync($return_id, $order_id, $store_id = null, string $contentType = self::contentTypes['orderReturnDelete'][0])
    {
        return $this->orderReturnDeleteAsyncWithHttpInfo($return_id, $order_id, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderReturnDeleteAsyncWithHttpInfo
     *
     * order.return.delete
     *
     * @param  string $return_id Return ID (required)
     * @param  string $order_id Defines the order id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderReturnDeleteAsyncWithHttpInfo($return_id, $order_id, $store_id = null, string $contentType = self::contentTypes['orderReturnDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AttributeValueDelete200Response';
        $request = $this->orderReturnDeleteRequest($return_id, $order_id, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderReturnDelete'
     *
     * @param  string $return_id Return ID (required)
     * @param  string $order_id Defines the order id (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderReturnDeleteRequest($return_id, $order_id, $store_id = null, string $contentType = self::contentTypes['orderReturnDelete'][0])
    {

        // verify the required parameter 'return_id' is set
        if ($return_id === null || (is_array($return_id) && count($return_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_id when calling orderReturnDelete'
            );
        }

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderReturnDelete'
            );
        }



        $resourcePath = '/order.return.delete.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $return_id,
            'return_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'order_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderReturnUpdate
     *
     * order.return.update
     *
     * @param  \OpenAPI\Client\Model\OrderReturnUpdate $order_return_update order_return_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccountConfigUpdate200Response
     */
    public function orderReturnUpdate($order_return_update, string $contentType = self::contentTypes['orderReturnUpdate'][0])
    {
        list($response) = $this->orderReturnUpdateWithHttpInfo($order_return_update, $contentType);
        return $response;
    }

    /**
     * Operation orderReturnUpdateWithHttpInfo
     *
     * order.return.update
     *
     * @param  \OpenAPI\Client\Model\OrderReturnUpdate $order_return_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccountConfigUpdate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderReturnUpdateWithHttpInfo($order_return_update, string $contentType = self::contentTypes['orderReturnUpdate'][0])
    {
        $request = $this->orderReturnUpdateRequest($order_return_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccountConfigUpdate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccountConfigUpdate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccountConfigUpdate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AccountConfigUpdate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccountConfigUpdate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderReturnUpdateAsync
     *
     * order.return.update
     *
     * @param  \OpenAPI\Client\Model\OrderReturnUpdate $order_return_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderReturnUpdateAsync($order_return_update, string $contentType = self::contentTypes['orderReturnUpdate'][0])
    {
        return $this->orderReturnUpdateAsyncWithHttpInfo($order_return_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderReturnUpdateAsyncWithHttpInfo
     *
     * order.return.update
     *
     * @param  \OpenAPI\Client\Model\OrderReturnUpdate $order_return_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderReturnUpdateAsyncWithHttpInfo($order_return_update, string $contentType = self::contentTypes['orderReturnUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccountConfigUpdate200Response';
        $request = $this->orderReturnUpdateRequest($order_return_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderReturnUpdate'
     *
     * @param  \OpenAPI\Client\Model\OrderReturnUpdate $order_return_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderReturnUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderReturnUpdateRequest($order_return_update, string $contentType = self::contentTypes['orderReturnUpdate'][0])
    {

        // verify the required parameter 'order_return_update' is set
        if ($order_return_update === null || (is_array($order_return_update) && count($order_return_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_return_update when calling orderReturnUpdate'
            );
        }


        $resourcePath = '/order.return.update.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_return_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_return_update));
            } else {
                $httpBody = $order_return_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderShipmentAdd
     *
     * order.shipment.add
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentAdd $order_shipment_add order_shipment_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderShipmentAdd200Response
     */
    public function orderShipmentAdd($order_shipment_add, string $contentType = self::contentTypes['orderShipmentAdd'][0])
    {
        list($response) = $this->orderShipmentAddWithHttpInfo($order_shipment_add, $contentType);
        return $response;
    }

    /**
     * Operation orderShipmentAddWithHttpInfo
     *
     * order.shipment.add
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentAdd $order_shipment_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderShipmentAdd200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderShipmentAddWithHttpInfo($order_shipment_add, string $contentType = self::contentTypes['orderShipmentAdd'][0])
    {
        $request = $this->orderShipmentAddRequest($order_shipment_add, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderShipmentAdd200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderShipmentAdd200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderShipmentAdd200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\OrderShipmentAdd200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderShipmentAdd200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderShipmentAddAsync
     *
     * order.shipment.add
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentAdd $order_shipment_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentAddAsync($order_shipment_add, string $contentType = self::contentTypes['orderShipmentAdd'][0])
    {
        return $this->orderShipmentAddAsyncWithHttpInfo($order_shipment_add, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderShipmentAddAsyncWithHttpInfo
     *
     * order.shipment.add
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentAdd $order_shipment_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentAddAsyncWithHttpInfo($order_shipment_add, string $contentType = self::contentTypes['orderShipmentAdd'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderShipmentAdd200Response';
        $request = $this->orderShipmentAddRequest($order_shipment_add, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderShipmentAdd'
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentAdd $order_shipment_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderShipmentAddRequest($order_shipment_add, string $contentType = self::contentTypes['orderShipmentAdd'][0])
    {

        // verify the required parameter 'order_shipment_add' is set
        if ($order_shipment_add === null || (is_array($order_shipment_add) && count($order_shipment_add) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_shipment_add when calling orderShipmentAdd'
            );
        }


        $resourcePath = '/order.shipment.add.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_shipment_add)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_shipment_add));
            } else {
                $httpBody = $order_shipment_add;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderShipmentAddBatch
     *
     * order.shipment.add.batch
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentAddBatch $order_shipment_add_batch order_shipment_add_batch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentAddBatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CategoryAddBatch200Response
     */
    public function orderShipmentAddBatch($order_shipment_add_batch, string $contentType = self::contentTypes['orderShipmentAddBatch'][0])
    {
        list($response) = $this->orderShipmentAddBatchWithHttpInfo($order_shipment_add_batch, $contentType);
        return $response;
    }

    /**
     * Operation orderShipmentAddBatchWithHttpInfo
     *
     * order.shipment.add.batch
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentAddBatch $order_shipment_add_batch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentAddBatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CategoryAddBatch200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderShipmentAddBatchWithHttpInfo($order_shipment_add_batch, string $contentType = self::contentTypes['orderShipmentAddBatch'][0])
    {
        $request = $this->orderShipmentAddBatchRequest($order_shipment_add_batch, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CategoryAddBatch200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CategoryAddBatch200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CategoryAddBatch200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\CategoryAddBatch200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CategoryAddBatch200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderShipmentAddBatchAsync
     *
     * order.shipment.add.batch
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentAddBatch $order_shipment_add_batch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentAddBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentAddBatchAsync($order_shipment_add_batch, string $contentType = self::contentTypes['orderShipmentAddBatch'][0])
    {
        return $this->orderShipmentAddBatchAsyncWithHttpInfo($order_shipment_add_batch, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderShipmentAddBatchAsyncWithHttpInfo
     *
     * order.shipment.add.batch
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentAddBatch $order_shipment_add_batch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentAddBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentAddBatchAsyncWithHttpInfo($order_shipment_add_batch, string $contentType = self::contentTypes['orderShipmentAddBatch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CategoryAddBatch200Response';
        $request = $this->orderShipmentAddBatchRequest($order_shipment_add_batch, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderShipmentAddBatch'
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentAddBatch $order_shipment_add_batch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentAddBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderShipmentAddBatchRequest($order_shipment_add_batch, string $contentType = self::contentTypes['orderShipmentAddBatch'][0])
    {

        // verify the required parameter 'order_shipment_add_batch' is set
        if ($order_shipment_add_batch === null || (is_array($order_shipment_add_batch) && count($order_shipment_add_batch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_shipment_add_batch when calling orderShipmentAddBatch'
            );
        }


        $resourcePath = '/order.shipment.add.batch.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_shipment_add_batch)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_shipment_add_batch));
            } else {
                $httpBody = $order_shipment_add_batch;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderShipmentDelete
     *
     * order.shipment.delete
     *
     * @param  string $shipment_id Shipment id indicates the number of delivery (required)
     * @param  string $order_id Defines the order for which the shipment will be deleted (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderShipmentDelete200Response
     */
    public function orderShipmentDelete($shipment_id, $order_id, $store_id = null, string $contentType = self::contentTypes['orderShipmentDelete'][0])
    {
        list($response) = $this->orderShipmentDeleteWithHttpInfo($shipment_id, $order_id, $store_id, $contentType);
        return $response;
    }

    /**
     * Operation orderShipmentDeleteWithHttpInfo
     *
     * order.shipment.delete
     *
     * @param  string $shipment_id Shipment id indicates the number of delivery (required)
     * @param  string $order_id Defines the order for which the shipment will be deleted (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderShipmentDelete200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderShipmentDeleteWithHttpInfo($shipment_id, $order_id, $store_id = null, string $contentType = self::contentTypes['orderShipmentDelete'][0])
    {
        $request = $this->orderShipmentDeleteRequest($shipment_id, $order_id, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderShipmentDelete200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderShipmentDelete200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderShipmentDelete200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\OrderShipmentDelete200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderShipmentDelete200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderShipmentDeleteAsync
     *
     * order.shipment.delete
     *
     * @param  string $shipment_id Shipment id indicates the number of delivery (required)
     * @param  string $order_id Defines the order for which the shipment will be deleted (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentDeleteAsync($shipment_id, $order_id, $store_id = null, string $contentType = self::contentTypes['orderShipmentDelete'][0])
    {
        return $this->orderShipmentDeleteAsyncWithHttpInfo($shipment_id, $order_id, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderShipmentDeleteAsyncWithHttpInfo
     *
     * order.shipment.delete
     *
     * @param  string $shipment_id Shipment id indicates the number of delivery (required)
     * @param  string $order_id Defines the order for which the shipment will be deleted (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentDeleteAsyncWithHttpInfo($shipment_id, $order_id, $store_id = null, string $contentType = self::contentTypes['orderShipmentDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderShipmentDelete200Response';
        $request = $this->orderShipmentDeleteRequest($shipment_id, $order_id, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderShipmentDelete'
     *
     * @param  string $shipment_id Shipment id indicates the number of delivery (required)
     * @param  string $order_id Defines the order for which the shipment will be deleted (required)
     * @param  string|null $store_id Store Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderShipmentDeleteRequest($shipment_id, $order_id, $store_id = null, string $contentType = self::contentTypes['orderShipmentDelete'][0])
    {

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling orderShipmentDelete'
            );
        }

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderShipmentDelete'
            );
        }



        $resourcePath = '/order.shipment.delete.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipment_id,
            'shipment_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'order_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderShipmentInfo
     *
     * order.shipment.info
     *
     * @param  string $id Entity id (required)
     * @param  string $order_id Defines the order id (required)
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,items,tracking_numbers')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderShipmentInfo200Response
     */
    public function orderShipmentInfo($id, $order_id, $start = 0, $store_id = null, $response_fields = null, $params = 'id,order_id,items,tracking_numbers', $exclude = null, string $contentType = self::contentTypes['orderShipmentInfo'][0])
    {
        list($response) = $this->orderShipmentInfoWithHttpInfo($id, $order_id, $start, $store_id, $response_fields, $params, $exclude, $contentType);
        return $response;
    }

    /**
     * Operation orderShipmentInfoWithHttpInfo
     *
     * order.shipment.info
     *
     * @param  string $id Entity id (required)
     * @param  string $order_id Defines the order id (required)
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,items,tracking_numbers')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderShipmentInfo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderShipmentInfoWithHttpInfo($id, $order_id, $start = 0, $store_id = null, $response_fields = null, $params = 'id,order_id,items,tracking_numbers', $exclude = null, string $contentType = self::contentTypes['orderShipmentInfo'][0])
    {
        $request = $this->orderShipmentInfoRequest($id, $order_id, $start, $store_id, $response_fields, $params, $exclude, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderShipmentInfo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderShipmentInfo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderShipmentInfo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\OrderShipmentInfo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderShipmentInfo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderShipmentInfoAsync
     *
     * order.shipment.info
     *
     * @param  string $id Entity id (required)
     * @param  string $order_id Defines the order id (required)
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,items,tracking_numbers')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentInfoAsync($id, $order_id, $start = 0, $store_id = null, $response_fields = null, $params = 'id,order_id,items,tracking_numbers', $exclude = null, string $contentType = self::contentTypes['orderShipmentInfo'][0])
    {
        return $this->orderShipmentInfoAsyncWithHttpInfo($id, $order_id, $start, $store_id, $response_fields, $params, $exclude, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderShipmentInfoAsyncWithHttpInfo
     *
     * order.shipment.info
     *
     * @param  string $id Entity id (required)
     * @param  string $order_id Defines the order id (required)
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,items,tracking_numbers')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentInfoAsyncWithHttpInfo($id, $order_id, $start = 0, $store_id = null, $response_fields = null, $params = 'id,order_id,items,tracking_numbers', $exclude = null, string $contentType = self::contentTypes['orderShipmentInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderShipmentInfo200Response';
        $request = $this->orderShipmentInfoRequest($id, $order_id, $start, $store_id, $response_fields, $params, $exclude, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderShipmentInfo'
     *
     * @param  string $id Entity id (required)
     * @param  string $order_id Defines the order id (required)
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,items,tracking_numbers')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderShipmentInfoRequest($id, $order_id, $start = 0, $store_id = null, $response_fields = null, $params = 'id,order_id,items,tracking_numbers', $exclude = null, string $contentType = self::contentTypes['orderShipmentInfo'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderShipmentInfo'
            );
        }

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderShipmentInfo'
            );
        }







        $resourcePath = '/order.shipment.info.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'order_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_fields,
            'response_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $params,
            'params', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude,
            'exclude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderShipmentList
     *
     * order.shipment.list
     *
     * @param  string $order_id Retrieves shipments specified by order id (required)
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,items,tracking_numbers')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelResponseOrderShipmentList
     */
    public function orderShipmentList($order_id, $start = 0, $count = 10, $page_cursor = null, $store_id = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $response_fields = null, $params = 'id,order_id,items,tracking_numbers', $exclude = null, string $contentType = self::contentTypes['orderShipmentList'][0])
    {
        list($response) = $this->orderShipmentListWithHttpInfo($order_id, $start, $count, $page_cursor, $store_id, $created_from, $created_to, $modified_from, $modified_to, $response_fields, $params, $exclude, $contentType);
        return $response;
    }

    /**
     * Operation orderShipmentListWithHttpInfo
     *
     * order.shipment.list
     *
     * @param  string $order_id Retrieves shipments specified by order id (required)
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,items,tracking_numbers')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelResponseOrderShipmentList, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderShipmentListWithHttpInfo($order_id, $start = 0, $count = 10, $page_cursor = null, $store_id = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $response_fields = null, $params = 'id,order_id,items,tracking_numbers', $exclude = null, string $contentType = self::contentTypes['orderShipmentList'][0])
    {
        $request = $this->orderShipmentListRequest($order_id, $start, $count, $page_cursor, $store_id, $created_from, $created_to, $modified_from, $modified_to, $response_fields, $params, $exclude, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelResponseOrderShipmentList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModelResponseOrderShipmentList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelResponseOrderShipmentList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ModelResponseOrderShipmentList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelResponseOrderShipmentList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderShipmentListAsync
     *
     * order.shipment.list
     *
     * @param  string $order_id Retrieves shipments specified by order id (required)
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,items,tracking_numbers')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentListAsync($order_id, $start = 0, $count = 10, $page_cursor = null, $store_id = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $response_fields = null, $params = 'id,order_id,items,tracking_numbers', $exclude = null, string $contentType = self::contentTypes['orderShipmentList'][0])
    {
        return $this->orderShipmentListAsyncWithHttpInfo($order_id, $start, $count, $page_cursor, $store_id, $created_from, $created_to, $modified_from, $modified_to, $response_fields, $params, $exclude, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderShipmentListAsyncWithHttpInfo
     *
     * order.shipment.list
     *
     * @param  string $order_id Retrieves shipments specified by order id (required)
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,items,tracking_numbers')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentListAsyncWithHttpInfo($order_id, $start = 0, $count = 10, $page_cursor = null, $store_id = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $response_fields = null, $params = 'id,order_id,items,tracking_numbers', $exclude = null, string $contentType = self::contentTypes['orderShipmentList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModelResponseOrderShipmentList';
        $request = $this->orderShipmentListRequest($order_id, $start, $count, $page_cursor, $store_id, $created_from, $created_to, $modified_from, $modified_to, $response_fields, $params, $exclude, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderShipmentList'
     *
     * @param  string $order_id Retrieves shipments specified by order id (required)
     * @param  int|null $start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $created_from Retrieve entities from their creation date (optional)
     * @param  string|null $created_to Retrieve entities to their creation date (optional)
     * @param  string|null $modified_from Retrieve entities from their modification date (optional)
     * @param  string|null $modified_to Retrieve entities to their modification date (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,items,tracking_numbers')
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderShipmentListRequest($order_id, $start = 0, $count = 10, $page_cursor = null, $store_id = null, $created_from = null, $created_to = null, $modified_from = null, $modified_to = null, $response_fields = null, $params = 'id,order_id,items,tracking_numbers', $exclude = null, string $contentType = self::contentTypes['orderShipmentList'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderShipmentList'
            );
        }













        $resourcePath = '/order.shipment.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_cursor,
            'page_cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'order_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_from,
            'created_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_to,
            'created_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_from,
            'modified_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_to,
            'modified_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_fields,
            'response_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $params,
            'params', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude,
            'exclude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderShipmentTrackingAdd
     *
     * order.shipment.tracking.add
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentTrackingAdd $order_shipment_tracking_add order_shipment_tracking_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentTrackingAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderShipmentTrackingAdd200Response
     */
    public function orderShipmentTrackingAdd($order_shipment_tracking_add, string $contentType = self::contentTypes['orderShipmentTrackingAdd'][0])
    {
        list($response) = $this->orderShipmentTrackingAddWithHttpInfo($order_shipment_tracking_add, $contentType);
        return $response;
    }

    /**
     * Operation orderShipmentTrackingAddWithHttpInfo
     *
     * order.shipment.tracking.add
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentTrackingAdd $order_shipment_tracking_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentTrackingAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderShipmentTrackingAdd200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderShipmentTrackingAddWithHttpInfo($order_shipment_tracking_add, string $contentType = self::contentTypes['orderShipmentTrackingAdd'][0])
    {
        $request = $this->orderShipmentTrackingAddRequest($order_shipment_tracking_add, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderShipmentTrackingAdd200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderShipmentTrackingAdd200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderShipmentTrackingAdd200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\OrderShipmentTrackingAdd200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderShipmentTrackingAdd200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderShipmentTrackingAddAsync
     *
     * order.shipment.tracking.add
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentTrackingAdd $order_shipment_tracking_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentTrackingAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentTrackingAddAsync($order_shipment_tracking_add, string $contentType = self::contentTypes['orderShipmentTrackingAdd'][0])
    {
        return $this->orderShipmentTrackingAddAsyncWithHttpInfo($order_shipment_tracking_add, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderShipmentTrackingAddAsyncWithHttpInfo
     *
     * order.shipment.tracking.add
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentTrackingAdd $order_shipment_tracking_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentTrackingAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentTrackingAddAsyncWithHttpInfo($order_shipment_tracking_add, string $contentType = self::contentTypes['orderShipmentTrackingAdd'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderShipmentTrackingAdd200Response';
        $request = $this->orderShipmentTrackingAddRequest($order_shipment_tracking_add, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderShipmentTrackingAdd'
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentTrackingAdd $order_shipment_tracking_add (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentTrackingAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderShipmentTrackingAddRequest($order_shipment_tracking_add, string $contentType = self::contentTypes['orderShipmentTrackingAdd'][0])
    {

        // verify the required parameter 'order_shipment_tracking_add' is set
        if ($order_shipment_tracking_add === null || (is_array($order_shipment_tracking_add) && count($order_shipment_tracking_add) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_shipment_tracking_add when calling orderShipmentTrackingAdd'
            );
        }


        $resourcePath = '/order.shipment.tracking.add.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_shipment_tracking_add)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_shipment_tracking_add));
            } else {
                $httpBody = $order_shipment_tracking_add;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderShipmentUpdate
     *
     * order.shipment.update
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentUpdate $order_shipment_update order_shipment_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccountConfigUpdate200Response
     */
    public function orderShipmentUpdate($order_shipment_update, string $contentType = self::contentTypes['orderShipmentUpdate'][0])
    {
        list($response) = $this->orderShipmentUpdateWithHttpInfo($order_shipment_update, $contentType);
        return $response;
    }

    /**
     * Operation orderShipmentUpdateWithHttpInfo
     *
     * order.shipment.update
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentUpdate $order_shipment_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccountConfigUpdate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderShipmentUpdateWithHttpInfo($order_shipment_update, string $contentType = self::contentTypes['orderShipmentUpdate'][0])
    {
        $request = $this->orderShipmentUpdateRequest($order_shipment_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccountConfigUpdate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccountConfigUpdate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccountConfigUpdate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AccountConfigUpdate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccountConfigUpdate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderShipmentUpdateAsync
     *
     * order.shipment.update
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentUpdate $order_shipment_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentUpdateAsync($order_shipment_update, string $contentType = self::contentTypes['orderShipmentUpdate'][0])
    {
        return $this->orderShipmentUpdateAsyncWithHttpInfo($order_shipment_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderShipmentUpdateAsyncWithHttpInfo
     *
     * order.shipment.update
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentUpdate $order_shipment_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderShipmentUpdateAsyncWithHttpInfo($order_shipment_update, string $contentType = self::contentTypes['orderShipmentUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccountConfigUpdate200Response';
        $request = $this->orderShipmentUpdateRequest($order_shipment_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderShipmentUpdate'
     *
     * @param  \OpenAPI\Client\Model\OrderShipmentUpdate $order_shipment_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderShipmentUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderShipmentUpdateRequest($order_shipment_update, string $contentType = self::contentTypes['orderShipmentUpdate'][0])
    {

        // verify the required parameter 'order_shipment_update' is set
        if ($order_shipment_update === null || (is_array($order_shipment_update) && count($order_shipment_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_shipment_update when calling orderShipmentUpdate'
            );
        }


        $resourcePath = '/order.shipment.update.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($order_shipment_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($order_shipment_update));
            } else {
                $httpBody = $order_shipment_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderStatusList
     *
     * order.status.list
     *
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $action Available statuses for the specified action. (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderStatusList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelResponseOrderStatusList
     */
    public function orderStatusList($store_id = null, $action = null, $response_fields = null, string $contentType = self::contentTypes['orderStatusList'][0])
    {
        list($response) = $this->orderStatusListWithHttpInfo($store_id, $action, $response_fields, $contentType);
        return $response;
    }

    /**
     * Operation orderStatusListWithHttpInfo
     *
     * order.status.list
     *
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $action Available statuses for the specified action. (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderStatusList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelResponseOrderStatusList, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderStatusListWithHttpInfo($store_id = null, $action = null, $response_fields = null, string $contentType = self::contentTypes['orderStatusList'][0])
    {
        $request = $this->orderStatusListRequest($store_id, $action, $response_fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelResponseOrderStatusList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModelResponseOrderStatusList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelResponseOrderStatusList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ModelResponseOrderStatusList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelResponseOrderStatusList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderStatusListAsync
     *
     * order.status.list
     *
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $action Available statuses for the specified action. (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderStatusList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderStatusListAsync($store_id = null, $action = null, $response_fields = null, string $contentType = self::contentTypes['orderStatusList'][0])
    {
        return $this->orderStatusListAsyncWithHttpInfo($store_id, $action, $response_fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderStatusListAsyncWithHttpInfo
     *
     * order.status.list
     *
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $action Available statuses for the specified action. (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderStatusList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderStatusListAsyncWithHttpInfo($store_id = null, $action = null, $response_fields = null, string $contentType = self::contentTypes['orderStatusList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModelResponseOrderStatusList';
        $request = $this->orderStatusListRequest($store_id, $action, $response_fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderStatusList'
     *
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $action Available statuses for the specified action. (optional)
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderStatusList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderStatusListRequest($store_id = null, $action = null, $response_fields = null, string $contentType = self::contentTypes['orderStatusList'][0])
    {





        $resourcePath = '/order.status.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $action,
            'action', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_fields,
            'response_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderTransactionList
     *
     * order.transaction.list
     *
     * @param  string $order_ids Retrieves order transactions specified by order ids (required)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,amount,description')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderTransactionList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelResponseOrderTransactionList
     */
    public function orderTransactionList($order_ids, $count = 10, $page_cursor = null, $store_id = null, $params = 'id,order_id,amount,description', $response_fields = null, $exclude = null, string $contentType = self::contentTypes['orderTransactionList'][0])
    {
        list($response) = $this->orderTransactionListWithHttpInfo($order_ids, $count, $page_cursor, $store_id, $params, $response_fields, $exclude, $contentType);
        return $response;
    }

    /**
     * Operation orderTransactionListWithHttpInfo
     *
     * order.transaction.list
     *
     * @param  string $order_ids Retrieves order transactions specified by order ids (required)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,amount,description')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderTransactionList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelResponseOrderTransactionList, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderTransactionListWithHttpInfo($order_ids, $count = 10, $page_cursor = null, $store_id = null, $params = 'id,order_id,amount,description', $response_fields = null, $exclude = null, string $contentType = self::contentTypes['orderTransactionList'][0])
    {
        $request = $this->orderTransactionListRequest($order_ids, $count, $page_cursor, $store_id, $params, $response_fields, $exclude, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelResponseOrderTransactionList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ModelResponseOrderTransactionList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelResponseOrderTransactionList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ModelResponseOrderTransactionList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelResponseOrderTransactionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderTransactionListAsync
     *
     * order.transaction.list
     *
     * @param  string $order_ids Retrieves order transactions specified by order ids (required)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,amount,description')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderTransactionList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderTransactionListAsync($order_ids, $count = 10, $page_cursor = null, $store_id = null, $params = 'id,order_id,amount,description', $response_fields = null, $exclude = null, string $contentType = self::contentTypes['orderTransactionList'][0])
    {
        return $this->orderTransactionListAsyncWithHttpInfo($order_ids, $count, $page_cursor, $store_id, $params, $response_fields, $exclude, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderTransactionListAsyncWithHttpInfo
     *
     * order.transaction.list
     *
     * @param  string $order_ids Retrieves order transactions specified by order ids (required)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,amount,description')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderTransactionList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderTransactionListAsyncWithHttpInfo($order_ids, $count = 10, $page_cursor = null, $store_id = null, $params = 'id,order_id,amount,description', $response_fields = null, $exclude = null, string $contentType = self::contentTypes['orderTransactionList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ModelResponseOrderTransactionList';
        $request = $this->orderTransactionListRequest($order_ids, $count, $page_cursor, $store_id, $params, $response_fields, $exclude, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderTransactionList'
     *
     * @param  string $order_ids Retrieves order transactions specified by order ids (required)
     * @param  int|null $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param  string|null $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param  string|null $store_id Store Id (optional)
     * @param  string|null $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,amount,description')
     * @param  string|null $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param  string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderTransactionList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderTransactionListRequest($order_ids, $count = 10, $page_cursor = null, $store_id = null, $params = 'id,order_id,amount,description', $response_fields = null, $exclude = null, string $contentType = self::contentTypes['orderTransactionList'][0])
    {

        // verify the required parameter 'order_ids' is set
        if ($order_ids === null || (is_array($order_ids) && count($order_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_ids when calling orderTransactionList'
            );
        }








        $resourcePath = '/order.transaction.list.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_cursor,
            'page_cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_ids,
            'order_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $params,
            'params', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_fields,
            'response_fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude,
            'exclude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderUpdate
     *
     * order.update
     *
     * @param  string $order_id Defines the orders specified by order id (required)
     * @param  string|null $store_id Defines store id where the order should be found (optional)
     * @param  string|null $order_status Defines new order&#39;s status (optional)
     * @param  string|null $financial_status Update order financial status to specified (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $cancellation_reason Defines the cancellation reason when the order will be canceled (optional)
     * @param  string|null $order_payment_method Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)
     * @param  string|null $comment Specifies order comment (optional)
     * @param  string|null $admin_comment Specifies admin&#39;s order comment (optional)
     * @param  string|null $admin_private_comment Specifies private admin&#39;s order comment (optional)
     * @param  string|null $invoice_admin_comment Specifies admin&#39;s order invoice comment (optional)
     * @param  string|null $date_modified Specifies order&#39;s  modification date (optional)
     * @param  string|null $date_finished Specifies order&#39;s  finished date (optional)
     * @param  bool|null $send_notifications Send notifications to customer after order was created (optional, default to false)
     * @param  bool|null $create_invoice Determines whether an invoice should be created if it has not already been created (optional)
     * @param  string|null $origin The source of the order (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccountConfigUpdate200Response
     */
    public function orderUpdate($order_id, $store_id = null, $order_status = null, $financial_status = null, $fulfillment_status = null, $cancellation_reason = null, $order_payment_method = null, $comment = null, $admin_comment = null, $admin_private_comment = null, $invoice_admin_comment = null, $date_modified = null, $date_finished = null, $send_notifications = false, $create_invoice = null, $origin = null, $tags = null, string $contentType = self::contentTypes['orderUpdate'][0])
    {
        list($response) = $this->orderUpdateWithHttpInfo($order_id, $store_id, $order_status, $financial_status, $fulfillment_status, $cancellation_reason, $order_payment_method, $comment, $admin_comment, $admin_private_comment, $invoice_admin_comment, $date_modified, $date_finished, $send_notifications, $create_invoice, $origin, $tags, $contentType);
        return $response;
    }

    /**
     * Operation orderUpdateWithHttpInfo
     *
     * order.update
     *
     * @param  string $order_id Defines the orders specified by order id (required)
     * @param  string|null $store_id Defines store id where the order should be found (optional)
     * @param  string|null $order_status Defines new order&#39;s status (optional)
     * @param  string|null $financial_status Update order financial status to specified (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $cancellation_reason Defines the cancellation reason when the order will be canceled (optional)
     * @param  string|null $order_payment_method Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)
     * @param  string|null $comment Specifies order comment (optional)
     * @param  string|null $admin_comment Specifies admin&#39;s order comment (optional)
     * @param  string|null $admin_private_comment Specifies private admin&#39;s order comment (optional)
     * @param  string|null $invoice_admin_comment Specifies admin&#39;s order invoice comment (optional)
     * @param  string|null $date_modified Specifies order&#39;s  modification date (optional)
     * @param  string|null $date_finished Specifies order&#39;s  finished date (optional)
     * @param  bool|null $send_notifications Send notifications to customer after order was created (optional, default to false)
     * @param  bool|null $create_invoice Determines whether an invoice should be created if it has not already been created (optional)
     * @param  string|null $origin The source of the order (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccountConfigUpdate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderUpdateWithHttpInfo($order_id, $store_id = null, $order_status = null, $financial_status = null, $fulfillment_status = null, $cancellation_reason = null, $order_payment_method = null, $comment = null, $admin_comment = null, $admin_private_comment = null, $invoice_admin_comment = null, $date_modified = null, $date_finished = null, $send_notifications = false, $create_invoice = null, $origin = null, $tags = null, string $contentType = self::contentTypes['orderUpdate'][0])
    {
        $request = $this->orderUpdateRequest($order_id, $store_id, $order_status, $financial_status, $fulfillment_status, $cancellation_reason, $order_payment_method, $comment, $admin_comment, $admin_private_comment, $invoice_admin_comment, $date_modified, $date_finished, $send_notifications, $create_invoice, $origin, $tags, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccountConfigUpdate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccountConfigUpdate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccountConfigUpdate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AccountConfigUpdate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccountConfigUpdate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderUpdateAsync
     *
     * order.update
     *
     * @param  string $order_id Defines the orders specified by order id (required)
     * @param  string|null $store_id Defines store id where the order should be found (optional)
     * @param  string|null $order_status Defines new order&#39;s status (optional)
     * @param  string|null $financial_status Update order financial status to specified (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $cancellation_reason Defines the cancellation reason when the order will be canceled (optional)
     * @param  string|null $order_payment_method Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)
     * @param  string|null $comment Specifies order comment (optional)
     * @param  string|null $admin_comment Specifies admin&#39;s order comment (optional)
     * @param  string|null $admin_private_comment Specifies private admin&#39;s order comment (optional)
     * @param  string|null $invoice_admin_comment Specifies admin&#39;s order invoice comment (optional)
     * @param  string|null $date_modified Specifies order&#39;s  modification date (optional)
     * @param  string|null $date_finished Specifies order&#39;s  finished date (optional)
     * @param  bool|null $send_notifications Send notifications to customer after order was created (optional, default to false)
     * @param  bool|null $create_invoice Determines whether an invoice should be created if it has not already been created (optional)
     * @param  string|null $origin The source of the order (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderUpdateAsync($order_id, $store_id = null, $order_status = null, $financial_status = null, $fulfillment_status = null, $cancellation_reason = null, $order_payment_method = null, $comment = null, $admin_comment = null, $admin_private_comment = null, $invoice_admin_comment = null, $date_modified = null, $date_finished = null, $send_notifications = false, $create_invoice = null, $origin = null, $tags = null, string $contentType = self::contentTypes['orderUpdate'][0])
    {
        return $this->orderUpdateAsyncWithHttpInfo($order_id, $store_id, $order_status, $financial_status, $fulfillment_status, $cancellation_reason, $order_payment_method, $comment, $admin_comment, $admin_private_comment, $invoice_admin_comment, $date_modified, $date_finished, $send_notifications, $create_invoice, $origin, $tags, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderUpdateAsyncWithHttpInfo
     *
     * order.update
     *
     * @param  string $order_id Defines the orders specified by order id (required)
     * @param  string|null $store_id Defines store id where the order should be found (optional)
     * @param  string|null $order_status Defines new order&#39;s status (optional)
     * @param  string|null $financial_status Update order financial status to specified (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $cancellation_reason Defines the cancellation reason when the order will be canceled (optional)
     * @param  string|null $order_payment_method Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)
     * @param  string|null $comment Specifies order comment (optional)
     * @param  string|null $admin_comment Specifies admin&#39;s order comment (optional)
     * @param  string|null $admin_private_comment Specifies private admin&#39;s order comment (optional)
     * @param  string|null $invoice_admin_comment Specifies admin&#39;s order invoice comment (optional)
     * @param  string|null $date_modified Specifies order&#39;s  modification date (optional)
     * @param  string|null $date_finished Specifies order&#39;s  finished date (optional)
     * @param  bool|null $send_notifications Send notifications to customer after order was created (optional, default to false)
     * @param  bool|null $create_invoice Determines whether an invoice should be created if it has not already been created (optional)
     * @param  string|null $origin The source of the order (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderUpdateAsyncWithHttpInfo($order_id, $store_id = null, $order_status = null, $financial_status = null, $fulfillment_status = null, $cancellation_reason = null, $order_payment_method = null, $comment = null, $admin_comment = null, $admin_private_comment = null, $invoice_admin_comment = null, $date_modified = null, $date_finished = null, $send_notifications = false, $create_invoice = null, $origin = null, $tags = null, string $contentType = self::contentTypes['orderUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccountConfigUpdate200Response';
        $request = $this->orderUpdateRequest($order_id, $store_id, $order_status, $financial_status, $fulfillment_status, $cancellation_reason, $order_payment_method, $comment, $admin_comment, $admin_private_comment, $invoice_admin_comment, $date_modified, $date_finished, $send_notifications, $create_invoice, $origin, $tags, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderUpdate'
     *
     * @param  string $order_id Defines the orders specified by order id (required)
     * @param  string|null $store_id Defines store id where the order should be found (optional)
     * @param  string|null $order_status Defines new order&#39;s status (optional)
     * @param  string|null $financial_status Update order financial status to specified (optional)
     * @param  string|null $fulfillment_status Create order with fulfillment status (optional)
     * @param  string|null $cancellation_reason Defines the cancellation reason when the order will be canceled (optional)
     * @param  string|null $order_payment_method Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)
     * @param  string|null $comment Specifies order comment (optional)
     * @param  string|null $admin_comment Specifies admin&#39;s order comment (optional)
     * @param  string|null $admin_private_comment Specifies private admin&#39;s order comment (optional)
     * @param  string|null $invoice_admin_comment Specifies admin&#39;s order invoice comment (optional)
     * @param  string|null $date_modified Specifies order&#39;s  modification date (optional)
     * @param  string|null $date_finished Specifies order&#39;s  finished date (optional)
     * @param  bool|null $send_notifications Send notifications to customer after order was created (optional, default to false)
     * @param  bool|null $create_invoice Determines whether an invoice should be created if it has not already been created (optional)
     * @param  string|null $origin The source of the order (optional)
     * @param  string|null $tags Order tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderUpdateRequest($order_id, $store_id = null, $order_status = null, $financial_status = null, $fulfillment_status = null, $cancellation_reason = null, $order_payment_method = null, $comment = null, $admin_comment = null, $admin_private_comment = null, $invoice_admin_comment = null, $date_modified = null, $date_finished = null, $send_notifications = false, $create_invoice = null, $origin = null, $tags = null, string $contentType = self::contentTypes['orderUpdate'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderUpdate'
            );
        }


















        $resourcePath = '/order.update.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'order_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'store_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_status,
            'order_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $financial_status,
            'financial_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fulfillment_status,
            'fulfillment_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cancellation_reason,
            'cancellation_reason', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_payment_method,
            'order_payment_method', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $comment,
            'comment', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $admin_comment,
            'admin_comment', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $admin_private_comment,
            'admin_private_comment', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $invoice_admin_comment,
            'invoice_admin_comment', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_modified,
            'date_modified', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_finished,
            'date_finished', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $send_notifications,
            'send_notifications', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $create_invoice,
            'create_invoice', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $origin,
            'origin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-store-key');
        if ($apiKey !== null) {
            $headers['x-store-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
