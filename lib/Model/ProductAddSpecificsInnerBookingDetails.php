<?php
/**
 * ProductAddSpecificsInnerBookingDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductAddSpecificsInnerBookingDetails Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductAddSpecificsInnerBookingDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductAdd_specifics_inner_booking_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'location' => 'string',
        'type' => 'string',
        'session_duration' => 'int',
        'session_gap' => 'int',
        'sessions_count' => 'int',
        'time_strict_value' => 'float',
        'time_strict_type' => 'string',
        'availabilities' => '\OpenAPI\Client\Model\ProductAddSpecificsInnerBookingDetailsAvailabilitiesInner[]',
        'overrides' => '\OpenAPI\Client\Model\ProductAddSpecificsInnerBookingDetailsOverridesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'location' => null,
        'type' => null,
        'session_duration' => null,
        'session_gap' => null,
        'sessions_count' => null,
        'time_strict_value' => null,
        'time_strict_type' => null,
        'availabilities' => null,
        'overrides' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'location' => false,
        'type' => false,
        'session_duration' => false,
        'session_gap' => false,
        'sessions_count' => false,
        'time_strict_value' => false,
        'time_strict_type' => false,
        'availabilities' => false,
        'overrides' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'location' => 'location',
        'type' => 'type',
        'session_duration' => 'session_duration',
        'session_gap' => 'session_gap',
        'sessions_count' => 'sessions_count',
        'time_strict_value' => 'time_strict_value',
        'time_strict_type' => 'time_strict_type',
        'availabilities' => 'availabilities',
        'overrides' => 'overrides'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'location' => 'setLocation',
        'type' => 'setType',
        'session_duration' => 'setSessionDuration',
        'session_gap' => 'setSessionGap',
        'sessions_count' => 'setSessionsCount',
        'time_strict_value' => 'setTimeStrictValue',
        'time_strict_type' => 'setTimeStrictType',
        'availabilities' => 'setAvailabilities',
        'overrides' => 'setOverrides'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'location' => 'getLocation',
        'type' => 'getType',
        'session_duration' => 'getSessionDuration',
        'session_gap' => 'getSessionGap',
        'sessions_count' => 'getSessionsCount',
        'time_strict_value' => 'getTimeStrictValue',
        'time_strict_type' => 'getTimeStrictType',
        'availabilities' => 'getAvailabilities',
        'overrides' => 'getOverrides'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_DATE = 'date';
    public const TYPE_DATE_TIME = 'date_time';
    public const TIME_STRICT_TYPE_DAYS = 'days';
    public const TIME_STRICT_TYPE_HOURS = 'hours';
    public const TIME_STRICT_TYPE_MINUTES = 'minutes';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DATE,
            self::TYPE_DATE_TIME,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeStrictTypeAllowableValues()
    {
        return [
            self::TIME_STRICT_TYPE_DAYS,
            self::TIME_STRICT_TYPE_HOURS,
            self::TIME_STRICT_TYPE_MINUTES,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('session_duration', $data ?? [], null);
        $this->setIfExists('session_gap', $data ?? [], null);
        $this->setIfExists('sessions_count', $data ?? [], null);
        $this->setIfExists('time_strict_value', $data ?? [], null);
        $this->setIfExists('time_strict_type', $data ?? [], 'days');
        $this->setIfExists('availabilities', $data ?? [], null);
        $this->setIfExists('overrides', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ((mb_strlen($this->container['location']) < 1)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['sessions_count'] === null) {
            $invalidProperties[] = "'sessions_count' can't be null";
        }
        if ($this->container['time_strict_value'] === null) {
            $invalidProperties[] = "'time_strict_value' can't be null";
        }
        if ($this->container['time_strict_type'] === null) {
            $invalidProperties[] = "'time_strict_type' can't be null";
        }
        $allowedValues = $this->getTimeStrictTypeAllowableValues();
        if (!is_null($this->container['time_strict_type']) && !in_array($this->container['time_strict_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'time_strict_type', must be one of '%s'",
                $this->container['time_strict_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['availabilities'] === null) {
            $invalidProperties[] = "'availabilities' can't be null";
        }
        if ((count($this->container['availabilities']) < 1)) {
            $invalidProperties[] = "invalid value for 'availabilities', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['overrides']) && (count($this->container['overrides']) < 1)) {
            $invalidProperties[] = "invalid value for 'overrides', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }

        if ((mb_strlen($location) < 1)) {
            throw new \InvalidArgumentException('invalid length for $location when calling ProductAddSpecificsInnerBookingDetails., must be bigger than or equal to 1.');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets session_duration
     *
     * @return int|null
     */
    public function getSessionDuration()
    {
        return $this->container['session_duration'];
    }

    /**
     * Sets session_duration
     *
     * @param int|null $session_duration session_duration
     *
     * @return self
     */
    public function setSessionDuration($session_duration)
    {
        if (is_null($session_duration)) {
            throw new \InvalidArgumentException('non-nullable session_duration cannot be null');
        }
        $this->container['session_duration'] = $session_duration;

        return $this;
    }

    /**
     * Gets session_gap
     *
     * @return int|null
     */
    public function getSessionGap()
    {
        return $this->container['session_gap'];
    }

    /**
     * Sets session_gap
     *
     * @param int|null $session_gap session_gap
     *
     * @return self
     */
    public function setSessionGap($session_gap)
    {
        if (is_null($session_gap)) {
            throw new \InvalidArgumentException('non-nullable session_gap cannot be null');
        }
        $this->container['session_gap'] = $session_gap;

        return $this;
    }

    /**
     * Gets sessions_count
     *
     * @return int
     */
    public function getSessionsCount()
    {
        return $this->container['sessions_count'];
    }

    /**
     * Sets sessions_count
     *
     * @param int $sessions_count sessions_count
     *
     * @return self
     */
    public function setSessionsCount($sessions_count)
    {
        if (is_null($sessions_count)) {
            throw new \InvalidArgumentException('non-nullable sessions_count cannot be null');
        }
        $this->container['sessions_count'] = $sessions_count;

        return $this;
    }

    /**
     * Gets time_strict_value
     *
     * @return float
     */
    public function getTimeStrictValue()
    {
        return $this->container['time_strict_value'];
    }

    /**
     * Sets time_strict_value
     *
     * @param float $time_strict_value time_strict_value
     *
     * @return self
     */
    public function setTimeStrictValue($time_strict_value)
    {
        if (is_null($time_strict_value)) {
            throw new \InvalidArgumentException('non-nullable time_strict_value cannot be null');
        }
        $this->container['time_strict_value'] = $time_strict_value;

        return $this;
    }

    /**
     * Gets time_strict_type
     *
     * @return string
     */
    public function getTimeStrictType()
    {
        return $this->container['time_strict_type'];
    }

    /**
     * Sets time_strict_type
     *
     * @param string $time_strict_type time_strict_type
     *
     * @return self
     */
    public function setTimeStrictType($time_strict_type)
    {
        if (is_null($time_strict_type)) {
            throw new \InvalidArgumentException('non-nullable time_strict_type cannot be null');
        }
        $allowedValues = $this->getTimeStrictTypeAllowableValues();
        if (!in_array($time_strict_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'time_strict_type', must be one of '%s'",
                    $time_strict_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['time_strict_type'] = $time_strict_type;

        return $this;
    }

    /**
     * Gets availabilities
     *
     * @return \OpenAPI\Client\Model\ProductAddSpecificsInnerBookingDetailsAvailabilitiesInner[]
     */
    public function getAvailabilities()
    {
        return $this->container['availabilities'];
    }

    /**
     * Sets availabilities
     *
     * @param \OpenAPI\Client\Model\ProductAddSpecificsInnerBookingDetailsAvailabilitiesInner[] $availabilities availabilities
     *
     * @return self
     */
    public function setAvailabilities($availabilities)
    {
        if (is_null($availabilities)) {
            throw new \InvalidArgumentException('non-nullable availabilities cannot be null');
        }


        if ((count($availabilities) < 1)) {
            throw new \InvalidArgumentException('invalid length for $availabilities when calling ProductAddSpecificsInnerBookingDetails., number of items must be greater than or equal to 1.');
        }
        $this->container['availabilities'] = $availabilities;

        return $this;
    }

    /**
     * Gets overrides
     *
     * @return \OpenAPI\Client\Model\ProductAddSpecificsInnerBookingDetailsOverridesInner[]|null
     */
    public function getOverrides()
    {
        return $this->container['overrides'];
    }

    /**
     * Sets overrides
     *
     * @param \OpenAPI\Client\Model\ProductAddSpecificsInnerBookingDetailsOverridesInner[]|null $overrides overrides
     *
     * @return self
     */
    public function setOverrides($overrides)
    {
        if (is_null($overrides)) {
            throw new \InvalidArgumentException('non-nullable overrides cannot be null');
        }


        if ((count($overrides) < 1)) {
            throw new \InvalidArgumentException('invalid length for $overrides when calling ProductAddSpecificsInnerBookingDetails., number of items must be greater than or equal to 1.');
        }
        $this->container['overrides'] = $overrides;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


