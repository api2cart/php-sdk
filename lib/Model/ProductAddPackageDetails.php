<?php
/**
 * ProductAddPackageDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductAddPackageDetails Class Doc Comment
 *
 * @category Class
 * @description If the seller is subscribed to \&quot;Business Policies\&quot;, use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.&lt;hr&gt;&lt;div style&#x3D;\&quot;font-style:normal\&quot;&gt;Param structure:&lt;div style&#x3D;\&quot;margin-left: 2%;\&quot;&gt;&lt;code style&#x3D;\&quot;padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\&quot;&gt;package_details[&lt;b&gt;measure_unit&lt;/b&gt;] &#x3D; string&lt;/br&gt; Allowed measure_unit values: [English or Metric] &lt;/br&gt; Default: Metric&lt;/br&gt;package_details[&lt;b&gt;weigh_unit&lt;/b&gt;] &#x3D; string&lt;/br&gt; Allowed weigh_unit values: [kg, g, lbs, oz]&lt;/br&gt;package_details[&lt;b&gt;package_depth&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;package_length&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;package_width&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;weight_major&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;weight_minor&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;shipping_package&lt;/b&gt;] &#x3D; string&lt;/br&gt; See cart.info method, param &#x60;eBay_shipping_package_details&#x60;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductAddPackageDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductAdd_package_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'measure_unit' => 'string',
        'weigh_unit' => 'string',
        'package_depth' => 'float',
        'package_length' => 'float',
        'package_width' => 'float',
        'weight_major' => 'float',
        'weight_minor' => 'float',
        'shipping_package' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'measure_unit' => null,
        'weigh_unit' => null,
        'package_depth' => null,
        'package_length' => null,
        'package_width' => null,
        'weight_major' => null,
        'weight_minor' => null,
        'shipping_package' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'measure_unit' => false,
        'weigh_unit' => false,
        'package_depth' => false,
        'package_length' => false,
        'package_width' => false,
        'weight_major' => false,
        'weight_minor' => false,
        'shipping_package' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'measure_unit' => 'measure_unit',
        'weigh_unit' => 'weigh_unit',
        'package_depth' => 'package_depth',
        'package_length' => 'package_length',
        'package_width' => 'package_width',
        'weight_major' => 'weight_major',
        'weight_minor' => 'weight_minor',
        'shipping_package' => 'shipping_package'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'measure_unit' => 'setMeasureUnit',
        'weigh_unit' => 'setWeighUnit',
        'package_depth' => 'setPackageDepth',
        'package_length' => 'setPackageLength',
        'package_width' => 'setPackageWidth',
        'weight_major' => 'setWeightMajor',
        'weight_minor' => 'setWeightMinor',
        'shipping_package' => 'setShippingPackage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'measure_unit' => 'getMeasureUnit',
        'weigh_unit' => 'getWeighUnit',
        'package_depth' => 'getPackageDepth',
        'package_length' => 'getPackageLength',
        'package_width' => 'getPackageWidth',
        'weight_major' => 'getWeightMajor',
        'weight_minor' => 'getWeightMinor',
        'shipping_package' => 'getShippingPackage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('measure_unit', $data ?? [], null);
        $this->setIfExists('weigh_unit', $data ?? [], null);
        $this->setIfExists('package_depth', $data ?? [], null);
        $this->setIfExists('package_length', $data ?? [], null);
        $this->setIfExists('package_width', $data ?? [], null);
        $this->setIfExists('weight_major', $data ?? [], null);
        $this->setIfExists('weight_minor', $data ?? [], null);
        $this->setIfExists('shipping_package', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets measure_unit
     *
     * @return string|null
     */
    public function getMeasureUnit()
    {
        return $this->container['measure_unit'];
    }

    /**
     * Sets measure_unit
     *
     * @param string|null $measure_unit measure_unit
     *
     * @return self
     */
    public function setMeasureUnit($measure_unit)
    {
        if (is_null($measure_unit)) {
            throw new \InvalidArgumentException('non-nullable measure_unit cannot be null');
        }
        $this->container['measure_unit'] = $measure_unit;

        return $this;
    }

    /**
     * Gets weigh_unit
     *
     * @return string|null
     */
    public function getWeighUnit()
    {
        return $this->container['weigh_unit'];
    }

    /**
     * Sets weigh_unit
     *
     * @param string|null $weigh_unit weigh_unit
     *
     * @return self
     */
    public function setWeighUnit($weigh_unit)
    {
        if (is_null($weigh_unit)) {
            throw new \InvalidArgumentException('non-nullable weigh_unit cannot be null');
        }
        $this->container['weigh_unit'] = $weigh_unit;

        return $this;
    }

    /**
     * Gets package_depth
     *
     * @return float|null
     */
    public function getPackageDepth()
    {
        return $this->container['package_depth'];
    }

    /**
     * Sets package_depth
     *
     * @param float|null $package_depth package_depth
     *
     * @return self
     */
    public function setPackageDepth($package_depth)
    {
        if (is_null($package_depth)) {
            throw new \InvalidArgumentException('non-nullable package_depth cannot be null');
        }
        $this->container['package_depth'] = $package_depth;

        return $this;
    }

    /**
     * Gets package_length
     *
     * @return float|null
     */
    public function getPackageLength()
    {
        return $this->container['package_length'];
    }

    /**
     * Sets package_length
     *
     * @param float|null $package_length package_length
     *
     * @return self
     */
    public function setPackageLength($package_length)
    {
        if (is_null($package_length)) {
            throw new \InvalidArgumentException('non-nullable package_length cannot be null');
        }
        $this->container['package_length'] = $package_length;

        return $this;
    }

    /**
     * Gets package_width
     *
     * @return float|null
     */
    public function getPackageWidth()
    {
        return $this->container['package_width'];
    }

    /**
     * Sets package_width
     *
     * @param float|null $package_width package_width
     *
     * @return self
     */
    public function setPackageWidth($package_width)
    {
        if (is_null($package_width)) {
            throw new \InvalidArgumentException('non-nullable package_width cannot be null');
        }
        $this->container['package_width'] = $package_width;

        return $this;
    }

    /**
     * Gets weight_major
     *
     * @return float|null
     */
    public function getWeightMajor()
    {
        return $this->container['weight_major'];
    }

    /**
     * Sets weight_major
     *
     * @param float|null $weight_major weight_major
     *
     * @return self
     */
    public function setWeightMajor($weight_major)
    {
        if (is_null($weight_major)) {
            throw new \InvalidArgumentException('non-nullable weight_major cannot be null');
        }
        $this->container['weight_major'] = $weight_major;

        return $this;
    }

    /**
     * Gets weight_minor
     *
     * @return float|null
     */
    public function getWeightMinor()
    {
        return $this->container['weight_minor'];
    }

    /**
     * Sets weight_minor
     *
     * @param float|null $weight_minor weight_minor
     *
     * @return self
     */
    public function setWeightMinor($weight_minor)
    {
        if (is_null($weight_minor)) {
            throw new \InvalidArgumentException('non-nullable weight_minor cannot be null');
        }
        $this->container['weight_minor'] = $weight_minor;

        return $this;
    }

    /**
     * Gets shipping_package
     *
     * @return string|null
     */
    public function getShippingPackage()
    {
        return $this->container['shipping_package'];
    }

    /**
     * Sets shipping_package
     *
     * @param string|null $shipping_package shipping_package
     *
     * @return self
     */
    public function setShippingPackage($shipping_package)
    {
        if (is_null($shipping_package)) {
            throw new \InvalidArgumentException('non-nullable shipping_package cannot be null');
        }
        $this->container['shipping_package'] = $shipping_package;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


