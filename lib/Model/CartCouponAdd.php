<?php
/**
 * CartCouponAdd
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CartCouponAdd Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CartCouponAdd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CartCouponAdd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'action_type' => 'string',
        'action_apply_to' => 'string',
        'action_scope' => 'string',
        'action_amount' => 'float',
        'codes' => 'string[]',
        'name' => 'string',
        'date_start' => 'string',
        'date_end' => 'string',
        'usage_limit' => 'int',
        'usage_limit_per_customer' => 'int',
        'action_condition_entity' => 'string',
        'action_condition_key' => 'string',
        'action_condition_operator' => 'string',
        'action_condition_value' => 'string',
        'include_tax' => 'bool',
        'store_id' => 'string',
        'free_cash_on_delivery' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'action_type' => null,
        'action_apply_to' => null,
        'action_scope' => null,
        'action_amount' => null,
        'codes' => null,
        'name' => null,
        'date_start' => null,
        'date_end' => null,
        'usage_limit' => null,
        'usage_limit_per_customer' => null,
        'action_condition_entity' => null,
        'action_condition_key' => null,
        'action_condition_operator' => null,
        'action_condition_value' => null,
        'include_tax' => null,
        'store_id' => null,
        'free_cash_on_delivery' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => false,
        'action_type' => false,
        'action_apply_to' => false,
        'action_scope' => false,
        'action_amount' => false,
        'codes' => false,
        'name' => false,
        'date_start' => false,
        'date_end' => false,
        'usage_limit' => false,
        'usage_limit_per_customer' => false,
        'action_condition_entity' => false,
        'action_condition_key' => false,
        'action_condition_operator' => false,
        'action_condition_value' => false,
        'include_tax' => false,
        'store_id' => false,
        'free_cash_on_delivery' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'action_type' => 'action_type',
        'action_apply_to' => 'action_apply_to',
        'action_scope' => 'action_scope',
        'action_amount' => 'action_amount',
        'codes' => 'codes',
        'name' => 'name',
        'date_start' => 'date_start',
        'date_end' => 'date_end',
        'usage_limit' => 'usage_limit',
        'usage_limit_per_customer' => 'usage_limit_per_customer',
        'action_condition_entity' => 'action_condition_entity',
        'action_condition_key' => 'action_condition_key',
        'action_condition_operator' => 'action_condition_operator',
        'action_condition_value' => 'action_condition_value',
        'include_tax' => 'include_tax',
        'store_id' => 'store_id',
        'free_cash_on_delivery' => 'free_cash_on_delivery'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'action_type' => 'setActionType',
        'action_apply_to' => 'setActionApplyTo',
        'action_scope' => 'setActionScope',
        'action_amount' => 'setActionAmount',
        'codes' => 'setCodes',
        'name' => 'setName',
        'date_start' => 'setDateStart',
        'date_end' => 'setDateEnd',
        'usage_limit' => 'setUsageLimit',
        'usage_limit_per_customer' => 'setUsageLimitPerCustomer',
        'action_condition_entity' => 'setActionConditionEntity',
        'action_condition_key' => 'setActionConditionKey',
        'action_condition_operator' => 'setActionConditionOperator',
        'action_condition_value' => 'setActionConditionValue',
        'include_tax' => 'setIncludeTax',
        'store_id' => 'setStoreId',
        'free_cash_on_delivery' => 'setFreeCashOnDelivery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'action_type' => 'getActionType',
        'action_apply_to' => 'getActionApplyTo',
        'action_scope' => 'getActionScope',
        'action_amount' => 'getActionAmount',
        'codes' => 'getCodes',
        'name' => 'getName',
        'date_start' => 'getDateStart',
        'date_end' => 'getDateEnd',
        'usage_limit' => 'getUsageLimit',
        'usage_limit_per_customer' => 'getUsageLimitPerCustomer',
        'action_condition_entity' => 'getActionConditionEntity',
        'action_condition_key' => 'getActionConditionKey',
        'action_condition_operator' => 'getActionConditionOperator',
        'action_condition_value' => 'getActionConditionValue',
        'include_tax' => 'getIncludeTax',
        'store_id' => 'getStoreId',
        'free_cash_on_delivery' => 'getFreeCashOnDelivery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACTION_TYPE_PERCENT = 'percent';
    public const ACTION_TYPE_FIXED = 'fixed';
    public const ACTION_APPLY_TO_ORDER_TOTAL = 'order_total';
    public const ACTION_APPLY_TO_ITEM_PRICE = 'item_price';
    public const ACTION_APPLY_TO_SHIPPING = 'shipping';
    public const ACTION_SCOPE_ORDER = 'order';
    public const ACTION_SCOPE_MATCHING_ITEMS = 'matching_items';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionTypeAllowableValues()
    {
        return [
            self::ACTION_TYPE_PERCENT,
            self::ACTION_TYPE_FIXED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionApplyToAllowableValues()
    {
        return [
            self::ACTION_APPLY_TO_ORDER_TOTAL,
            self::ACTION_APPLY_TO_ITEM_PRICE,
            self::ACTION_APPLY_TO_SHIPPING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionScopeAllowableValues()
    {
        return [
            self::ACTION_SCOPE_ORDER,
            self::ACTION_SCOPE_MATCHING_ITEMS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('action_type', $data ?? [], null);
        $this->setIfExists('action_apply_to', $data ?? [], null);
        $this->setIfExists('action_scope', $data ?? [], null);
        $this->setIfExists('action_amount', $data ?? [], null);
        $this->setIfExists('codes', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('date_start', $data ?? [], 'now');
        $this->setIfExists('date_end', $data ?? [], null);
        $this->setIfExists('usage_limit', $data ?? [], null);
        $this->setIfExists('usage_limit_per_customer', $data ?? [], null);
        $this->setIfExists('action_condition_entity', $data ?? [], null);
        $this->setIfExists('action_condition_key', $data ?? [], null);
        $this->setIfExists('action_condition_operator', $data ?? [], null);
        $this->setIfExists('action_condition_value', $data ?? [], null);
        $this->setIfExists('include_tax', $data ?? [], false);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('free_cash_on_delivery', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['action_type'] === null) {
            $invalidProperties[] = "'action_type' can't be null";
        }
        $allowedValues = $this->getActionTypeAllowableValues();
        if (!is_null($this->container['action_type']) && !in_array($this->container['action_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action_type', must be one of '%s'",
                $this->container['action_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['action_apply_to'] === null) {
            $invalidProperties[] = "'action_apply_to' can't be null";
        }
        $allowedValues = $this->getActionApplyToAllowableValues();
        if (!is_null($this->container['action_apply_to']) && !in_array($this->container['action_apply_to'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action_apply_to', must be one of '%s'",
                $this->container['action_apply_to'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['action_scope'] === null) {
            $invalidProperties[] = "'action_scope' can't be null";
        }
        $allowedValues = $this->getActionScopeAllowableValues();
        if (!is_null($this->container['action_scope']) && !in_array($this->container['action_scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action_scope', must be one of '%s'",
                $this->container['action_scope'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['action_amount'] === null) {
            $invalidProperties[] = "'action_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Coupon code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets action_type
     *
     * @return string
     */
    public function getActionType()
    {
        return $this->container['action_type'];
    }

    /**
     * Sets action_type
     *
     * @param string $action_type Coupon discount type
     *
     * @return self
     */
    public function setActionType($action_type)
    {
        if (is_null($action_type)) {
            throw new \InvalidArgumentException('non-nullable action_type cannot be null');
        }
        $allowedValues = $this->getActionTypeAllowableValues();
        if (!in_array($action_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action_type', must be one of '%s'",
                    $action_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action_type'] = $action_type;

        return $this;
    }

    /**
     * Gets action_apply_to
     *
     * @return string
     */
    public function getActionApplyTo()
    {
        return $this->container['action_apply_to'];
    }

    /**
     * Sets action_apply_to
     *
     * @param string $action_apply_to Defines where discount should be applied
     *
     * @return self
     */
    public function setActionApplyTo($action_apply_to)
    {
        if (is_null($action_apply_to)) {
            throw new \InvalidArgumentException('non-nullable action_apply_to cannot be null');
        }
        $allowedValues = $this->getActionApplyToAllowableValues();
        if (!in_array($action_apply_to, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action_apply_to', must be one of '%s'",
                    $action_apply_to,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action_apply_to'] = $action_apply_to;

        return $this;
    }

    /**
     * Gets action_scope
     *
     * @return string
     */
    public function getActionScope()
    {
        return $this->container['action_scope'];
    }

    /**
     * Sets action_scope
     *
     * @param string $action_scope Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
     *
     * @return self
     */
    public function setActionScope($action_scope)
    {
        if (is_null($action_scope)) {
            throw new \InvalidArgumentException('non-nullable action_scope cannot be null');
        }
        $allowedValues = $this->getActionScopeAllowableValues();
        if (!in_array($action_scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action_scope', must be one of '%s'",
                    $action_scope,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action_scope'] = $action_scope;

        return $this;
    }

    /**
     * Gets action_amount
     *
     * @return float
     */
    public function getActionAmount()
    {
        return $this->container['action_amount'];
    }

    /**
     * Sets action_amount
     *
     * @param float $action_amount Defines the discount amount value.
     *
     * @return self
     */
    public function setActionAmount($action_amount)
    {
        if (is_null($action_amount)) {
            throw new \InvalidArgumentException('non-nullable action_amount cannot be null');
        }
        $this->container['action_amount'] = $action_amount;

        return $this;
    }

    /**
     * Gets codes
     *
     * @return string[]|null
     */
    public function getCodes()
    {
        return $this->container['codes'];
    }

    /**
     * Sets codes
     *
     * @param string[]|null $codes Entity codes
     *
     * @return self
     */
    public function setCodes($codes)
    {
        if (is_null($codes)) {
            throw new \InvalidArgumentException('non-nullable codes cannot be null');
        }
        $this->container['codes'] = $codes;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Coupon name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets date_start
     *
     * @return string|null
     */
    public function getDateStart()
    {
        return $this->container['date_start'];
    }

    /**
     * Sets date_start
     *
     * @param string|null $date_start Date start
     *
     * @return self
     */
    public function setDateStart($date_start)
    {
        if (is_null($date_start)) {
            throw new \InvalidArgumentException('non-nullable date_start cannot be null');
        }
        $this->container['date_start'] = $date_start;

        return $this;
    }

    /**
     * Gets date_end
     *
     * @return string|null
     */
    public function getDateEnd()
    {
        return $this->container['date_end'];
    }

    /**
     * Sets date_end
     *
     * @param string|null $date_end Defines when discount code will be expired.
     *
     * @return self
     */
    public function setDateEnd($date_end)
    {
        if (is_null($date_end)) {
            throw new \InvalidArgumentException('non-nullable date_end cannot be null');
        }
        $this->container['date_end'] = $date_end;

        return $this;
    }

    /**
     * Gets usage_limit
     *
     * @return int|null
     */
    public function getUsageLimit()
    {
        return $this->container['usage_limit'];
    }

    /**
     * Sets usage_limit
     *
     * @param int|null $usage_limit Usage limit for coupon.
     *
     * @return self
     */
    public function setUsageLimit($usage_limit)
    {
        if (is_null($usage_limit)) {
            throw new \InvalidArgumentException('non-nullable usage_limit cannot be null');
        }
        $this->container['usage_limit'] = $usage_limit;

        return $this;
    }

    /**
     * Gets usage_limit_per_customer
     *
     * @return int|null
     */
    public function getUsageLimitPerCustomer()
    {
        return $this->container['usage_limit_per_customer'];
    }

    /**
     * Sets usage_limit_per_customer
     *
     * @param int|null $usage_limit_per_customer Usage limit per customer.
     *
     * @return self
     */
    public function setUsageLimitPerCustomer($usage_limit_per_customer)
    {
        if (is_null($usage_limit_per_customer)) {
            throw new \InvalidArgumentException('non-nullable usage_limit_per_customer cannot be null');
        }
        $this->container['usage_limit_per_customer'] = $usage_limit_per_customer;

        return $this;
    }

    /**
     * Gets action_condition_entity
     *
     * @return string|null
     */
    public function getActionConditionEntity()
    {
        return $this->container['action_condition_entity'];
    }

    /**
     * Sets action_condition_entity
     *
     * @param string|null $action_condition_entity Defines entity for action condition.
     *
     * @return self
     */
    public function setActionConditionEntity($action_condition_entity)
    {
        if (is_null($action_condition_entity)) {
            throw new \InvalidArgumentException('non-nullable action_condition_entity cannot be null');
        }
        $this->container['action_condition_entity'] = $action_condition_entity;

        return $this;
    }

    /**
     * Gets action_condition_key
     *
     * @return string|null
     */
    public function getActionConditionKey()
    {
        return $this->container['action_condition_key'];
    }

    /**
     * Sets action_condition_key
     *
     * @param string|null $action_condition_key Defines entity attribute code for action condition.
     *
     * @return self
     */
    public function setActionConditionKey($action_condition_key)
    {
        if (is_null($action_condition_key)) {
            throw new \InvalidArgumentException('non-nullable action_condition_key cannot be null');
        }
        $this->container['action_condition_key'] = $action_condition_key;

        return $this;
    }

    /**
     * Gets action_condition_operator
     *
     * @return string|null
     */
    public function getActionConditionOperator()
    {
        return $this->container['action_condition_operator'];
    }

    /**
     * Sets action_condition_operator
     *
     * @param string|null $action_condition_operator Defines condition operator.
     *
     * @return self
     */
    public function setActionConditionOperator($action_condition_operator)
    {
        if (is_null($action_condition_operator)) {
            throw new \InvalidArgumentException('non-nullable action_condition_operator cannot be null');
        }
        $this->container['action_condition_operator'] = $action_condition_operator;

        return $this;
    }

    /**
     * Gets action_condition_value
     *
     * @return string|null
     */
    public function getActionConditionValue()
    {
        return $this->container['action_condition_value'];
    }

    /**
     * Sets action_condition_value
     *
     * @param string|null $action_condition_value Defines condition attribute value/s. Can be comma separated string.
     *
     * @return self
     */
    public function setActionConditionValue($action_condition_value)
    {
        if (is_null($action_condition_value)) {
            throw new \InvalidArgumentException('non-nullable action_condition_value cannot be null');
        }
        $this->container['action_condition_value'] = $action_condition_value;

        return $this;
    }

    /**
     * Gets include_tax
     *
     * @return bool|null
     */
    public function getIncludeTax()
    {
        return $this->container['include_tax'];
    }

    /**
     * Sets include_tax
     *
     * @param bool|null $include_tax Indicates whether to apply a discount for taxes.
     *
     * @return self
     */
    public function setIncludeTax($include_tax)
    {
        if (is_null($include_tax)) {
            throw new \InvalidArgumentException('non-nullable include_tax cannot be null');
        }
        $this->container['include_tax'] = $include_tax;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id Store Id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets free_cash_on_delivery
     *
     * @return bool|null
     */
    public function getFreeCashOnDelivery()
    {
        return $this->container['free_cash_on_delivery'];
    }

    /**
     * Sets free_cash_on_delivery
     *
     * @param bool|null $free_cash_on_delivery Defines whether the coupon provides free cash on delivery
     *
     * @return self
     */
    public function setFreeCashOnDelivery($free_cash_on_delivery)
    {
        if (is_null($free_cash_on_delivery)) {
            throw new \InvalidArgumentException('non-nullable free_cash_on_delivery cannot be null');
        }
        $this->container['free_cash_on_delivery'] = $free_cash_on_delivery;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


