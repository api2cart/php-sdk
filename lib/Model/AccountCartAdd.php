<?php
/**
 * AccountCartAdd
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountCartAdd Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountCartAdd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountCartAdd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cart_id' => 'string',
        'store_url' => 'string',
        'bridge_url' => 'string',
        'store_root' => 'string',
        'store_key' => 'string',
        'validate_version' => 'bool',
        'verify' => 'bool',
        'db_tables_prefix' => 'string',
        'user_agent' => 'string',
        'ftp_host' => 'string',
        'ftp_user' => 'string',
        'ftp_password' => 'string',
        'ftp_port' => 'int',
        'ftp_store_dir' => 'string',
        '_3dcart_private_key' => 'string',
        '_3dcart_access_token' => 'string',
        '_3dcartapi_api_key' => 'string',
        'amazon_sp_client_id' => 'string',
        'amazon_sp_client_secret' => 'string',
        'amazon_sp_refresh_token' => 'string',
        'amazon_sp_aws_region' => 'string',
        'amazon_sp_api_environment' => 'string',
        'amazon_seller_id' => 'string',
        'aspdotnetstorefront_api_user' => 'string',
        'aspdotnetstorefront_api_pass' => 'string',
        'bigcommerceapi_admin_account' => 'string',
        'bigcommerceapi_api_path' => 'string',
        'bigcommerceapi_api_key' => 'string',
        'bigcommerceapi_client_id' => 'string',
        'bigcommerceapi_access_token' => 'string',
        'bigcommerceapi_context' => 'string',
        'bol_api_key' => 'string',
        'bol_api_secret' => 'string',
        'bol_retailer_id' => 'int',
        'bigcartel_user_name' => 'string',
        'bigcartel_password' => 'string',
        'bricklink_consumer_key' => 'string',
        'bricklink_consumer_secret' => 'string',
        'bricklink_token' => 'string',
        'bricklink_token_secret' => 'string',
        'demandware_client_id' => 'string',
        'demandware_api_password' => 'string',
        'demandware_user_name' => 'string',
        'demandware_user_password' => 'string',
        'ebay_client_id' => 'string',
        'ebay_client_secret' => 'string',
        'ebay_runame' => 'string',
        'ebay_access_token' => 'string',
        'ebay_refresh_token' => 'string',
        'ebay_environment' => 'string',
        'ebay_site_id' => 'int',
        'walmart_client_id' => 'string',
        'walmart_client_secret' => 'string',
        'walmart_environment' => 'string',
        'walmart_channel_type' => 'string',
        'walmart_region' => 'string',
        'ecwid_acess_token' => 'string',
        'ecwid_store_id' => 'string',
        'lazada_app_id' => 'string',
        'lazada_app_secret' => 'string',
        'lazada_refresh_token' => 'string',
        'lazada_region' => 'string',
        'lightspeed_api_key' => 'string',
        'lightspeed_api_secret' => 'string',
        'etsy_keystring' => 'string',
        'etsy_shared_secret' => 'string',
        'etsy_access_token' => 'string',
        'etsy_token_secret' => 'string',
        'etsy_client_id' => 'string',
        'etsy_refresh_token' => 'string',
        'facebook_app_id' => 'string',
        'facebook_app_secret' => 'string',
        'facebook_access_token' => 'string',
        'facebook_business_id' => 'string',
        'neto_api_key' => 'string',
        'neto_api_username' => 'string',
        'shopline_access_token' => 'string',
        'shopline_app_key' => 'string',
        'shopline_app_secret' => 'string',
        'shopline_shared_secret' => 'string',
        'shopify_access_token' => 'string',
        'shopify_api_key' => 'string',
        'shopify_api_password' => 'string',
        'shopify_shared_secret' => 'string',
        'shopee_partner_id' => 'string',
        'shopee_partner_key' => 'string',
        'shopee_shop_id' => 'string',
        'shopee_refresh_token' => 'string',
        'shopee_region' => 'string',
        'shopee_environment' => 'string',
        'shoplazza_access_token' => 'string',
        'shoplazza_shared_secret' => 'string',
        'shopware_access_key' => 'string',
        'shopware_api_key' => 'string',
        'shopware_api_secret' => 'string',
        'miva_access_token' => 'string',
        'miva_signature' => 'string',
        'tiendanube_user_id' => 'int',
        'tiendanube_access_token' => 'string',
        'tiendanube_client_secret' => 'string',
        'volusion_login' => 'string',
        'volusion_password' => 'string',
        'hybris_client_id' => 'string',
        'hybris_client_secret' => 'string',
        'hybris_username' => 'string',
        'hybris_password' => 'string',
        'hybris_websites' => '\OpenAPI\Client\Model\AccountCartAddHybrisWebsitesInner[]',
        'square_client_id' => 'string',
        'square_client_secret' => 'string',
        'square_refresh_token' => 'string',
        'squarespace_api_key' => 'string',
        'squarespace_client_id' => 'string',
        'squarespace_client_secret' => 'string',
        'squarespace_access_token' => 'string',
        'squarespace_refresh_token' => 'string',
        'commercehq_api_key' => 'string',
        'commercehq_api_password' => 'string',
        'wc_consumer_key' => 'string',
        'wc_consumer_secret' => 'string',
        'magento_consumer_key' => 'string',
        'magento_consumer_secret' => 'string',
        'magento_access_token' => 'string',
        'magento_token_secret' => 'string',
        'prestashop_webservice_key' => 'string',
        'wix_app_id' => 'string',
        'wix_app_secret_key' => 'string',
        'wix_instance_id' => 'string',
        'wix_refresh_token' => 'string',
        'mercado_libre_app_id' => 'string',
        'mercado_libre_app_secret_key' => 'string',
        'mercado_libre_refresh_token' => 'string',
        'zid_client_id' => 'int',
        'zid_client_secret' => 'string',
        'zid_access_token' => 'string',
        'zid_authorization' => 'string',
        'zid_refresh_token' => 'string',
        'flipkart_client_id' => 'string',
        'flipkart_client_secret' => 'string',
        'allegro_client_id' => 'string',
        'allegro_client_secret' => 'string',
        'allegro_access_token' => 'string',
        'allegro_refresh_token' => 'string',
        'allegro_environment' => 'string',
        'zoho_client_id' => 'string',
        'zoho_client_secret' => 'string',
        'zoho_refresh_token' => 'string',
        'zoho_region' => 'string',
        'otto_client_id' => 'string',
        'otto_client_secret' => 'string',
        'otto_app_id' => 'string',
        'otto_refresh_token' => 'string',
        'otto_environment' => 'string',
        'otto_access_token' => 'string',
        'tiktokshop_app_key' => 'string',
        'tiktokshop_app_secret' => 'string',
        'tiktokshop_refresh_token' => 'string',
        'tiktokshop_access_token' => 'string',
        'salla_client_id' => 'string',
        'salla_client_secret' => 'string',
        'salla_refresh_token' => 'string',
        'salla_access_token' => 'string',
        'temu_app_key' => 'string',
        'temu_app_secret' => 'string',
        'temu_access_token' => 'string',
        'temu_region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cart_id' => null,
        'store_url' => null,
        'bridge_url' => null,
        'store_root' => null,
        'store_key' => null,
        'validate_version' => null,
        'verify' => null,
        'db_tables_prefix' => null,
        'user_agent' => null,
        'ftp_host' => null,
        'ftp_user' => null,
        'ftp_password' => null,
        'ftp_port' => null,
        'ftp_store_dir' => null,
        '_3dcart_private_key' => null,
        '_3dcart_access_token' => null,
        '_3dcartapi_api_key' => null,
        'amazon_sp_client_id' => null,
        'amazon_sp_client_secret' => null,
        'amazon_sp_refresh_token' => null,
        'amazon_sp_aws_region' => null,
        'amazon_sp_api_environment' => null,
        'amazon_seller_id' => null,
        'aspdotnetstorefront_api_user' => null,
        'aspdotnetstorefront_api_pass' => null,
        'bigcommerceapi_admin_account' => null,
        'bigcommerceapi_api_path' => null,
        'bigcommerceapi_api_key' => null,
        'bigcommerceapi_client_id' => null,
        'bigcommerceapi_access_token' => null,
        'bigcommerceapi_context' => null,
        'bol_api_key' => null,
        'bol_api_secret' => null,
        'bol_retailer_id' => null,
        'bigcartel_user_name' => null,
        'bigcartel_password' => null,
        'bricklink_consumer_key' => null,
        'bricklink_consumer_secret' => null,
        'bricklink_token' => null,
        'bricklink_token_secret' => null,
        'demandware_client_id' => null,
        'demandware_api_password' => null,
        'demandware_user_name' => null,
        'demandware_user_password' => null,
        'ebay_client_id' => null,
        'ebay_client_secret' => null,
        'ebay_runame' => null,
        'ebay_access_token' => null,
        'ebay_refresh_token' => null,
        'ebay_environment' => null,
        'ebay_site_id' => null,
        'walmart_client_id' => null,
        'walmart_client_secret' => null,
        'walmart_environment' => null,
        'walmart_channel_type' => null,
        'walmart_region' => null,
        'ecwid_acess_token' => null,
        'ecwid_store_id' => null,
        'lazada_app_id' => null,
        'lazada_app_secret' => null,
        'lazada_refresh_token' => null,
        'lazada_region' => null,
        'lightspeed_api_key' => null,
        'lightspeed_api_secret' => null,
        'etsy_keystring' => null,
        'etsy_shared_secret' => null,
        'etsy_access_token' => null,
        'etsy_token_secret' => null,
        'etsy_client_id' => null,
        'etsy_refresh_token' => null,
        'facebook_app_id' => null,
        'facebook_app_secret' => null,
        'facebook_access_token' => null,
        'facebook_business_id' => null,
        'neto_api_key' => null,
        'neto_api_username' => null,
        'shopline_access_token' => null,
        'shopline_app_key' => null,
        'shopline_app_secret' => null,
        'shopline_shared_secret' => null,
        'shopify_access_token' => null,
        'shopify_api_key' => null,
        'shopify_api_password' => null,
        'shopify_shared_secret' => null,
        'shopee_partner_id' => null,
        'shopee_partner_key' => null,
        'shopee_shop_id' => null,
        'shopee_refresh_token' => null,
        'shopee_region' => null,
        'shopee_environment' => null,
        'shoplazza_access_token' => null,
        'shoplazza_shared_secret' => null,
        'shopware_access_key' => null,
        'shopware_api_key' => null,
        'shopware_api_secret' => null,
        'miva_access_token' => null,
        'miva_signature' => null,
        'tiendanube_user_id' => null,
        'tiendanube_access_token' => null,
        'tiendanube_client_secret' => null,
        'volusion_login' => null,
        'volusion_password' => null,
        'hybris_client_id' => null,
        'hybris_client_secret' => null,
        'hybris_username' => null,
        'hybris_password' => null,
        'hybris_websites' => null,
        'square_client_id' => null,
        'square_client_secret' => null,
        'square_refresh_token' => null,
        'squarespace_api_key' => null,
        'squarespace_client_id' => null,
        'squarespace_client_secret' => null,
        'squarespace_access_token' => null,
        'squarespace_refresh_token' => null,
        'commercehq_api_key' => null,
        'commercehq_api_password' => null,
        'wc_consumer_key' => null,
        'wc_consumer_secret' => null,
        'magento_consumer_key' => null,
        'magento_consumer_secret' => null,
        'magento_access_token' => null,
        'magento_token_secret' => null,
        'prestashop_webservice_key' => null,
        'wix_app_id' => null,
        'wix_app_secret_key' => null,
        'wix_instance_id' => null,
        'wix_refresh_token' => null,
        'mercado_libre_app_id' => null,
        'mercado_libre_app_secret_key' => null,
        'mercado_libre_refresh_token' => null,
        'zid_client_id' => null,
        'zid_client_secret' => null,
        'zid_access_token' => null,
        'zid_authorization' => null,
        'zid_refresh_token' => null,
        'flipkart_client_id' => null,
        'flipkart_client_secret' => null,
        'allegro_client_id' => null,
        'allegro_client_secret' => null,
        'allegro_access_token' => null,
        'allegro_refresh_token' => null,
        'allegro_environment' => null,
        'zoho_client_id' => null,
        'zoho_client_secret' => null,
        'zoho_refresh_token' => null,
        'zoho_region' => null,
        'otto_client_id' => null,
        'otto_client_secret' => null,
        'otto_app_id' => null,
        'otto_refresh_token' => null,
        'otto_environment' => null,
        'otto_access_token' => null,
        'tiktokshop_app_key' => null,
        'tiktokshop_app_secret' => null,
        'tiktokshop_refresh_token' => null,
        'tiktokshop_access_token' => null,
        'salla_client_id' => null,
        'salla_client_secret' => null,
        'salla_refresh_token' => null,
        'salla_access_token' => null,
        'temu_app_key' => null,
        'temu_app_secret' => null,
        'temu_access_token' => null,
        'temu_region' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cart_id' => false,
        'store_url' => false,
        'bridge_url' => false,
        'store_root' => false,
        'store_key' => false,
        'validate_version' => false,
        'verify' => false,
        'db_tables_prefix' => false,
        'user_agent' => false,
        'ftp_host' => false,
        'ftp_user' => false,
        'ftp_password' => false,
        'ftp_port' => false,
        'ftp_store_dir' => false,
        '_3dcart_private_key' => false,
        '_3dcart_access_token' => false,
        '_3dcartapi_api_key' => false,
        'amazon_sp_client_id' => false,
        'amazon_sp_client_secret' => false,
        'amazon_sp_refresh_token' => false,
        'amazon_sp_aws_region' => false,
        'amazon_sp_api_environment' => false,
        'amazon_seller_id' => false,
        'aspdotnetstorefront_api_user' => false,
        'aspdotnetstorefront_api_pass' => false,
        'bigcommerceapi_admin_account' => false,
        'bigcommerceapi_api_path' => false,
        'bigcommerceapi_api_key' => false,
        'bigcommerceapi_client_id' => false,
        'bigcommerceapi_access_token' => false,
        'bigcommerceapi_context' => false,
        'bol_api_key' => false,
        'bol_api_secret' => false,
        'bol_retailer_id' => false,
        'bigcartel_user_name' => false,
        'bigcartel_password' => false,
        'bricklink_consumer_key' => false,
        'bricklink_consumer_secret' => false,
        'bricklink_token' => false,
        'bricklink_token_secret' => false,
        'demandware_client_id' => false,
        'demandware_api_password' => false,
        'demandware_user_name' => false,
        'demandware_user_password' => false,
        'ebay_client_id' => false,
        'ebay_client_secret' => false,
        'ebay_runame' => false,
        'ebay_access_token' => false,
        'ebay_refresh_token' => false,
        'ebay_environment' => false,
        'ebay_site_id' => false,
        'walmart_client_id' => false,
        'walmart_client_secret' => false,
        'walmart_environment' => false,
        'walmart_channel_type' => false,
        'walmart_region' => false,
        'ecwid_acess_token' => false,
        'ecwid_store_id' => false,
        'lazada_app_id' => false,
        'lazada_app_secret' => false,
        'lazada_refresh_token' => false,
        'lazada_region' => false,
        'lightspeed_api_key' => false,
        'lightspeed_api_secret' => false,
        'etsy_keystring' => false,
        'etsy_shared_secret' => false,
        'etsy_access_token' => false,
        'etsy_token_secret' => false,
        'etsy_client_id' => false,
        'etsy_refresh_token' => false,
        'facebook_app_id' => false,
        'facebook_app_secret' => false,
        'facebook_access_token' => false,
        'facebook_business_id' => false,
        'neto_api_key' => false,
        'neto_api_username' => false,
        'shopline_access_token' => false,
        'shopline_app_key' => false,
        'shopline_app_secret' => false,
        'shopline_shared_secret' => false,
        'shopify_access_token' => false,
        'shopify_api_key' => false,
        'shopify_api_password' => false,
        'shopify_shared_secret' => false,
        'shopee_partner_id' => false,
        'shopee_partner_key' => false,
        'shopee_shop_id' => false,
        'shopee_refresh_token' => false,
        'shopee_region' => false,
        'shopee_environment' => false,
        'shoplazza_access_token' => false,
        'shoplazza_shared_secret' => false,
        'shopware_access_key' => false,
        'shopware_api_key' => false,
        'shopware_api_secret' => false,
        'miva_access_token' => false,
        'miva_signature' => false,
        'tiendanube_user_id' => false,
        'tiendanube_access_token' => false,
        'tiendanube_client_secret' => false,
        'volusion_login' => false,
        'volusion_password' => false,
        'hybris_client_id' => false,
        'hybris_client_secret' => false,
        'hybris_username' => false,
        'hybris_password' => false,
        'hybris_websites' => false,
        'square_client_id' => false,
        'square_client_secret' => false,
        'square_refresh_token' => false,
        'squarespace_api_key' => false,
        'squarespace_client_id' => false,
        'squarespace_client_secret' => false,
        'squarespace_access_token' => false,
        'squarespace_refresh_token' => false,
        'commercehq_api_key' => false,
        'commercehq_api_password' => false,
        'wc_consumer_key' => false,
        'wc_consumer_secret' => false,
        'magento_consumer_key' => false,
        'magento_consumer_secret' => false,
        'magento_access_token' => false,
        'magento_token_secret' => false,
        'prestashop_webservice_key' => false,
        'wix_app_id' => false,
        'wix_app_secret_key' => false,
        'wix_instance_id' => false,
        'wix_refresh_token' => false,
        'mercado_libre_app_id' => false,
        'mercado_libre_app_secret_key' => false,
        'mercado_libre_refresh_token' => false,
        'zid_client_id' => false,
        'zid_client_secret' => false,
        'zid_access_token' => false,
        'zid_authorization' => false,
        'zid_refresh_token' => false,
        'flipkart_client_id' => false,
        'flipkart_client_secret' => false,
        'allegro_client_id' => false,
        'allegro_client_secret' => false,
        'allegro_access_token' => false,
        'allegro_refresh_token' => false,
        'allegro_environment' => false,
        'zoho_client_id' => false,
        'zoho_client_secret' => false,
        'zoho_refresh_token' => false,
        'zoho_region' => false,
        'otto_client_id' => false,
        'otto_client_secret' => false,
        'otto_app_id' => false,
        'otto_refresh_token' => false,
        'otto_environment' => false,
        'otto_access_token' => false,
        'tiktokshop_app_key' => false,
        'tiktokshop_app_secret' => false,
        'tiktokshop_refresh_token' => false,
        'tiktokshop_access_token' => false,
        'salla_client_id' => false,
        'salla_client_secret' => false,
        'salla_refresh_token' => false,
        'salla_access_token' => false,
        'temu_app_key' => false,
        'temu_app_secret' => false,
        'temu_access_token' => false,
        'temu_region' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cart_id' => 'cart_id',
        'store_url' => 'store_url',
        'bridge_url' => 'bridge_url',
        'store_root' => 'store_root',
        'store_key' => 'store_key',
        'validate_version' => 'validate_version',
        'verify' => 'verify',
        'db_tables_prefix' => 'db_tables_prefix',
        'user_agent' => 'user_agent',
        'ftp_host' => 'ftp_host',
        'ftp_user' => 'ftp_user',
        'ftp_password' => 'ftp_password',
        'ftp_port' => 'ftp_port',
        'ftp_store_dir' => 'ftp_store_dir',
        '_3dcart_private_key' => '3dcart_private_key',
        '_3dcart_access_token' => '3dcart_access_token',
        '_3dcartapi_api_key' => '3dcartapi_api_key',
        'amazon_sp_client_id' => 'amazon_sp_client_id',
        'amazon_sp_client_secret' => 'amazon_sp_client_secret',
        'amazon_sp_refresh_token' => 'amazon_sp_refresh_token',
        'amazon_sp_aws_region' => 'amazon_sp_aws_region',
        'amazon_sp_api_environment' => 'amazon_sp_api_environment',
        'amazon_seller_id' => 'amazon_seller_id',
        'aspdotnetstorefront_api_user' => 'aspdotnetstorefront_api_user',
        'aspdotnetstorefront_api_pass' => 'aspdotnetstorefront_api_pass',
        'bigcommerceapi_admin_account' => 'bigcommerceapi_admin_account',
        'bigcommerceapi_api_path' => 'bigcommerceapi_api_path',
        'bigcommerceapi_api_key' => 'bigcommerceapi_api_key',
        'bigcommerceapi_client_id' => 'bigcommerceapi_client_id',
        'bigcommerceapi_access_token' => 'bigcommerceapi_access_token',
        'bigcommerceapi_context' => 'bigcommerceapi_context',
        'bol_api_key' => 'bol_api_key',
        'bol_api_secret' => 'bol_api_secret',
        'bol_retailer_id' => 'bol_retailer_id',
        'bigcartel_user_name' => 'bigcartel_user_name',
        'bigcartel_password' => 'bigcartel_password',
        'bricklink_consumer_key' => 'bricklink_consumer_key',
        'bricklink_consumer_secret' => 'bricklink_consumer_secret',
        'bricklink_token' => 'bricklink_token',
        'bricklink_token_secret' => 'bricklink_token_secret',
        'demandware_client_id' => 'demandware_client_id',
        'demandware_api_password' => 'demandware_api_password',
        'demandware_user_name' => 'demandware_user_name',
        'demandware_user_password' => 'demandware_user_password',
        'ebay_client_id' => 'ebay_client_id',
        'ebay_client_secret' => 'ebay_client_secret',
        'ebay_runame' => 'ebay_runame',
        'ebay_access_token' => 'ebay_access_token',
        'ebay_refresh_token' => 'ebay_refresh_token',
        'ebay_environment' => 'ebay_environment',
        'ebay_site_id' => 'ebay_site_id',
        'walmart_client_id' => 'walmart_client_id',
        'walmart_client_secret' => 'walmart_client_secret',
        'walmart_environment' => 'walmart_environment',
        'walmart_channel_type' => 'walmart_channel_type',
        'walmart_region' => 'walmart_region',
        'ecwid_acess_token' => 'ecwid_acess_token',
        'ecwid_store_id' => 'ecwid_store_id',
        'lazada_app_id' => 'lazada_app_id',
        'lazada_app_secret' => 'lazada_app_secret',
        'lazada_refresh_token' => 'lazada_refresh_token',
        'lazada_region' => 'lazada_region',
        'lightspeed_api_key' => 'lightspeed_api_key',
        'lightspeed_api_secret' => 'lightspeed_api_secret',
        'etsy_keystring' => 'etsy_keystring',
        'etsy_shared_secret' => 'etsy_shared_secret',
        'etsy_access_token' => 'etsy_access_token',
        'etsy_token_secret' => 'etsy_token_secret',
        'etsy_client_id' => 'etsy_client_id',
        'etsy_refresh_token' => 'etsy_refresh_token',
        'facebook_app_id' => 'facebook_app_id',
        'facebook_app_secret' => 'facebook_app_secret',
        'facebook_access_token' => 'facebook_access_token',
        'facebook_business_id' => 'facebook_business_id',
        'neto_api_key' => 'neto_api_key',
        'neto_api_username' => 'neto_api_username',
        'shopline_access_token' => 'shopline_access_token',
        'shopline_app_key' => 'shopline_app_key',
        'shopline_app_secret' => 'shopline_app_secret',
        'shopline_shared_secret' => 'shopline_shared_secret',
        'shopify_access_token' => 'shopify_access_token',
        'shopify_api_key' => 'shopify_api_key',
        'shopify_api_password' => 'shopify_api_password',
        'shopify_shared_secret' => 'shopify_shared_secret',
        'shopee_partner_id' => 'shopee_partner_id',
        'shopee_partner_key' => 'shopee_partner_key',
        'shopee_shop_id' => 'shopee_shop_id',
        'shopee_refresh_token' => 'shopee_refresh_token',
        'shopee_region' => 'shopee_region',
        'shopee_environment' => 'shopee_environment',
        'shoplazza_access_token' => 'shoplazza_access_token',
        'shoplazza_shared_secret' => 'shoplazza_shared_secret',
        'shopware_access_key' => 'shopware_access_key',
        'shopware_api_key' => 'shopware_api_key',
        'shopware_api_secret' => 'shopware_api_secret',
        'miva_access_token' => 'miva_access_token',
        'miva_signature' => 'miva_signature',
        'tiendanube_user_id' => 'tiendanube_user_id',
        'tiendanube_access_token' => 'tiendanube_access_token',
        'tiendanube_client_secret' => 'tiendanube_client_secret',
        'volusion_login' => 'volusion_login',
        'volusion_password' => 'volusion_password',
        'hybris_client_id' => 'hybris_client_id',
        'hybris_client_secret' => 'hybris_client_secret',
        'hybris_username' => 'hybris_username',
        'hybris_password' => 'hybris_password',
        'hybris_websites' => 'hybris_websites',
        'square_client_id' => 'square_client_id',
        'square_client_secret' => 'square_client_secret',
        'square_refresh_token' => 'square_refresh_token',
        'squarespace_api_key' => 'squarespace_api_key',
        'squarespace_client_id' => 'squarespace_client_id',
        'squarespace_client_secret' => 'squarespace_client_secret',
        'squarespace_access_token' => 'squarespace_access_token',
        'squarespace_refresh_token' => 'squarespace_refresh_token',
        'commercehq_api_key' => 'commercehq_api_key',
        'commercehq_api_password' => 'commercehq_api_password',
        'wc_consumer_key' => 'wc_consumer_key',
        'wc_consumer_secret' => 'wc_consumer_secret',
        'magento_consumer_key' => 'magento_consumer_key',
        'magento_consumer_secret' => 'magento_consumer_secret',
        'magento_access_token' => 'magento_access_token',
        'magento_token_secret' => 'magento_token_secret',
        'prestashop_webservice_key' => 'prestashop_webservice_key',
        'wix_app_id' => 'wix_app_id',
        'wix_app_secret_key' => 'wix_app_secret_key',
        'wix_instance_id' => 'wix_instance_id',
        'wix_refresh_token' => 'wix_refresh_token',
        'mercado_libre_app_id' => 'mercado_libre_app_id',
        'mercado_libre_app_secret_key' => 'mercado_libre_app_secret_key',
        'mercado_libre_refresh_token' => 'mercado_libre_refresh_token',
        'zid_client_id' => 'zid_client_id',
        'zid_client_secret' => 'zid_client_secret',
        'zid_access_token' => 'zid_access_token',
        'zid_authorization' => 'zid_authorization',
        'zid_refresh_token' => 'zid_refresh_token',
        'flipkart_client_id' => 'flipkart_client_id',
        'flipkart_client_secret' => 'flipkart_client_secret',
        'allegro_client_id' => 'allegro_client_id',
        'allegro_client_secret' => 'allegro_client_secret',
        'allegro_access_token' => 'allegro_access_token',
        'allegro_refresh_token' => 'allegro_refresh_token',
        'allegro_environment' => 'allegro_environment',
        'zoho_client_id' => 'zoho_client_id',
        'zoho_client_secret' => 'zoho_client_secret',
        'zoho_refresh_token' => 'zoho_refresh_token',
        'zoho_region' => 'zoho_region',
        'otto_client_id' => 'otto_client_id',
        'otto_client_secret' => 'otto_client_secret',
        'otto_app_id' => 'otto_app_id',
        'otto_refresh_token' => 'otto_refresh_token',
        'otto_environment' => 'otto_environment',
        'otto_access_token' => 'otto_access_token',
        'tiktokshop_app_key' => 'tiktokshop_app_key',
        'tiktokshop_app_secret' => 'tiktokshop_app_secret',
        'tiktokshop_refresh_token' => 'tiktokshop_refresh_token',
        'tiktokshop_access_token' => 'tiktokshop_access_token',
        'salla_client_id' => 'salla_client_id',
        'salla_client_secret' => 'salla_client_secret',
        'salla_refresh_token' => 'salla_refresh_token',
        'salla_access_token' => 'salla_access_token',
        'temu_app_key' => 'temu_app_key',
        'temu_app_secret' => 'temu_app_secret',
        'temu_access_token' => 'temu_access_token',
        'temu_region' => 'temu_region'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cart_id' => 'setCartId',
        'store_url' => 'setStoreUrl',
        'bridge_url' => 'setBridgeUrl',
        'store_root' => 'setStoreRoot',
        'store_key' => 'setStoreKey',
        'validate_version' => 'setValidateVersion',
        'verify' => 'setVerify',
        'db_tables_prefix' => 'setDbTablesPrefix',
        'user_agent' => 'setUserAgent',
        'ftp_host' => 'setFtpHost',
        'ftp_user' => 'setFtpUser',
        'ftp_password' => 'setFtpPassword',
        'ftp_port' => 'setFtpPort',
        'ftp_store_dir' => 'setFtpStoreDir',
        '_3dcart_private_key' => 'set3dcartPrivateKey',
        '_3dcart_access_token' => 'set3dcartAccessToken',
        '_3dcartapi_api_key' => 'set3dcartapiApiKey',
        'amazon_sp_client_id' => 'setAmazonSpClientId',
        'amazon_sp_client_secret' => 'setAmazonSpClientSecret',
        'amazon_sp_refresh_token' => 'setAmazonSpRefreshToken',
        'amazon_sp_aws_region' => 'setAmazonSpAwsRegion',
        'amazon_sp_api_environment' => 'setAmazonSpApiEnvironment',
        'amazon_seller_id' => 'setAmazonSellerId',
        'aspdotnetstorefront_api_user' => 'setAspdotnetstorefrontApiUser',
        'aspdotnetstorefront_api_pass' => 'setAspdotnetstorefrontApiPass',
        'bigcommerceapi_admin_account' => 'setBigcommerceapiAdminAccount',
        'bigcommerceapi_api_path' => 'setBigcommerceapiApiPath',
        'bigcommerceapi_api_key' => 'setBigcommerceapiApiKey',
        'bigcommerceapi_client_id' => 'setBigcommerceapiClientId',
        'bigcommerceapi_access_token' => 'setBigcommerceapiAccessToken',
        'bigcommerceapi_context' => 'setBigcommerceapiContext',
        'bol_api_key' => 'setBolApiKey',
        'bol_api_secret' => 'setBolApiSecret',
        'bol_retailer_id' => 'setBolRetailerId',
        'bigcartel_user_name' => 'setBigcartelUserName',
        'bigcartel_password' => 'setBigcartelPassword',
        'bricklink_consumer_key' => 'setBricklinkConsumerKey',
        'bricklink_consumer_secret' => 'setBricklinkConsumerSecret',
        'bricklink_token' => 'setBricklinkToken',
        'bricklink_token_secret' => 'setBricklinkTokenSecret',
        'demandware_client_id' => 'setDemandwareClientId',
        'demandware_api_password' => 'setDemandwareApiPassword',
        'demandware_user_name' => 'setDemandwareUserName',
        'demandware_user_password' => 'setDemandwareUserPassword',
        'ebay_client_id' => 'setEbayClientId',
        'ebay_client_secret' => 'setEbayClientSecret',
        'ebay_runame' => 'setEbayRuname',
        'ebay_access_token' => 'setEbayAccessToken',
        'ebay_refresh_token' => 'setEbayRefreshToken',
        'ebay_environment' => 'setEbayEnvironment',
        'ebay_site_id' => 'setEbaySiteId',
        'walmart_client_id' => 'setWalmartClientId',
        'walmart_client_secret' => 'setWalmartClientSecret',
        'walmart_environment' => 'setWalmartEnvironment',
        'walmart_channel_type' => 'setWalmartChannelType',
        'walmart_region' => 'setWalmartRegion',
        'ecwid_acess_token' => 'setEcwidAcessToken',
        'ecwid_store_id' => 'setEcwidStoreId',
        'lazada_app_id' => 'setLazadaAppId',
        'lazada_app_secret' => 'setLazadaAppSecret',
        'lazada_refresh_token' => 'setLazadaRefreshToken',
        'lazada_region' => 'setLazadaRegion',
        'lightspeed_api_key' => 'setLightspeedApiKey',
        'lightspeed_api_secret' => 'setLightspeedApiSecret',
        'etsy_keystring' => 'setEtsyKeystring',
        'etsy_shared_secret' => 'setEtsySharedSecret',
        'etsy_access_token' => 'setEtsyAccessToken',
        'etsy_token_secret' => 'setEtsyTokenSecret',
        'etsy_client_id' => 'setEtsyClientId',
        'etsy_refresh_token' => 'setEtsyRefreshToken',
        'facebook_app_id' => 'setFacebookAppId',
        'facebook_app_secret' => 'setFacebookAppSecret',
        'facebook_access_token' => 'setFacebookAccessToken',
        'facebook_business_id' => 'setFacebookBusinessId',
        'neto_api_key' => 'setNetoApiKey',
        'neto_api_username' => 'setNetoApiUsername',
        'shopline_access_token' => 'setShoplineAccessToken',
        'shopline_app_key' => 'setShoplineAppKey',
        'shopline_app_secret' => 'setShoplineAppSecret',
        'shopline_shared_secret' => 'setShoplineSharedSecret',
        'shopify_access_token' => 'setShopifyAccessToken',
        'shopify_api_key' => 'setShopifyApiKey',
        'shopify_api_password' => 'setShopifyApiPassword',
        'shopify_shared_secret' => 'setShopifySharedSecret',
        'shopee_partner_id' => 'setShopeePartnerId',
        'shopee_partner_key' => 'setShopeePartnerKey',
        'shopee_shop_id' => 'setShopeeShopId',
        'shopee_refresh_token' => 'setShopeeRefreshToken',
        'shopee_region' => 'setShopeeRegion',
        'shopee_environment' => 'setShopeeEnvironment',
        'shoplazza_access_token' => 'setShoplazzaAccessToken',
        'shoplazza_shared_secret' => 'setShoplazzaSharedSecret',
        'shopware_access_key' => 'setShopwareAccessKey',
        'shopware_api_key' => 'setShopwareApiKey',
        'shopware_api_secret' => 'setShopwareApiSecret',
        'miva_access_token' => 'setMivaAccessToken',
        'miva_signature' => 'setMivaSignature',
        'tiendanube_user_id' => 'setTiendanubeUserId',
        'tiendanube_access_token' => 'setTiendanubeAccessToken',
        'tiendanube_client_secret' => 'setTiendanubeClientSecret',
        'volusion_login' => 'setVolusionLogin',
        'volusion_password' => 'setVolusionPassword',
        'hybris_client_id' => 'setHybrisClientId',
        'hybris_client_secret' => 'setHybrisClientSecret',
        'hybris_username' => 'setHybrisUsername',
        'hybris_password' => 'setHybrisPassword',
        'hybris_websites' => 'setHybrisWebsites',
        'square_client_id' => 'setSquareClientId',
        'square_client_secret' => 'setSquareClientSecret',
        'square_refresh_token' => 'setSquareRefreshToken',
        'squarespace_api_key' => 'setSquarespaceApiKey',
        'squarespace_client_id' => 'setSquarespaceClientId',
        'squarespace_client_secret' => 'setSquarespaceClientSecret',
        'squarespace_access_token' => 'setSquarespaceAccessToken',
        'squarespace_refresh_token' => 'setSquarespaceRefreshToken',
        'commercehq_api_key' => 'setCommercehqApiKey',
        'commercehq_api_password' => 'setCommercehqApiPassword',
        'wc_consumer_key' => 'setWcConsumerKey',
        'wc_consumer_secret' => 'setWcConsumerSecret',
        'magento_consumer_key' => 'setMagentoConsumerKey',
        'magento_consumer_secret' => 'setMagentoConsumerSecret',
        'magento_access_token' => 'setMagentoAccessToken',
        'magento_token_secret' => 'setMagentoTokenSecret',
        'prestashop_webservice_key' => 'setPrestashopWebserviceKey',
        'wix_app_id' => 'setWixAppId',
        'wix_app_secret_key' => 'setWixAppSecretKey',
        'wix_instance_id' => 'setWixInstanceId',
        'wix_refresh_token' => 'setWixRefreshToken',
        'mercado_libre_app_id' => 'setMercadoLibreAppId',
        'mercado_libre_app_secret_key' => 'setMercadoLibreAppSecretKey',
        'mercado_libre_refresh_token' => 'setMercadoLibreRefreshToken',
        'zid_client_id' => 'setZidClientId',
        'zid_client_secret' => 'setZidClientSecret',
        'zid_access_token' => 'setZidAccessToken',
        'zid_authorization' => 'setZidAuthorization',
        'zid_refresh_token' => 'setZidRefreshToken',
        'flipkart_client_id' => 'setFlipkartClientId',
        'flipkart_client_secret' => 'setFlipkartClientSecret',
        'allegro_client_id' => 'setAllegroClientId',
        'allegro_client_secret' => 'setAllegroClientSecret',
        'allegro_access_token' => 'setAllegroAccessToken',
        'allegro_refresh_token' => 'setAllegroRefreshToken',
        'allegro_environment' => 'setAllegroEnvironment',
        'zoho_client_id' => 'setZohoClientId',
        'zoho_client_secret' => 'setZohoClientSecret',
        'zoho_refresh_token' => 'setZohoRefreshToken',
        'zoho_region' => 'setZohoRegion',
        'otto_client_id' => 'setOttoClientId',
        'otto_client_secret' => 'setOttoClientSecret',
        'otto_app_id' => 'setOttoAppId',
        'otto_refresh_token' => 'setOttoRefreshToken',
        'otto_environment' => 'setOttoEnvironment',
        'otto_access_token' => 'setOttoAccessToken',
        'tiktokshop_app_key' => 'setTiktokshopAppKey',
        'tiktokshop_app_secret' => 'setTiktokshopAppSecret',
        'tiktokshop_refresh_token' => 'setTiktokshopRefreshToken',
        'tiktokshop_access_token' => 'setTiktokshopAccessToken',
        'salla_client_id' => 'setSallaClientId',
        'salla_client_secret' => 'setSallaClientSecret',
        'salla_refresh_token' => 'setSallaRefreshToken',
        'salla_access_token' => 'setSallaAccessToken',
        'temu_app_key' => 'setTemuAppKey',
        'temu_app_secret' => 'setTemuAppSecret',
        'temu_access_token' => 'setTemuAccessToken',
        'temu_region' => 'setTemuRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cart_id' => 'getCartId',
        'store_url' => 'getStoreUrl',
        'bridge_url' => 'getBridgeUrl',
        'store_root' => 'getStoreRoot',
        'store_key' => 'getStoreKey',
        'validate_version' => 'getValidateVersion',
        'verify' => 'getVerify',
        'db_tables_prefix' => 'getDbTablesPrefix',
        'user_agent' => 'getUserAgent',
        'ftp_host' => 'getFtpHost',
        'ftp_user' => 'getFtpUser',
        'ftp_password' => 'getFtpPassword',
        'ftp_port' => 'getFtpPort',
        'ftp_store_dir' => 'getFtpStoreDir',
        '_3dcart_private_key' => 'get3dcartPrivateKey',
        '_3dcart_access_token' => 'get3dcartAccessToken',
        '_3dcartapi_api_key' => 'get3dcartapiApiKey',
        'amazon_sp_client_id' => 'getAmazonSpClientId',
        'amazon_sp_client_secret' => 'getAmazonSpClientSecret',
        'amazon_sp_refresh_token' => 'getAmazonSpRefreshToken',
        'amazon_sp_aws_region' => 'getAmazonSpAwsRegion',
        'amazon_sp_api_environment' => 'getAmazonSpApiEnvironment',
        'amazon_seller_id' => 'getAmazonSellerId',
        'aspdotnetstorefront_api_user' => 'getAspdotnetstorefrontApiUser',
        'aspdotnetstorefront_api_pass' => 'getAspdotnetstorefrontApiPass',
        'bigcommerceapi_admin_account' => 'getBigcommerceapiAdminAccount',
        'bigcommerceapi_api_path' => 'getBigcommerceapiApiPath',
        'bigcommerceapi_api_key' => 'getBigcommerceapiApiKey',
        'bigcommerceapi_client_id' => 'getBigcommerceapiClientId',
        'bigcommerceapi_access_token' => 'getBigcommerceapiAccessToken',
        'bigcommerceapi_context' => 'getBigcommerceapiContext',
        'bol_api_key' => 'getBolApiKey',
        'bol_api_secret' => 'getBolApiSecret',
        'bol_retailer_id' => 'getBolRetailerId',
        'bigcartel_user_name' => 'getBigcartelUserName',
        'bigcartel_password' => 'getBigcartelPassword',
        'bricklink_consumer_key' => 'getBricklinkConsumerKey',
        'bricklink_consumer_secret' => 'getBricklinkConsumerSecret',
        'bricklink_token' => 'getBricklinkToken',
        'bricklink_token_secret' => 'getBricklinkTokenSecret',
        'demandware_client_id' => 'getDemandwareClientId',
        'demandware_api_password' => 'getDemandwareApiPassword',
        'demandware_user_name' => 'getDemandwareUserName',
        'demandware_user_password' => 'getDemandwareUserPassword',
        'ebay_client_id' => 'getEbayClientId',
        'ebay_client_secret' => 'getEbayClientSecret',
        'ebay_runame' => 'getEbayRuname',
        'ebay_access_token' => 'getEbayAccessToken',
        'ebay_refresh_token' => 'getEbayRefreshToken',
        'ebay_environment' => 'getEbayEnvironment',
        'ebay_site_id' => 'getEbaySiteId',
        'walmart_client_id' => 'getWalmartClientId',
        'walmart_client_secret' => 'getWalmartClientSecret',
        'walmart_environment' => 'getWalmartEnvironment',
        'walmart_channel_type' => 'getWalmartChannelType',
        'walmart_region' => 'getWalmartRegion',
        'ecwid_acess_token' => 'getEcwidAcessToken',
        'ecwid_store_id' => 'getEcwidStoreId',
        'lazada_app_id' => 'getLazadaAppId',
        'lazada_app_secret' => 'getLazadaAppSecret',
        'lazada_refresh_token' => 'getLazadaRefreshToken',
        'lazada_region' => 'getLazadaRegion',
        'lightspeed_api_key' => 'getLightspeedApiKey',
        'lightspeed_api_secret' => 'getLightspeedApiSecret',
        'etsy_keystring' => 'getEtsyKeystring',
        'etsy_shared_secret' => 'getEtsySharedSecret',
        'etsy_access_token' => 'getEtsyAccessToken',
        'etsy_token_secret' => 'getEtsyTokenSecret',
        'etsy_client_id' => 'getEtsyClientId',
        'etsy_refresh_token' => 'getEtsyRefreshToken',
        'facebook_app_id' => 'getFacebookAppId',
        'facebook_app_secret' => 'getFacebookAppSecret',
        'facebook_access_token' => 'getFacebookAccessToken',
        'facebook_business_id' => 'getFacebookBusinessId',
        'neto_api_key' => 'getNetoApiKey',
        'neto_api_username' => 'getNetoApiUsername',
        'shopline_access_token' => 'getShoplineAccessToken',
        'shopline_app_key' => 'getShoplineAppKey',
        'shopline_app_secret' => 'getShoplineAppSecret',
        'shopline_shared_secret' => 'getShoplineSharedSecret',
        'shopify_access_token' => 'getShopifyAccessToken',
        'shopify_api_key' => 'getShopifyApiKey',
        'shopify_api_password' => 'getShopifyApiPassword',
        'shopify_shared_secret' => 'getShopifySharedSecret',
        'shopee_partner_id' => 'getShopeePartnerId',
        'shopee_partner_key' => 'getShopeePartnerKey',
        'shopee_shop_id' => 'getShopeeShopId',
        'shopee_refresh_token' => 'getShopeeRefreshToken',
        'shopee_region' => 'getShopeeRegion',
        'shopee_environment' => 'getShopeeEnvironment',
        'shoplazza_access_token' => 'getShoplazzaAccessToken',
        'shoplazza_shared_secret' => 'getShoplazzaSharedSecret',
        'shopware_access_key' => 'getShopwareAccessKey',
        'shopware_api_key' => 'getShopwareApiKey',
        'shopware_api_secret' => 'getShopwareApiSecret',
        'miva_access_token' => 'getMivaAccessToken',
        'miva_signature' => 'getMivaSignature',
        'tiendanube_user_id' => 'getTiendanubeUserId',
        'tiendanube_access_token' => 'getTiendanubeAccessToken',
        'tiendanube_client_secret' => 'getTiendanubeClientSecret',
        'volusion_login' => 'getVolusionLogin',
        'volusion_password' => 'getVolusionPassword',
        'hybris_client_id' => 'getHybrisClientId',
        'hybris_client_secret' => 'getHybrisClientSecret',
        'hybris_username' => 'getHybrisUsername',
        'hybris_password' => 'getHybrisPassword',
        'hybris_websites' => 'getHybrisWebsites',
        'square_client_id' => 'getSquareClientId',
        'square_client_secret' => 'getSquareClientSecret',
        'square_refresh_token' => 'getSquareRefreshToken',
        'squarespace_api_key' => 'getSquarespaceApiKey',
        'squarespace_client_id' => 'getSquarespaceClientId',
        'squarespace_client_secret' => 'getSquarespaceClientSecret',
        'squarespace_access_token' => 'getSquarespaceAccessToken',
        'squarespace_refresh_token' => 'getSquarespaceRefreshToken',
        'commercehq_api_key' => 'getCommercehqApiKey',
        'commercehq_api_password' => 'getCommercehqApiPassword',
        'wc_consumer_key' => 'getWcConsumerKey',
        'wc_consumer_secret' => 'getWcConsumerSecret',
        'magento_consumer_key' => 'getMagentoConsumerKey',
        'magento_consumer_secret' => 'getMagentoConsumerSecret',
        'magento_access_token' => 'getMagentoAccessToken',
        'magento_token_secret' => 'getMagentoTokenSecret',
        'prestashop_webservice_key' => 'getPrestashopWebserviceKey',
        'wix_app_id' => 'getWixAppId',
        'wix_app_secret_key' => 'getWixAppSecretKey',
        'wix_instance_id' => 'getWixInstanceId',
        'wix_refresh_token' => 'getWixRefreshToken',
        'mercado_libre_app_id' => 'getMercadoLibreAppId',
        'mercado_libre_app_secret_key' => 'getMercadoLibreAppSecretKey',
        'mercado_libre_refresh_token' => 'getMercadoLibreRefreshToken',
        'zid_client_id' => 'getZidClientId',
        'zid_client_secret' => 'getZidClientSecret',
        'zid_access_token' => 'getZidAccessToken',
        'zid_authorization' => 'getZidAuthorization',
        'zid_refresh_token' => 'getZidRefreshToken',
        'flipkart_client_id' => 'getFlipkartClientId',
        'flipkart_client_secret' => 'getFlipkartClientSecret',
        'allegro_client_id' => 'getAllegroClientId',
        'allegro_client_secret' => 'getAllegroClientSecret',
        'allegro_access_token' => 'getAllegroAccessToken',
        'allegro_refresh_token' => 'getAllegroRefreshToken',
        'allegro_environment' => 'getAllegroEnvironment',
        'zoho_client_id' => 'getZohoClientId',
        'zoho_client_secret' => 'getZohoClientSecret',
        'zoho_refresh_token' => 'getZohoRefreshToken',
        'zoho_region' => 'getZohoRegion',
        'otto_client_id' => 'getOttoClientId',
        'otto_client_secret' => 'getOttoClientSecret',
        'otto_app_id' => 'getOttoAppId',
        'otto_refresh_token' => 'getOttoRefreshToken',
        'otto_environment' => 'getOttoEnvironment',
        'otto_access_token' => 'getOttoAccessToken',
        'tiktokshop_app_key' => 'getTiktokshopAppKey',
        'tiktokshop_app_secret' => 'getTiktokshopAppSecret',
        'tiktokshop_refresh_token' => 'getTiktokshopRefreshToken',
        'tiktokshop_access_token' => 'getTiktokshopAccessToken',
        'salla_client_id' => 'getSallaClientId',
        'salla_client_secret' => 'getSallaClientSecret',
        'salla_refresh_token' => 'getSallaRefreshToken',
        'salla_access_token' => 'getSallaAccessToken',
        'temu_app_key' => 'getTemuAppKey',
        'temu_app_secret' => 'getTemuAppSecret',
        'temu_access_token' => 'getTemuAccessToken',
        'temu_region' => 'getTemuRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CART_ID__3_D_CART = '3DCart';
    public const CART_ID__3_D_CART_API = '3DCartApi';
    public const CART_ID_ACE_SHOP = 'AceShop';
    public const CART_ID_AMAZON_SP = 'AmazonSP';
    public const CART_ID_ASP_DOT_NET_STOREFRONT = 'AspDotNetStorefront';
    public const CART_ID_BIG_CARTEL = 'BigCartel';
    public const CART_ID_BIGCOMMERCE_API = 'BigcommerceApi';
    public const CART_ID_BOL = 'Bol';
    public const CART_ID_COMMERCE_HQ = 'CommerceHQ';
    public const CART_ID_CRELOADED = 'Creloaded';
    public const CART_ID_CSCART = 'Cscart';
    public const CART_ID_CUBECART = 'Cubecart';
    public const CART_ID_DEMANDWARE = 'Demandware';
    public const CART_ID_E_BAY = 'EBay';
    public const CART_ID_ECWID = 'Ecwid';
    public const CART_ID_ETSY_APIV3 = 'EtsyAPIv3';
    public const CART_ID_FLIPKART = 'Flipkart';
    public const CART_ID_GAMBIO = 'Gambio';
    public const CART_ID_HYBRIS = 'Hybris';
    public const CART_ID_JOO_CART = 'JooCart';
    public const CART_ID_LAZADA = 'Lazada';
    public const CART_ID_LIGHT_SPEED = 'LightSpeed';
    public const CART_ID_MAGENTO1212 = 'Magento1212';
    public const CART_ID_MAGENTO2_API = 'Magento2Api';
    public const CART_ID_MERCADO_LIBRE = 'MercadoLibre';
    public const CART_ID_MIJO_SHOP = 'MijoShop';
    public const CART_ID_MIVA = 'Miva';
    public const CART_ID_NETO = 'Neto';
    public const CART_ID_OPENCART14 = 'Opencart14';
    public const CART_ID_OSCMAX2 = 'Oscmax2';
    public const CART_ID_OSCOMMERCE22MS2 = 'Oscommerce22ms2';
    public const CART_ID_OTTO = 'Otto';
    public const CART_ID_OXID = 'Oxid';
    public const CART_ID_PINNACLE = 'Pinnacle';
    public const CART_ID_PRESTASHOP = 'Prestashop';
    public const CART_ID_PRESTASHOP_API = 'PrestashopApi';
    public const CART_ID_SS_PREMIUM = 'SSPremium';
    public const CART_ID_SALLA = 'Salla';
    public const CART_ID_SHOPIFY = 'Shopify';
    public const CART_ID_SHOPEE = 'Shopee';
    public const CART_ID_SHOPLAZZA = 'Shoplazza';
    public const CART_ID_SHOPLINE = 'Shopline';
    public const CART_ID_SHOPWARE = 'Shopware';
    public const CART_ID_SHOPWARE_API = 'ShopwareApi';
    public const CART_ID_SQUARE = 'Square';
    public const CART_ID_SQUARESPACE = 'Squarespace';
    public const CART_ID_TEMU = 'Temu';
    public const CART_ID_TIENDANUBE = 'Tiendanube';
    public const CART_ID_TIK_TOK_SHOP = 'TikTokShop';
    public const CART_ID_TOMATOCART = 'Tomatocart';
    public const CART_ID_UBERCART = 'Ubercart';
    public const CART_ID_VIRTUEMART = 'Virtuemart';
    public const CART_ID_VOLUSION = 'Volusion';
    public const CART_ID_W_PECOMMERCE = 'WPecommerce';
    public const CART_ID_WALMART = 'Walmart';
    public const CART_ID_WEB_ASYST = 'WebAsyst';
    public const CART_ID_WIX = 'Wix';
    public const CART_ID_WOOCOMMERCE = 'Woocommerce';
    public const CART_ID_WOOCOMMERCE_API = 'WoocommerceApi';
    public const CART_ID_XCART = 'Xcart';
    public const CART_ID_XTCOMMERCE = 'Xtcommerce';
    public const CART_ID_XTCOMMERCE_VEYTON = 'XtcommerceVeyton';
    public const CART_ID_ZENCART137 = 'Zencart137';
    public const CART_ID_ZID = 'Zid';
    public const CART_ID_ZOEY = 'Zoey';
    public const CART_ID_ZOHO = 'Zoho';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCartIdAllowableValues()
    {
        return [
            self::CART_ID__3_D_CART,
            self::CART_ID__3_D_CART_API,
            self::CART_ID_ACE_SHOP,
            self::CART_ID_AMAZON_SP,
            self::CART_ID_ASP_DOT_NET_STOREFRONT,
            self::CART_ID_BIG_CARTEL,
            self::CART_ID_BIGCOMMERCE_API,
            self::CART_ID_BOL,
            self::CART_ID_COMMERCE_HQ,
            self::CART_ID_CRELOADED,
            self::CART_ID_CSCART,
            self::CART_ID_CUBECART,
            self::CART_ID_DEMANDWARE,
            self::CART_ID_E_BAY,
            self::CART_ID_ECWID,
            self::CART_ID_ETSY_APIV3,
            self::CART_ID_FLIPKART,
            self::CART_ID_GAMBIO,
            self::CART_ID_HYBRIS,
            self::CART_ID_JOO_CART,
            self::CART_ID_LAZADA,
            self::CART_ID_LIGHT_SPEED,
            self::CART_ID_MAGENTO1212,
            self::CART_ID_MAGENTO2_API,
            self::CART_ID_MERCADO_LIBRE,
            self::CART_ID_MIJO_SHOP,
            self::CART_ID_MIVA,
            self::CART_ID_NETO,
            self::CART_ID_OPENCART14,
            self::CART_ID_OSCMAX2,
            self::CART_ID_OSCOMMERCE22MS2,
            self::CART_ID_OTTO,
            self::CART_ID_OXID,
            self::CART_ID_PINNACLE,
            self::CART_ID_PRESTASHOP,
            self::CART_ID_PRESTASHOP_API,
            self::CART_ID_SS_PREMIUM,
            self::CART_ID_SALLA,
            self::CART_ID_SHOPIFY,
            self::CART_ID_SHOPEE,
            self::CART_ID_SHOPLAZZA,
            self::CART_ID_SHOPLINE,
            self::CART_ID_SHOPWARE,
            self::CART_ID_SHOPWARE_API,
            self::CART_ID_SQUARE,
            self::CART_ID_SQUARESPACE,
            self::CART_ID_TEMU,
            self::CART_ID_TIENDANUBE,
            self::CART_ID_TIK_TOK_SHOP,
            self::CART_ID_TOMATOCART,
            self::CART_ID_UBERCART,
            self::CART_ID_VIRTUEMART,
            self::CART_ID_VOLUSION,
            self::CART_ID_W_PECOMMERCE,
            self::CART_ID_WALMART,
            self::CART_ID_WEB_ASYST,
            self::CART_ID_WIX,
            self::CART_ID_WOOCOMMERCE,
            self::CART_ID_WOOCOMMERCE_API,
            self::CART_ID_XCART,
            self::CART_ID_XTCOMMERCE,
            self::CART_ID_XTCOMMERCE_VEYTON,
            self::CART_ID_ZENCART137,
            self::CART_ID_ZID,
            self::CART_ID_ZOEY,
            self::CART_ID_ZOHO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cart_id', $data ?? [], null);
        $this->setIfExists('store_url', $data ?? [], null);
        $this->setIfExists('bridge_url', $data ?? [], null);
        $this->setIfExists('store_root', $data ?? [], null);
        $this->setIfExists('store_key', $data ?? [], null);
        $this->setIfExists('validate_version', $data ?? [], false);
        $this->setIfExists('verify', $data ?? [], true);
        $this->setIfExists('db_tables_prefix', $data ?? [], null);
        $this->setIfExists('user_agent', $data ?? [], null);
        $this->setIfExists('ftp_host', $data ?? [], null);
        $this->setIfExists('ftp_user', $data ?? [], null);
        $this->setIfExists('ftp_password', $data ?? [], null);
        $this->setIfExists('ftp_port', $data ?? [], null);
        $this->setIfExists('ftp_store_dir', $data ?? [], null);
        $this->setIfExists('_3dcart_private_key', $data ?? [], null);
        $this->setIfExists('_3dcart_access_token', $data ?? [], null);
        $this->setIfExists('_3dcartapi_api_key', $data ?? [], null);
        $this->setIfExists('amazon_sp_client_id', $data ?? [], null);
        $this->setIfExists('amazon_sp_client_secret', $data ?? [], null);
        $this->setIfExists('amazon_sp_refresh_token', $data ?? [], null);
        $this->setIfExists('amazon_sp_aws_region', $data ?? [], null);
        $this->setIfExists('amazon_sp_api_environment', $data ?? [], 'production');
        $this->setIfExists('amazon_seller_id', $data ?? [], null);
        $this->setIfExists('aspdotnetstorefront_api_user', $data ?? [], null);
        $this->setIfExists('aspdotnetstorefront_api_pass', $data ?? [], null);
        $this->setIfExists('bigcommerceapi_admin_account', $data ?? [], null);
        $this->setIfExists('bigcommerceapi_api_path', $data ?? [], null);
        $this->setIfExists('bigcommerceapi_api_key', $data ?? [], null);
        $this->setIfExists('bigcommerceapi_client_id', $data ?? [], null);
        $this->setIfExists('bigcommerceapi_access_token', $data ?? [], null);
        $this->setIfExists('bigcommerceapi_context', $data ?? [], null);
        $this->setIfExists('bol_api_key', $data ?? [], null);
        $this->setIfExists('bol_api_secret', $data ?? [], null);
        $this->setIfExists('bol_retailer_id', $data ?? [], null);
        $this->setIfExists('bigcartel_user_name', $data ?? [], null);
        $this->setIfExists('bigcartel_password', $data ?? [], null);
        $this->setIfExists('bricklink_consumer_key', $data ?? [], null);
        $this->setIfExists('bricklink_consumer_secret', $data ?? [], null);
        $this->setIfExists('bricklink_token', $data ?? [], null);
        $this->setIfExists('bricklink_token_secret', $data ?? [], null);
        $this->setIfExists('demandware_client_id', $data ?? [], null);
        $this->setIfExists('demandware_api_password', $data ?? [], null);
        $this->setIfExists('demandware_user_name', $data ?? [], null);
        $this->setIfExists('demandware_user_password', $data ?? [], null);
        $this->setIfExists('ebay_client_id', $data ?? [], null);
        $this->setIfExists('ebay_client_secret', $data ?? [], null);
        $this->setIfExists('ebay_runame', $data ?? [], null);
        $this->setIfExists('ebay_access_token', $data ?? [], null);
        $this->setIfExists('ebay_refresh_token', $data ?? [], null);
        $this->setIfExists('ebay_environment', $data ?? [], 'production');
        $this->setIfExists('ebay_site_id', $data ?? [], 0);
        $this->setIfExists('walmart_client_id', $data ?? [], null);
        $this->setIfExists('walmart_client_secret', $data ?? [], null);
        $this->setIfExists('walmart_environment', $data ?? [], 'production');
        $this->setIfExists('walmart_channel_type', $data ?? [], null);
        $this->setIfExists('walmart_region', $data ?? [], 'us');
        $this->setIfExists('ecwid_acess_token', $data ?? [], null);
        $this->setIfExists('ecwid_store_id', $data ?? [], null);
        $this->setIfExists('lazada_app_id', $data ?? [], null);
        $this->setIfExists('lazada_app_secret', $data ?? [], null);
        $this->setIfExists('lazada_refresh_token', $data ?? [], null);
        $this->setIfExists('lazada_region', $data ?? [], null);
        $this->setIfExists('lightspeed_api_key', $data ?? [], null);
        $this->setIfExists('lightspeed_api_secret', $data ?? [], null);
        $this->setIfExists('etsy_keystring', $data ?? [], null);
        $this->setIfExists('etsy_shared_secret', $data ?? [], null);
        $this->setIfExists('etsy_access_token', $data ?? [], null);
        $this->setIfExists('etsy_token_secret', $data ?? [], null);
        $this->setIfExists('etsy_client_id', $data ?? [], null);
        $this->setIfExists('etsy_refresh_token', $data ?? [], null);
        $this->setIfExists('facebook_app_id', $data ?? [], null);
        $this->setIfExists('facebook_app_secret', $data ?? [], null);
        $this->setIfExists('facebook_access_token', $data ?? [], null);
        $this->setIfExists('facebook_business_id', $data ?? [], null);
        $this->setIfExists('neto_api_key', $data ?? [], null);
        $this->setIfExists('neto_api_username', $data ?? [], null);
        $this->setIfExists('shopline_access_token', $data ?? [], null);
        $this->setIfExists('shopline_app_key', $data ?? [], null);
        $this->setIfExists('shopline_app_secret', $data ?? [], null);
        $this->setIfExists('shopline_shared_secret', $data ?? [], null);
        $this->setIfExists('shopify_access_token', $data ?? [], null);
        $this->setIfExists('shopify_api_key', $data ?? [], null);
        $this->setIfExists('shopify_api_password', $data ?? [], null);
        $this->setIfExists('shopify_shared_secret', $data ?? [], null);
        $this->setIfExists('shopee_partner_id', $data ?? [], null);
        $this->setIfExists('shopee_partner_key', $data ?? [], null);
        $this->setIfExists('shopee_shop_id', $data ?? [], null);
        $this->setIfExists('shopee_refresh_token', $data ?? [], null);
        $this->setIfExists('shopee_region', $data ?? [], null);
        $this->setIfExists('shopee_environment', $data ?? [], 'production');
        $this->setIfExists('shoplazza_access_token', $data ?? [], null);
        $this->setIfExists('shoplazza_shared_secret', $data ?? [], null);
        $this->setIfExists('shopware_access_key', $data ?? [], null);
        $this->setIfExists('shopware_api_key', $data ?? [], null);
        $this->setIfExists('shopware_api_secret', $data ?? [], null);
        $this->setIfExists('miva_access_token', $data ?? [], null);
        $this->setIfExists('miva_signature', $data ?? [], null);
        $this->setIfExists('tiendanube_user_id', $data ?? [], null);
        $this->setIfExists('tiendanube_access_token', $data ?? [], null);
        $this->setIfExists('tiendanube_client_secret', $data ?? [], null);
        $this->setIfExists('volusion_login', $data ?? [], null);
        $this->setIfExists('volusion_password', $data ?? [], null);
        $this->setIfExists('hybris_client_id', $data ?? [], null);
        $this->setIfExists('hybris_client_secret', $data ?? [], null);
        $this->setIfExists('hybris_username', $data ?? [], null);
        $this->setIfExists('hybris_password', $data ?? [], null);
        $this->setIfExists('hybris_websites', $data ?? [], null);
        $this->setIfExists('square_client_id', $data ?? [], null);
        $this->setIfExists('square_client_secret', $data ?? [], null);
        $this->setIfExists('square_refresh_token', $data ?? [], null);
        $this->setIfExists('squarespace_api_key', $data ?? [], null);
        $this->setIfExists('squarespace_client_id', $data ?? [], null);
        $this->setIfExists('squarespace_client_secret', $data ?? [], null);
        $this->setIfExists('squarespace_access_token', $data ?? [], null);
        $this->setIfExists('squarespace_refresh_token', $data ?? [], null);
        $this->setIfExists('commercehq_api_key', $data ?? [], null);
        $this->setIfExists('commercehq_api_password', $data ?? [], null);
        $this->setIfExists('wc_consumer_key', $data ?? [], null);
        $this->setIfExists('wc_consumer_secret', $data ?? [], null);
        $this->setIfExists('magento_consumer_key', $data ?? [], null);
        $this->setIfExists('magento_consumer_secret', $data ?? [], null);
        $this->setIfExists('magento_access_token', $data ?? [], null);
        $this->setIfExists('magento_token_secret', $data ?? [], null);
        $this->setIfExists('prestashop_webservice_key', $data ?? [], null);
        $this->setIfExists('wix_app_id', $data ?? [], null);
        $this->setIfExists('wix_app_secret_key', $data ?? [], null);
        $this->setIfExists('wix_instance_id', $data ?? [], null);
        $this->setIfExists('wix_refresh_token', $data ?? [], null);
        $this->setIfExists('mercado_libre_app_id', $data ?? [], null);
        $this->setIfExists('mercado_libre_app_secret_key', $data ?? [], null);
        $this->setIfExists('mercado_libre_refresh_token', $data ?? [], null);
        $this->setIfExists('zid_client_id', $data ?? [], null);
        $this->setIfExists('zid_client_secret', $data ?? [], null);
        $this->setIfExists('zid_access_token', $data ?? [], null);
        $this->setIfExists('zid_authorization', $data ?? [], null);
        $this->setIfExists('zid_refresh_token', $data ?? [], null);
        $this->setIfExists('flipkart_client_id', $data ?? [], null);
        $this->setIfExists('flipkart_client_secret', $data ?? [], null);
        $this->setIfExists('allegro_client_id', $data ?? [], null);
        $this->setIfExists('allegro_client_secret', $data ?? [], null);
        $this->setIfExists('allegro_access_token', $data ?? [], null);
        $this->setIfExists('allegro_refresh_token', $data ?? [], null);
        $this->setIfExists('allegro_environment', $data ?? [], 'production');
        $this->setIfExists('zoho_client_id', $data ?? [], null);
        $this->setIfExists('zoho_client_secret', $data ?? [], null);
        $this->setIfExists('zoho_refresh_token', $data ?? [], null);
        $this->setIfExists('zoho_region', $data ?? [], null);
        $this->setIfExists('otto_client_id', $data ?? [], null);
        $this->setIfExists('otto_client_secret', $data ?? [], null);
        $this->setIfExists('otto_app_id', $data ?? [], null);
        $this->setIfExists('otto_refresh_token', $data ?? [], null);
        $this->setIfExists('otto_environment', $data ?? [], 'production');
        $this->setIfExists('otto_access_token', $data ?? [], null);
        $this->setIfExists('tiktokshop_app_key', $data ?? [], null);
        $this->setIfExists('tiktokshop_app_secret', $data ?? [], null);
        $this->setIfExists('tiktokshop_refresh_token', $data ?? [], null);
        $this->setIfExists('tiktokshop_access_token', $data ?? [], null);
        $this->setIfExists('salla_client_id', $data ?? [], null);
        $this->setIfExists('salla_client_secret', $data ?? [], null);
        $this->setIfExists('salla_refresh_token', $data ?? [], null);
        $this->setIfExists('salla_access_token', $data ?? [], null);
        $this->setIfExists('temu_app_key', $data ?? [], null);
        $this->setIfExists('temu_app_secret', $data ?? [], null);
        $this->setIfExists('temu_access_token', $data ?? [], null);
        $this->setIfExists('temu_region', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cart_id'] === null) {
            $invalidProperties[] = "'cart_id' can't be null";
        }
        $allowedValues = $this->getCartIdAllowableValues();
        if (!is_null($this->container['cart_id']) && !in_array($this->container['cart_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cart_id', must be one of '%s'",
                $this->container['cart_id'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['hybris_websites']) && (count($this->container['hybris_websites']) < 1)) {
            $invalidProperties[] = "invalid value for 'hybris_websites', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cart_id
     *
     * @return string
     */
    public function getCartId()
    {
        return $this->container['cart_id'];
    }

    /**
     * Sets cart_id
     *
     * @param string $cart_id Store’s identifier which you can get from cart_list method
     *
     * @return self
     */
    public function setCartId($cart_id)
    {
        if (is_null($cart_id)) {
            throw new \InvalidArgumentException('non-nullable cart_id cannot be null');
        }
        $allowedValues = $this->getCartIdAllowableValues();
        if (!in_array($cart_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cart_id', must be one of '%s'",
                    $cart_id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cart_id'] = $cart_id;

        return $this;
    }

    /**
     * Gets store_url
     *
     * @return string|null
     */
    public function getStoreUrl()
    {
        return $this->container['store_url'];
    }

    /**
     * Sets store_url
     *
     * @param string|null $store_url A web address of a store that you would like to connect to API2Cart
     *
     * @return self
     */
    public function setStoreUrl($store_url)
    {
        if (is_null($store_url)) {
            throw new \InvalidArgumentException('non-nullable store_url cannot be null');
        }
        $this->container['store_url'] = $store_url;

        return $this;
    }

    /**
     * Gets bridge_url
     *
     * @return string|null
     */
    public function getBridgeUrl()
    {
        return $this->container['bridge_url'];
    }

    /**
     * Sets bridge_url
     *
     * @param string|null $bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
     *
     * @return self
     */
    public function setBridgeUrl($bridge_url)
    {
        if (is_null($bridge_url)) {
            throw new \InvalidArgumentException('non-nullable bridge_url cannot be null');
        }
        $this->container['bridge_url'] = $bridge_url;

        return $this;
    }

    /**
     * Gets store_root
     *
     * @return string|null
     */
    public function getStoreRoot()
    {
        return $this->container['store_root'];
    }

    /**
     * Sets store_root
     *
     * @param string|null $store_root Absolute path to the store root directory (used with \"bridge_url\" parameter)
     *
     * @return self
     */
    public function setStoreRoot($store_root)
    {
        if (is_null($store_root)) {
            throw new \InvalidArgumentException('non-nullable store_root cannot be null');
        }
        $this->container['store_root'] = $store_root;

        return $this;
    }

    /**
     * Gets store_key
     *
     * @return string|null
     */
    public function getStoreKey()
    {
        return $this->container['store_key'];
    }

    /**
     * Sets store_key
     *
     * @param string|null $store_key Set this parameter if bridge is already uploaded to store
     *
     * @return self
     */
    public function setStoreKey($store_key)
    {
        if (is_null($store_key)) {
            throw new \InvalidArgumentException('non-nullable store_key cannot be null');
        }
        $this->container['store_key'] = $store_key;

        return $this;
    }

    /**
     * Gets validate_version
     *
     * @return bool|null
     */
    public function getValidateVersion()
    {
        return $this->container['validate_version'];
    }

    /**
     * Sets validate_version
     *
     * @param bool|null $validate_version Specify if api2cart should validate cart version
     *
     * @return self
     */
    public function setValidateVersion($validate_version)
    {
        if (is_null($validate_version)) {
            throw new \InvalidArgumentException('non-nullable validate_version cannot be null');
        }
        $this->container['validate_version'] = $validate_version;

        return $this;
    }

    /**
     * Gets verify
     *
     * @return bool|null
     */
    public function getVerify()
    {
        return $this->container['verify'];
    }

    /**
     * Sets verify
     *
     * @param bool|null $verify Enables or disables cart's verification
     *
     * @return self
     */
    public function setVerify($verify)
    {
        if (is_null($verify)) {
            throw new \InvalidArgumentException('non-nullable verify cannot be null');
        }
        $this->container['verify'] = $verify;

        return $this;
    }

    /**
     * Gets db_tables_prefix
     *
     * @return string|null
     */
    public function getDbTablesPrefix()
    {
        return $this->container['db_tables_prefix'];
    }

    /**
     * Sets db_tables_prefix
     *
     * @param string|null $db_tables_prefix DB tables prefix
     *
     * @return self
     */
    public function setDbTablesPrefix($db_tables_prefix)
    {
        if (is_null($db_tables_prefix)) {
            throw new \InvalidArgumentException('non-nullable db_tables_prefix cannot be null');
        }
        $this->container['db_tables_prefix'] = $db_tables_prefix;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string|null $user_agent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store's firewall may block specific values.
     *
     * @return self
     */
    public function setUserAgent($user_agent)
    {
        if (is_null($user_agent)) {
            throw new \InvalidArgumentException('non-nullable user_agent cannot be null');
        }
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets ftp_host
     *
     * @return string|null
     */
    public function getFtpHost()
    {
        return $this->container['ftp_host'];
    }

    /**
     * Sets ftp_host
     *
     * @param string|null $ftp_host FTP connection host
     *
     * @return self
     */
    public function setFtpHost($ftp_host)
    {
        if (is_null($ftp_host)) {
            throw new \InvalidArgumentException('non-nullable ftp_host cannot be null');
        }
        $this->container['ftp_host'] = $ftp_host;

        return $this;
    }

    /**
     * Gets ftp_user
     *
     * @return string|null
     */
    public function getFtpUser()
    {
        return $this->container['ftp_user'];
    }

    /**
     * Sets ftp_user
     *
     * @param string|null $ftp_user FTP User
     *
     * @return self
     */
    public function setFtpUser($ftp_user)
    {
        if (is_null($ftp_user)) {
            throw new \InvalidArgumentException('non-nullable ftp_user cannot be null');
        }
        $this->container['ftp_user'] = $ftp_user;

        return $this;
    }

    /**
     * Gets ftp_password
     *
     * @return string|null
     */
    public function getFtpPassword()
    {
        return $this->container['ftp_password'];
    }

    /**
     * Sets ftp_password
     *
     * @param string|null $ftp_password FTP Password
     *
     * @return self
     */
    public function setFtpPassword($ftp_password)
    {
        if (is_null($ftp_password)) {
            throw new \InvalidArgumentException('non-nullable ftp_password cannot be null');
        }
        $this->container['ftp_password'] = $ftp_password;

        return $this;
    }

    /**
     * Gets ftp_port
     *
     * @return int|null
     */
    public function getFtpPort()
    {
        return $this->container['ftp_port'];
    }

    /**
     * Sets ftp_port
     *
     * @param int|null $ftp_port FTP Port
     *
     * @return self
     */
    public function setFtpPort($ftp_port)
    {
        if (is_null($ftp_port)) {
            throw new \InvalidArgumentException('non-nullable ftp_port cannot be null');
        }
        $this->container['ftp_port'] = $ftp_port;

        return $this;
    }

    /**
     * Gets ftp_store_dir
     *
     * @return string|null
     */
    public function getFtpStoreDir()
    {
        return $this->container['ftp_store_dir'];
    }

    /**
     * Sets ftp_store_dir
     *
     * @param string|null $ftp_store_dir FTP Store dir
     *
     * @return self
     */
    public function setFtpStoreDir($ftp_store_dir)
    {
        if (is_null($ftp_store_dir)) {
            throw new \InvalidArgumentException('non-nullable ftp_store_dir cannot be null');
        }
        $this->container['ftp_store_dir'] = $ftp_store_dir;

        return $this;
    }

    /**
     * Gets _3dcart_private_key
     *
     * @return string|null
     */
    public function get3dcartPrivateKey()
    {
        return $this->container['_3dcart_private_key'];
    }

    /**
     * Sets _3dcart_private_key
     *
     * @param string|null $_3dcart_private_key 3DCart Private Key
     *
     * @return self
     */
    public function set3dcartPrivateKey($_3dcart_private_key)
    {
        if (is_null($_3dcart_private_key)) {
            throw new \InvalidArgumentException('non-nullable _3dcart_private_key cannot be null');
        }
        $this->container['_3dcart_private_key'] = $_3dcart_private_key;

        return $this;
    }

    /**
     * Gets _3dcart_access_token
     *
     * @return string|null
     */
    public function get3dcartAccessToken()
    {
        return $this->container['_3dcart_access_token'];
    }

    /**
     * Sets _3dcart_access_token
     *
     * @param string|null $_3dcart_access_token 3DCart Token
     *
     * @return self
     */
    public function set3dcartAccessToken($_3dcart_access_token)
    {
        if (is_null($_3dcart_access_token)) {
            throw new \InvalidArgumentException('non-nullable _3dcart_access_token cannot be null');
        }
        $this->container['_3dcart_access_token'] = $_3dcart_access_token;

        return $this;
    }

    /**
     * Gets _3dcartapi_api_key
     *
     * @return string|null
     */
    public function get3dcartapiApiKey()
    {
        return $this->container['_3dcartapi_api_key'];
    }

    /**
     * Sets _3dcartapi_api_key
     *
     * @param string|null $_3dcartapi_api_key 3DCart API Key
     *
     * @return self
     */
    public function set3dcartapiApiKey($_3dcartapi_api_key)
    {
        if (is_null($_3dcartapi_api_key)) {
            throw new \InvalidArgumentException('non-nullable _3dcartapi_api_key cannot be null');
        }
        $this->container['_3dcartapi_api_key'] = $_3dcartapi_api_key;

        return $this;
    }

    /**
     * Gets amazon_sp_client_id
     *
     * @return string|null
     */
    public function getAmazonSpClientId()
    {
        return $this->container['amazon_sp_client_id'];
    }

    /**
     * Sets amazon_sp_client_id
     *
     * @param string|null $amazon_sp_client_id Amazon SP API app client id
     *
     * @return self
     */
    public function setAmazonSpClientId($amazon_sp_client_id)
    {
        if (is_null($amazon_sp_client_id)) {
            throw new \InvalidArgumentException('non-nullable amazon_sp_client_id cannot be null');
        }
        $this->container['amazon_sp_client_id'] = $amazon_sp_client_id;

        return $this;
    }

    /**
     * Gets amazon_sp_client_secret
     *
     * @return string|null
     */
    public function getAmazonSpClientSecret()
    {
        return $this->container['amazon_sp_client_secret'];
    }

    /**
     * Sets amazon_sp_client_secret
     *
     * @param string|null $amazon_sp_client_secret Amazon SP API app client secret
     *
     * @return self
     */
    public function setAmazonSpClientSecret($amazon_sp_client_secret)
    {
        if (is_null($amazon_sp_client_secret)) {
            throw new \InvalidArgumentException('non-nullable amazon_sp_client_secret cannot be null');
        }
        $this->container['amazon_sp_client_secret'] = $amazon_sp_client_secret;

        return $this;
    }

    /**
     * Gets amazon_sp_refresh_token
     *
     * @return string|null
     */
    public function getAmazonSpRefreshToken()
    {
        return $this->container['amazon_sp_refresh_token'];
    }

    /**
     * Sets amazon_sp_refresh_token
     *
     * @param string|null $amazon_sp_refresh_token Amazon SP API OAuth refresh token
     *
     * @return self
     */
    public function setAmazonSpRefreshToken($amazon_sp_refresh_token)
    {
        if (is_null($amazon_sp_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable amazon_sp_refresh_token cannot be null');
        }
        $this->container['amazon_sp_refresh_token'] = $amazon_sp_refresh_token;

        return $this;
    }

    /**
     * Gets amazon_sp_aws_region
     *
     * @return string|null
     */
    public function getAmazonSpAwsRegion()
    {
        return $this->container['amazon_sp_aws_region'];
    }

    /**
     * Sets amazon_sp_aws_region
     *
     * @param string|null $amazon_sp_aws_region Amazon AWS Region
     *
     * @return self
     */
    public function setAmazonSpAwsRegion($amazon_sp_aws_region)
    {
        if (is_null($amazon_sp_aws_region)) {
            throw new \InvalidArgumentException('non-nullable amazon_sp_aws_region cannot be null');
        }
        $this->container['amazon_sp_aws_region'] = $amazon_sp_aws_region;

        return $this;
    }

    /**
     * Gets amazon_sp_api_environment
     *
     * @return string|null
     */
    public function getAmazonSpApiEnvironment()
    {
        return $this->container['amazon_sp_api_environment'];
    }

    /**
     * Sets amazon_sp_api_environment
     *
     * @param string|null $amazon_sp_api_environment Amazon SP API environment
     *
     * @return self
     */
    public function setAmazonSpApiEnvironment($amazon_sp_api_environment)
    {
        if (is_null($amazon_sp_api_environment)) {
            throw new \InvalidArgumentException('non-nullable amazon_sp_api_environment cannot be null');
        }
        $this->container['amazon_sp_api_environment'] = $amazon_sp_api_environment;

        return $this;
    }

    /**
     * Gets amazon_seller_id
     *
     * @return string|null
     */
    public function getAmazonSellerId()
    {
        return $this->container['amazon_seller_id'];
    }

    /**
     * Sets amazon_seller_id
     *
     * @param string|null $amazon_seller_id Amazon Seller ID (Merchant token)
     *
     * @return self
     */
    public function setAmazonSellerId($amazon_seller_id)
    {
        if (is_null($amazon_seller_id)) {
            throw new \InvalidArgumentException('non-nullable amazon_seller_id cannot be null');
        }
        $this->container['amazon_seller_id'] = $amazon_seller_id;

        return $this;
    }

    /**
     * Gets aspdotnetstorefront_api_user
     *
     * @return string|null
     */
    public function getAspdotnetstorefrontApiUser()
    {
        return $this->container['aspdotnetstorefront_api_user'];
    }

    /**
     * Sets aspdotnetstorefront_api_user
     *
     * @param string|null $aspdotnetstorefront_api_user It's a AspDotNetStorefront account for which API is available
     *
     * @return self
     */
    public function setAspdotnetstorefrontApiUser($aspdotnetstorefront_api_user)
    {
        if (is_null($aspdotnetstorefront_api_user)) {
            throw new \InvalidArgumentException('non-nullable aspdotnetstorefront_api_user cannot be null');
        }
        $this->container['aspdotnetstorefront_api_user'] = $aspdotnetstorefront_api_user;

        return $this;
    }

    /**
     * Gets aspdotnetstorefront_api_pass
     *
     * @return string|null
     */
    public function getAspdotnetstorefrontApiPass()
    {
        return $this->container['aspdotnetstorefront_api_pass'];
    }

    /**
     * Sets aspdotnetstorefront_api_pass
     *
     * @param string|null $aspdotnetstorefront_api_pass AspDotNetStorefront API Password
     *
     * @return self
     */
    public function setAspdotnetstorefrontApiPass($aspdotnetstorefront_api_pass)
    {
        if (is_null($aspdotnetstorefront_api_pass)) {
            throw new \InvalidArgumentException('non-nullable aspdotnetstorefront_api_pass cannot be null');
        }
        $this->container['aspdotnetstorefront_api_pass'] = $aspdotnetstorefront_api_pass;

        return $this;
    }

    /**
     * Gets bigcommerceapi_admin_account
     *
     * @return string|null
     */
    public function getBigcommerceapiAdminAccount()
    {
        return $this->container['bigcommerceapi_admin_account'];
    }

    /**
     * Sets bigcommerceapi_admin_account
     *
     * @param string|null $bigcommerceapi_admin_account It's a BigCommerce account for which API is enabled
     *
     * @return self
     */
    public function setBigcommerceapiAdminAccount($bigcommerceapi_admin_account)
    {
        if (is_null($bigcommerceapi_admin_account)) {
            throw new \InvalidArgumentException('non-nullable bigcommerceapi_admin_account cannot be null');
        }
        $this->container['bigcommerceapi_admin_account'] = $bigcommerceapi_admin_account;

        return $this;
    }

    /**
     * Gets bigcommerceapi_api_path
     *
     * @return string|null
     */
    public function getBigcommerceapiApiPath()
    {
        return $this->container['bigcommerceapi_api_path'];
    }

    /**
     * Sets bigcommerceapi_api_path
     *
     * @param string|null $bigcommerceapi_api_path BigCommerce API URL
     *
     * @return self
     */
    public function setBigcommerceapiApiPath($bigcommerceapi_api_path)
    {
        if (is_null($bigcommerceapi_api_path)) {
            throw new \InvalidArgumentException('non-nullable bigcommerceapi_api_path cannot be null');
        }
        $this->container['bigcommerceapi_api_path'] = $bigcommerceapi_api_path;

        return $this;
    }

    /**
     * Gets bigcommerceapi_api_key
     *
     * @return string|null
     */
    public function getBigcommerceapiApiKey()
    {
        return $this->container['bigcommerceapi_api_key'];
    }

    /**
     * Sets bigcommerceapi_api_key
     *
     * @param string|null $bigcommerceapi_api_key Bigcommerce API Key
     *
     * @return self
     */
    public function setBigcommerceapiApiKey($bigcommerceapi_api_key)
    {
        if (is_null($bigcommerceapi_api_key)) {
            throw new \InvalidArgumentException('non-nullable bigcommerceapi_api_key cannot be null');
        }
        $this->container['bigcommerceapi_api_key'] = $bigcommerceapi_api_key;

        return $this;
    }

    /**
     * Gets bigcommerceapi_client_id
     *
     * @return string|null
     */
    public function getBigcommerceapiClientId()
    {
        return $this->container['bigcommerceapi_client_id'];
    }

    /**
     * Sets bigcommerceapi_client_id
     *
     * @param string|null $bigcommerceapi_client_id Client ID of the requesting app
     *
     * @return self
     */
    public function setBigcommerceapiClientId($bigcommerceapi_client_id)
    {
        if (is_null($bigcommerceapi_client_id)) {
            throw new \InvalidArgumentException('non-nullable bigcommerceapi_client_id cannot be null');
        }
        $this->container['bigcommerceapi_client_id'] = $bigcommerceapi_client_id;

        return $this;
    }

    /**
     * Gets bigcommerceapi_access_token
     *
     * @return string|null
     */
    public function getBigcommerceapiAccessToken()
    {
        return $this->container['bigcommerceapi_access_token'];
    }

    /**
     * Sets bigcommerceapi_access_token
     *
     * @param string|null $bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user
     *
     * @return self
     */
    public function setBigcommerceapiAccessToken($bigcommerceapi_access_token)
    {
        if (is_null($bigcommerceapi_access_token)) {
            throw new \InvalidArgumentException('non-nullable bigcommerceapi_access_token cannot be null');
        }
        $this->container['bigcommerceapi_access_token'] = $bigcommerceapi_access_token;

        return $this;
    }

    /**
     * Gets bigcommerceapi_context
     *
     * @return string|null
     */
    public function getBigcommerceapiContext()
    {
        return $this->container['bigcommerceapi_context'];
    }

    /**
     * Sets bigcommerceapi_context
     *
     * @param string|null $bigcommerceapi_context API Path section unique to the store
     *
     * @return self
     */
    public function setBigcommerceapiContext($bigcommerceapi_context)
    {
        if (is_null($bigcommerceapi_context)) {
            throw new \InvalidArgumentException('non-nullable bigcommerceapi_context cannot be null');
        }
        $this->container['bigcommerceapi_context'] = $bigcommerceapi_context;

        return $this;
    }

    /**
     * Gets bol_api_key
     *
     * @return string|null
     */
    public function getBolApiKey()
    {
        return $this->container['bol_api_key'];
    }

    /**
     * Sets bol_api_key
     *
     * @param string|null $bol_api_key Bol API Key
     *
     * @return self
     */
    public function setBolApiKey($bol_api_key)
    {
        if (is_null($bol_api_key)) {
            throw new \InvalidArgumentException('non-nullable bol_api_key cannot be null');
        }
        $this->container['bol_api_key'] = $bol_api_key;

        return $this;
    }

    /**
     * Gets bol_api_secret
     *
     * @return string|null
     */
    public function getBolApiSecret()
    {
        return $this->container['bol_api_secret'];
    }

    /**
     * Sets bol_api_secret
     *
     * @param string|null $bol_api_secret Bol API Secret
     *
     * @return self
     */
    public function setBolApiSecret($bol_api_secret)
    {
        if (is_null($bol_api_secret)) {
            throw new \InvalidArgumentException('non-nullable bol_api_secret cannot be null');
        }
        $this->container['bol_api_secret'] = $bol_api_secret;

        return $this;
    }

    /**
     * Gets bol_retailer_id
     *
     * @return int|null
     */
    public function getBolRetailerId()
    {
        return $this->container['bol_retailer_id'];
    }

    /**
     * Sets bol_retailer_id
     *
     * @param int|null $bol_retailer_id Bol Retailer ID
     *
     * @return self
     */
    public function setBolRetailerId($bol_retailer_id)
    {
        if (is_null($bol_retailer_id)) {
            throw new \InvalidArgumentException('non-nullable bol_retailer_id cannot be null');
        }
        $this->container['bol_retailer_id'] = $bol_retailer_id;

        return $this;
    }

    /**
     * Gets bigcartel_user_name
     *
     * @return string|null
     */
    public function getBigcartelUserName()
    {
        return $this->container['bigcartel_user_name'];
    }

    /**
     * Sets bigcartel_user_name
     *
     * @param string|null $bigcartel_user_name Subdomain of store
     *
     * @return self
     */
    public function setBigcartelUserName($bigcartel_user_name)
    {
        if (is_null($bigcartel_user_name)) {
            throw new \InvalidArgumentException('non-nullable bigcartel_user_name cannot be null');
        }
        $this->container['bigcartel_user_name'] = $bigcartel_user_name;

        return $this;
    }

    /**
     * Gets bigcartel_password
     *
     * @return string|null
     */
    public function getBigcartelPassword()
    {
        return $this->container['bigcartel_password'];
    }

    /**
     * Sets bigcartel_password
     *
     * @param string|null $bigcartel_password BigCartel account password
     *
     * @return self
     */
    public function setBigcartelPassword($bigcartel_password)
    {
        if (is_null($bigcartel_password)) {
            throw new \InvalidArgumentException('non-nullable bigcartel_password cannot be null');
        }
        $this->container['bigcartel_password'] = $bigcartel_password;

        return $this;
    }

    /**
     * Gets bricklink_consumer_key
     *
     * @return string|null
     */
    public function getBricklinkConsumerKey()
    {
        return $this->container['bricklink_consumer_key'];
    }

    /**
     * Sets bricklink_consumer_key
     *
     * @param string|null $bricklink_consumer_key Bricklink Consumer Key
     *
     * @return self
     */
    public function setBricklinkConsumerKey($bricklink_consumer_key)
    {
        if (is_null($bricklink_consumer_key)) {
            throw new \InvalidArgumentException('non-nullable bricklink_consumer_key cannot be null');
        }
        $this->container['bricklink_consumer_key'] = $bricklink_consumer_key;

        return $this;
    }

    /**
     * Gets bricklink_consumer_secret
     *
     * @return string|null
     */
    public function getBricklinkConsumerSecret()
    {
        return $this->container['bricklink_consumer_secret'];
    }

    /**
     * Sets bricklink_consumer_secret
     *
     * @param string|null $bricklink_consumer_secret Bricklink Consumer Secret
     *
     * @return self
     */
    public function setBricklinkConsumerSecret($bricklink_consumer_secret)
    {
        if (is_null($bricklink_consumer_secret)) {
            throw new \InvalidArgumentException('non-nullable bricklink_consumer_secret cannot be null');
        }
        $this->container['bricklink_consumer_secret'] = $bricklink_consumer_secret;

        return $this;
    }

    /**
     * Gets bricklink_token
     *
     * @return string|null
     */
    public function getBricklinkToken()
    {
        return $this->container['bricklink_token'];
    }

    /**
     * Sets bricklink_token
     *
     * @param string|null $bricklink_token Bricklink Access Token
     *
     * @return self
     */
    public function setBricklinkToken($bricklink_token)
    {
        if (is_null($bricklink_token)) {
            throw new \InvalidArgumentException('non-nullable bricklink_token cannot be null');
        }
        $this->container['bricklink_token'] = $bricklink_token;

        return $this;
    }

    /**
     * Gets bricklink_token_secret
     *
     * @return string|null
     */
    public function getBricklinkTokenSecret()
    {
        return $this->container['bricklink_token_secret'];
    }

    /**
     * Sets bricklink_token_secret
     *
     * @param string|null $bricklink_token_secret Bricklink Access Token Secret
     *
     * @return self
     */
    public function setBricklinkTokenSecret($bricklink_token_secret)
    {
        if (is_null($bricklink_token_secret)) {
            throw new \InvalidArgumentException('non-nullable bricklink_token_secret cannot be null');
        }
        $this->container['bricklink_token_secret'] = $bricklink_token_secret;

        return $this;
    }

    /**
     * Gets demandware_client_id
     *
     * @return string|null
     */
    public function getDemandwareClientId()
    {
        return $this->container['demandware_client_id'];
    }

    /**
     * Sets demandware_client_id
     *
     * @param string|null $demandware_client_id Demandware client id
     *
     * @return self
     */
    public function setDemandwareClientId($demandware_client_id)
    {
        if (is_null($demandware_client_id)) {
            throw new \InvalidArgumentException('non-nullable demandware_client_id cannot be null');
        }
        $this->container['demandware_client_id'] = $demandware_client_id;

        return $this;
    }

    /**
     * Gets demandware_api_password
     *
     * @return string|null
     */
    public function getDemandwareApiPassword()
    {
        return $this->container['demandware_api_password'];
    }

    /**
     * Sets demandware_api_password
     *
     * @param string|null $demandware_api_password Demandware api password
     *
     * @return self
     */
    public function setDemandwareApiPassword($demandware_api_password)
    {
        if (is_null($demandware_api_password)) {
            throw new \InvalidArgumentException('non-nullable demandware_api_password cannot be null');
        }
        $this->container['demandware_api_password'] = $demandware_api_password;

        return $this;
    }

    /**
     * Gets demandware_user_name
     *
     * @return string|null
     */
    public function getDemandwareUserName()
    {
        return $this->container['demandware_user_name'];
    }

    /**
     * Sets demandware_user_name
     *
     * @param string|null $demandware_user_name Demandware user name
     *
     * @return self
     */
    public function setDemandwareUserName($demandware_user_name)
    {
        if (is_null($demandware_user_name)) {
            throw new \InvalidArgumentException('non-nullable demandware_user_name cannot be null');
        }
        $this->container['demandware_user_name'] = $demandware_user_name;

        return $this;
    }

    /**
     * Gets demandware_user_password
     *
     * @return string|null
     */
    public function getDemandwareUserPassword()
    {
        return $this->container['demandware_user_password'];
    }

    /**
     * Sets demandware_user_password
     *
     * @param string|null $demandware_user_password Demandware user password
     *
     * @return self
     */
    public function setDemandwareUserPassword($demandware_user_password)
    {
        if (is_null($demandware_user_password)) {
            throw new \InvalidArgumentException('non-nullable demandware_user_password cannot be null');
        }
        $this->container['demandware_user_password'] = $demandware_user_password;

        return $this;
    }

    /**
     * Gets ebay_client_id
     *
     * @return string|null
     */
    public function getEbayClientId()
    {
        return $this->container['ebay_client_id'];
    }

    /**
     * Sets ebay_client_id
     *
     * @param string|null $ebay_client_id Application ID (AppID).
     *
     * @return self
     */
    public function setEbayClientId($ebay_client_id)
    {
        if (is_null($ebay_client_id)) {
            throw new \InvalidArgumentException('non-nullable ebay_client_id cannot be null');
        }
        $this->container['ebay_client_id'] = $ebay_client_id;

        return $this;
    }

    /**
     * Gets ebay_client_secret
     *
     * @return string|null
     */
    public function getEbayClientSecret()
    {
        return $this->container['ebay_client_secret'];
    }

    /**
     * Sets ebay_client_secret
     *
     * @param string|null $ebay_client_secret Shared Secret from eBay application
     *
     * @return self
     */
    public function setEbayClientSecret($ebay_client_secret)
    {
        if (is_null($ebay_client_secret)) {
            throw new \InvalidArgumentException('non-nullable ebay_client_secret cannot be null');
        }
        $this->container['ebay_client_secret'] = $ebay_client_secret;

        return $this;
    }

    /**
     * Gets ebay_runame
     *
     * @return string|null
     */
    public function getEbayRuname()
    {
        return $this->container['ebay_runame'];
    }

    /**
     * Sets ebay_runame
     *
     * @param string|null $ebay_runame The RuName value that eBay assigns to your application.
     *
     * @return self
     */
    public function setEbayRuname($ebay_runame)
    {
        if (is_null($ebay_runame)) {
            throw new \InvalidArgumentException('non-nullable ebay_runame cannot be null');
        }
        $this->container['ebay_runame'] = $ebay_runame;

        return $this;
    }

    /**
     * Gets ebay_access_token
     *
     * @return string|null
     */
    public function getEbayAccessToken()
    {
        return $this->container['ebay_access_token'];
    }

    /**
     * Sets ebay_access_token
     *
     * @param string|null $ebay_access_token Used to authenticate API requests.
     *
     * @return self
     */
    public function setEbayAccessToken($ebay_access_token)
    {
        if (is_null($ebay_access_token)) {
            throw new \InvalidArgumentException('non-nullable ebay_access_token cannot be null');
        }
        $this->container['ebay_access_token'] = $ebay_access_token;

        return $this;
    }

    /**
     * Gets ebay_refresh_token
     *
     * @return string|null
     */
    public function getEbayRefreshToken()
    {
        return $this->container['ebay_refresh_token'];
    }

    /**
     * Sets ebay_refresh_token
     *
     * @param string|null $ebay_refresh_token Used to renew the access token.
     *
     * @return self
     */
    public function setEbayRefreshToken($ebay_refresh_token)
    {
        if (is_null($ebay_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable ebay_refresh_token cannot be null');
        }
        $this->container['ebay_refresh_token'] = $ebay_refresh_token;

        return $this;
    }

    /**
     * Gets ebay_environment
     *
     * @return string|null
     */
    public function getEbayEnvironment()
    {
        return $this->container['ebay_environment'];
    }

    /**
     * Sets ebay_environment
     *
     * @param string|null $ebay_environment eBay environment
     *
     * @return self
     */
    public function setEbayEnvironment($ebay_environment)
    {
        if (is_null($ebay_environment)) {
            throw new \InvalidArgumentException('non-nullable ebay_environment cannot be null');
        }
        $this->container['ebay_environment'] = $ebay_environment;

        return $this;
    }

    /**
     * Gets ebay_site_id
     *
     * @return int|null
     */
    public function getEbaySiteId()
    {
        return $this->container['ebay_site_id'];
    }

    /**
     * Sets ebay_site_id
     *
     * @param int|null $ebay_site_id eBay global ID
     *
     * @return self
     */
    public function setEbaySiteId($ebay_site_id)
    {
        if (is_null($ebay_site_id)) {
            throw new \InvalidArgumentException('non-nullable ebay_site_id cannot be null');
        }
        $this->container['ebay_site_id'] = $ebay_site_id;

        return $this;
    }

    /**
     * Gets walmart_client_id
     *
     * @return string|null
     */
    public function getWalmartClientId()
    {
        return $this->container['walmart_client_id'];
    }

    /**
     * Sets walmart_client_id
     *
     * @param string|null $walmart_client_id Walmart client ID. For the region 'ca' use Consumer ID
     *
     * @return self
     */
    public function setWalmartClientId($walmart_client_id)
    {
        if (is_null($walmart_client_id)) {
            throw new \InvalidArgumentException('non-nullable walmart_client_id cannot be null');
        }
        $this->container['walmart_client_id'] = $walmart_client_id;

        return $this;
    }

    /**
     * Gets walmart_client_secret
     *
     * @return string|null
     */
    public function getWalmartClientSecret()
    {
        return $this->container['walmart_client_secret'];
    }

    /**
     * Sets walmart_client_secret
     *
     * @param string|null $walmart_client_secret Walmart client secret. For the region 'ca' use Private Key
     *
     * @return self
     */
    public function setWalmartClientSecret($walmart_client_secret)
    {
        if (is_null($walmart_client_secret)) {
            throw new \InvalidArgumentException('non-nullable walmart_client_secret cannot be null');
        }
        $this->container['walmart_client_secret'] = $walmart_client_secret;

        return $this;
    }

    /**
     * Gets walmart_environment
     *
     * @return string|null
     */
    public function getWalmartEnvironment()
    {
        return $this->container['walmart_environment'];
    }

    /**
     * Sets walmart_environment
     *
     * @param string|null $walmart_environment Walmart environment
     *
     * @return self
     */
    public function setWalmartEnvironment($walmart_environment)
    {
        if (is_null($walmart_environment)) {
            throw new \InvalidArgumentException('non-nullable walmart_environment cannot be null');
        }
        $this->container['walmart_environment'] = $walmart_environment;

        return $this;
    }

    /**
     * Gets walmart_channel_type
     *
     * @return string|null
     */
    public function getWalmartChannelType()
    {
        return $this->container['walmart_channel_type'];
    }

    /**
     * Sets walmart_channel_type
     *
     * @param string|null $walmart_channel_type Walmart WM_CONSUMER.CHANNEL.TYPE header
     *
     * @return self
     */
    public function setWalmartChannelType($walmart_channel_type)
    {
        if (is_null($walmart_channel_type)) {
            throw new \InvalidArgumentException('non-nullable walmart_channel_type cannot be null');
        }
        $this->container['walmart_channel_type'] = $walmart_channel_type;

        return $this;
    }

    /**
     * Gets walmart_region
     *
     * @return string|null
     */
    public function getWalmartRegion()
    {
        return $this->container['walmart_region'];
    }

    /**
     * Sets walmart_region
     *
     * @param string|null $walmart_region Walmart region
     *
     * @return self
     */
    public function setWalmartRegion($walmart_region)
    {
        if (is_null($walmart_region)) {
            throw new \InvalidArgumentException('non-nullable walmart_region cannot be null');
        }
        $this->container['walmart_region'] = $walmart_region;

        return $this;
    }

    /**
     * Gets ecwid_acess_token
     *
     * @return string|null
     */
    public function getEcwidAcessToken()
    {
        return $this->container['ecwid_acess_token'];
    }

    /**
     * Sets ecwid_acess_token
     *
     * @param string|null $ecwid_acess_token Access token authorizing the app to access resources on behalf of a user
     *
     * @return self
     */
    public function setEcwidAcessToken($ecwid_acess_token)
    {
        if (is_null($ecwid_acess_token)) {
            throw new \InvalidArgumentException('non-nullable ecwid_acess_token cannot be null');
        }
        $this->container['ecwid_acess_token'] = $ecwid_acess_token;

        return $this;
    }

    /**
     * Gets ecwid_store_id
     *
     * @return string|null
     */
    public function getEcwidStoreId()
    {
        return $this->container['ecwid_store_id'];
    }

    /**
     * Sets ecwid_store_id
     *
     * @param string|null $ecwid_store_id Store Id
     *
     * @return self
     */
    public function setEcwidStoreId($ecwid_store_id)
    {
        if (is_null($ecwid_store_id)) {
            throw new \InvalidArgumentException('non-nullable ecwid_store_id cannot be null');
        }
        $this->container['ecwid_store_id'] = $ecwid_store_id;

        return $this;
    }

    /**
     * Gets lazada_app_id
     *
     * @return string|null
     */
    public function getLazadaAppId()
    {
        return $this->container['lazada_app_id'];
    }

    /**
     * Sets lazada_app_id
     *
     * @param string|null $lazada_app_id Lazada App ID
     *
     * @return self
     */
    public function setLazadaAppId($lazada_app_id)
    {
        if (is_null($lazada_app_id)) {
            throw new \InvalidArgumentException('non-nullable lazada_app_id cannot be null');
        }
        $this->container['lazada_app_id'] = $lazada_app_id;

        return $this;
    }

    /**
     * Gets lazada_app_secret
     *
     * @return string|null
     */
    public function getLazadaAppSecret()
    {
        return $this->container['lazada_app_secret'];
    }

    /**
     * Sets lazada_app_secret
     *
     * @param string|null $lazada_app_secret Lazada App Secret
     *
     * @return self
     */
    public function setLazadaAppSecret($lazada_app_secret)
    {
        if (is_null($lazada_app_secret)) {
            throw new \InvalidArgumentException('non-nullable lazada_app_secret cannot be null');
        }
        $this->container['lazada_app_secret'] = $lazada_app_secret;

        return $this;
    }

    /**
     * Gets lazada_refresh_token
     *
     * @return string|null
     */
    public function getLazadaRefreshToken()
    {
        return $this->container['lazada_refresh_token'];
    }

    /**
     * Sets lazada_refresh_token
     *
     * @param string|null $lazada_refresh_token Lazada Refresh Token
     *
     * @return self
     */
    public function setLazadaRefreshToken($lazada_refresh_token)
    {
        if (is_null($lazada_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable lazada_refresh_token cannot be null');
        }
        $this->container['lazada_refresh_token'] = $lazada_refresh_token;

        return $this;
    }

    /**
     * Gets lazada_region
     *
     * @return string|null
     */
    public function getLazadaRegion()
    {
        return $this->container['lazada_region'];
    }

    /**
     * Sets lazada_region
     *
     * @param string|null $lazada_region Lazada API endpoint Region
     *
     * @return self
     */
    public function setLazadaRegion($lazada_region)
    {
        if (is_null($lazada_region)) {
            throw new \InvalidArgumentException('non-nullable lazada_region cannot be null');
        }
        $this->container['lazada_region'] = $lazada_region;

        return $this;
    }

    /**
     * Gets lightspeed_api_key
     *
     * @return string|null
     */
    public function getLightspeedApiKey()
    {
        return $this->container['lightspeed_api_key'];
    }

    /**
     * Sets lightspeed_api_key
     *
     * @param string|null $lightspeed_api_key LightSpeed api key
     *
     * @return self
     */
    public function setLightspeedApiKey($lightspeed_api_key)
    {
        if (is_null($lightspeed_api_key)) {
            throw new \InvalidArgumentException('non-nullable lightspeed_api_key cannot be null');
        }
        $this->container['lightspeed_api_key'] = $lightspeed_api_key;

        return $this;
    }

    /**
     * Gets lightspeed_api_secret
     *
     * @return string|null
     */
    public function getLightspeedApiSecret()
    {
        return $this->container['lightspeed_api_secret'];
    }

    /**
     * Sets lightspeed_api_secret
     *
     * @param string|null $lightspeed_api_secret LightSpeed api secret
     *
     * @return self
     */
    public function setLightspeedApiSecret($lightspeed_api_secret)
    {
        if (is_null($lightspeed_api_secret)) {
            throw new \InvalidArgumentException('non-nullable lightspeed_api_secret cannot be null');
        }
        $this->container['lightspeed_api_secret'] = $lightspeed_api_secret;

        return $this;
    }

    /**
     * Gets etsy_keystring
     *
     * @return string|null
     */
    public function getEtsyKeystring()
    {
        return $this->container['etsy_keystring'];
    }

    /**
     * Sets etsy_keystring
     *
     * @param string|null $etsy_keystring Etsy keystring
     *
     * @return self
     */
    public function setEtsyKeystring($etsy_keystring)
    {
        if (is_null($etsy_keystring)) {
            throw new \InvalidArgumentException('non-nullable etsy_keystring cannot be null');
        }
        $this->container['etsy_keystring'] = $etsy_keystring;

        return $this;
    }

    /**
     * Gets etsy_shared_secret
     *
     * @return string|null
     */
    public function getEtsySharedSecret()
    {
        return $this->container['etsy_shared_secret'];
    }

    /**
     * Sets etsy_shared_secret
     *
     * @param string|null $etsy_shared_secret Etsy shared secret
     *
     * @return self
     */
    public function setEtsySharedSecret($etsy_shared_secret)
    {
        if (is_null($etsy_shared_secret)) {
            throw new \InvalidArgumentException('non-nullable etsy_shared_secret cannot be null');
        }
        $this->container['etsy_shared_secret'] = $etsy_shared_secret;

        return $this;
    }

    /**
     * Gets etsy_access_token
     *
     * @return string|null
     */
    public function getEtsyAccessToken()
    {
        return $this->container['etsy_access_token'];
    }

    /**
     * Sets etsy_access_token
     *
     * @param string|null $etsy_access_token Access token authorizing the app to access resources on behalf of a user
     *
     * @return self
     */
    public function setEtsyAccessToken($etsy_access_token)
    {
        if (is_null($etsy_access_token)) {
            throw new \InvalidArgumentException('non-nullable etsy_access_token cannot be null');
        }
        $this->container['etsy_access_token'] = $etsy_access_token;

        return $this;
    }

    /**
     * Gets etsy_token_secret
     *
     * @return string|null
     */
    public function getEtsyTokenSecret()
    {
        return $this->container['etsy_token_secret'];
    }

    /**
     * Sets etsy_token_secret
     *
     * @param string|null $etsy_token_secret Secret token authorizing the app to access resources on behalf of a user
     *
     * @return self
     */
    public function setEtsyTokenSecret($etsy_token_secret)
    {
        if (is_null($etsy_token_secret)) {
            throw new \InvalidArgumentException('non-nullable etsy_token_secret cannot be null');
        }
        $this->container['etsy_token_secret'] = $etsy_token_secret;

        return $this;
    }

    /**
     * Gets etsy_client_id
     *
     * @return string|null
     */
    public function getEtsyClientId()
    {
        return $this->container['etsy_client_id'];
    }

    /**
     * Sets etsy_client_id
     *
     * @param string|null $etsy_client_id Etsy Client Id
     *
     * @return self
     */
    public function setEtsyClientId($etsy_client_id)
    {
        if (is_null($etsy_client_id)) {
            throw new \InvalidArgumentException('non-nullable etsy_client_id cannot be null');
        }
        $this->container['etsy_client_id'] = $etsy_client_id;

        return $this;
    }

    /**
     * Gets etsy_refresh_token
     *
     * @return string|null
     */
    public function getEtsyRefreshToken()
    {
        return $this->container['etsy_refresh_token'];
    }

    /**
     * Sets etsy_refresh_token
     *
     * @param string|null $etsy_refresh_token Etsy Refresh token
     *
     * @return self
     */
    public function setEtsyRefreshToken($etsy_refresh_token)
    {
        if (is_null($etsy_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable etsy_refresh_token cannot be null');
        }
        $this->container['etsy_refresh_token'] = $etsy_refresh_token;

        return $this;
    }

    /**
     * Gets facebook_app_id
     *
     * @return string|null
     */
    public function getFacebookAppId()
    {
        return $this->container['facebook_app_id'];
    }

    /**
     * Sets facebook_app_id
     *
     * @param string|null $facebook_app_id Facebook App ID
     *
     * @return self
     */
    public function setFacebookAppId($facebook_app_id)
    {
        if (is_null($facebook_app_id)) {
            throw new \InvalidArgumentException('non-nullable facebook_app_id cannot be null');
        }
        $this->container['facebook_app_id'] = $facebook_app_id;

        return $this;
    }

    /**
     * Gets facebook_app_secret
     *
     * @return string|null
     */
    public function getFacebookAppSecret()
    {
        return $this->container['facebook_app_secret'];
    }

    /**
     * Sets facebook_app_secret
     *
     * @param string|null $facebook_app_secret Facebook App Secret
     *
     * @return self
     */
    public function setFacebookAppSecret($facebook_app_secret)
    {
        if (is_null($facebook_app_secret)) {
            throw new \InvalidArgumentException('non-nullable facebook_app_secret cannot be null');
        }
        $this->container['facebook_app_secret'] = $facebook_app_secret;

        return $this;
    }

    /**
     * Gets facebook_access_token
     *
     * @return string|null
     */
    public function getFacebookAccessToken()
    {
        return $this->container['facebook_access_token'];
    }

    /**
     * Sets facebook_access_token
     *
     * @param string|null $facebook_access_token Facebook Access Token
     *
     * @return self
     */
    public function setFacebookAccessToken($facebook_access_token)
    {
        if (is_null($facebook_access_token)) {
            throw new \InvalidArgumentException('non-nullable facebook_access_token cannot be null');
        }
        $this->container['facebook_access_token'] = $facebook_access_token;

        return $this;
    }

    /**
     * Gets facebook_business_id
     *
     * @return string|null
     */
    public function getFacebookBusinessId()
    {
        return $this->container['facebook_business_id'];
    }

    /**
     * Sets facebook_business_id
     *
     * @param string|null $facebook_business_id Facebook Business ID
     *
     * @return self
     */
    public function setFacebookBusinessId($facebook_business_id)
    {
        if (is_null($facebook_business_id)) {
            throw new \InvalidArgumentException('non-nullable facebook_business_id cannot be null');
        }
        $this->container['facebook_business_id'] = $facebook_business_id;

        return $this;
    }

    /**
     * Gets neto_api_key
     *
     * @return string|null
     */
    public function getNetoApiKey()
    {
        return $this->container['neto_api_key'];
    }

    /**
     * Sets neto_api_key
     *
     * @param string|null $neto_api_key Neto API Key
     *
     * @return self
     */
    public function setNetoApiKey($neto_api_key)
    {
        if (is_null($neto_api_key)) {
            throw new \InvalidArgumentException('non-nullable neto_api_key cannot be null');
        }
        $this->container['neto_api_key'] = $neto_api_key;

        return $this;
    }

    /**
     * Gets neto_api_username
     *
     * @return string|null
     */
    public function getNetoApiUsername()
    {
        return $this->container['neto_api_username'];
    }

    /**
     * Sets neto_api_username
     *
     * @param string|null $neto_api_username Neto User Name
     *
     * @return self
     */
    public function setNetoApiUsername($neto_api_username)
    {
        if (is_null($neto_api_username)) {
            throw new \InvalidArgumentException('non-nullable neto_api_username cannot be null');
        }
        $this->container['neto_api_username'] = $neto_api_username;

        return $this;
    }

    /**
     * Gets shopline_access_token
     *
     * @return string|null
     */
    public function getShoplineAccessToken()
    {
        return $this->container['shopline_access_token'];
    }

    /**
     * Sets shopline_access_token
     *
     * @param string|null $shopline_access_token Shopline APP Key
     *
     * @return self
     */
    public function setShoplineAccessToken($shopline_access_token)
    {
        if (is_null($shopline_access_token)) {
            throw new \InvalidArgumentException('non-nullable shopline_access_token cannot be null');
        }
        $this->container['shopline_access_token'] = $shopline_access_token;

        return $this;
    }

    /**
     * Gets shopline_app_key
     *
     * @return string|null
     */
    public function getShoplineAppKey()
    {
        return $this->container['shopline_app_key'];
    }

    /**
     * Sets shopline_app_key
     *
     * @param string|null $shopline_app_key Shopline APP Key
     *
     * @return self
     */
    public function setShoplineAppKey($shopline_app_key)
    {
        if (is_null($shopline_app_key)) {
            throw new \InvalidArgumentException('non-nullable shopline_app_key cannot be null');
        }
        $this->container['shopline_app_key'] = $shopline_app_key;

        return $this;
    }

    /**
     * Gets shopline_app_secret
     *
     * @return string|null
     */
    public function getShoplineAppSecret()
    {
        return $this->container['shopline_app_secret'];
    }

    /**
     * Sets shopline_app_secret
     *
     * @param string|null $shopline_app_secret Shopline App Secret
     *
     * @return self
     */
    public function setShoplineAppSecret($shopline_app_secret)
    {
        if (is_null($shopline_app_secret)) {
            throw new \InvalidArgumentException('non-nullable shopline_app_secret cannot be null');
        }
        $this->container['shopline_app_secret'] = $shopline_app_secret;

        return $this;
    }

    /**
     * Gets shopline_shared_secret
     *
     * @return string|null
     */
    public function getShoplineSharedSecret()
    {
        return $this->container['shopline_shared_secret'];
    }

    /**
     * Sets shopline_shared_secret
     *
     * @param string|null $shopline_shared_secret Shopline Shared Secret
     *
     * @return self
     */
    public function setShoplineSharedSecret($shopline_shared_secret)
    {
        if (is_null($shopline_shared_secret)) {
            throw new \InvalidArgumentException('non-nullable shopline_shared_secret cannot be null');
        }
        $this->container['shopline_shared_secret'] = $shopline_shared_secret;

        return $this;
    }

    /**
     * Gets shopify_access_token
     *
     * @return string|null
     */
    public function getShopifyAccessToken()
    {
        return $this->container['shopify_access_token'];
    }

    /**
     * Sets shopify_access_token
     *
     * @param string|null $shopify_access_token Access token authorizing the app to access resources on behalf of a user
     *
     * @return self
     */
    public function setShopifyAccessToken($shopify_access_token)
    {
        if (is_null($shopify_access_token)) {
            throw new \InvalidArgumentException('non-nullable shopify_access_token cannot be null');
        }
        $this->container['shopify_access_token'] = $shopify_access_token;

        return $this;
    }

    /**
     * Gets shopify_api_key
     *
     * @return string|null
     */
    public function getShopifyApiKey()
    {
        return $this->container['shopify_api_key'];
    }

    /**
     * Sets shopify_api_key
     *
     * @param string|null $shopify_api_key Shopify API Key
     *
     * @return self
     */
    public function setShopifyApiKey($shopify_api_key)
    {
        if (is_null($shopify_api_key)) {
            throw new \InvalidArgumentException('non-nullable shopify_api_key cannot be null');
        }
        $this->container['shopify_api_key'] = $shopify_api_key;

        return $this;
    }

    /**
     * Gets shopify_api_password
     *
     * @return string|null
     */
    public function getShopifyApiPassword()
    {
        return $this->container['shopify_api_password'];
    }

    /**
     * Sets shopify_api_password
     *
     * @param string|null $shopify_api_password Shopify API Password
     *
     * @return self
     */
    public function setShopifyApiPassword($shopify_api_password)
    {
        if (is_null($shopify_api_password)) {
            throw new \InvalidArgumentException('non-nullable shopify_api_password cannot be null');
        }
        $this->container['shopify_api_password'] = $shopify_api_password;

        return $this;
    }

    /**
     * Gets shopify_shared_secret
     *
     * @return string|null
     */
    public function getShopifySharedSecret()
    {
        return $this->container['shopify_shared_secret'];
    }

    /**
     * Sets shopify_shared_secret
     *
     * @param string|null $shopify_shared_secret Shared secret
     *
     * @return self
     */
    public function setShopifySharedSecret($shopify_shared_secret)
    {
        if (is_null($shopify_shared_secret)) {
            throw new \InvalidArgumentException('non-nullable shopify_shared_secret cannot be null');
        }
        $this->container['shopify_shared_secret'] = $shopify_shared_secret;

        return $this;
    }

    /**
     * Gets shopee_partner_id
     *
     * @return string|null
     */
    public function getShopeePartnerId()
    {
        return $this->container['shopee_partner_id'];
    }

    /**
     * Sets shopee_partner_id
     *
     * @param string|null $shopee_partner_id Shopee Partner ID
     *
     * @return self
     */
    public function setShopeePartnerId($shopee_partner_id)
    {
        if (is_null($shopee_partner_id)) {
            throw new \InvalidArgumentException('non-nullable shopee_partner_id cannot be null');
        }
        $this->container['shopee_partner_id'] = $shopee_partner_id;

        return $this;
    }

    /**
     * Gets shopee_partner_key
     *
     * @return string|null
     */
    public function getShopeePartnerKey()
    {
        return $this->container['shopee_partner_key'];
    }

    /**
     * Sets shopee_partner_key
     *
     * @param string|null $shopee_partner_key Shopee Partner Key
     *
     * @return self
     */
    public function setShopeePartnerKey($shopee_partner_key)
    {
        if (is_null($shopee_partner_key)) {
            throw new \InvalidArgumentException('non-nullable shopee_partner_key cannot be null');
        }
        $this->container['shopee_partner_key'] = $shopee_partner_key;

        return $this;
    }

    /**
     * Gets shopee_shop_id
     *
     * @return string|null
     */
    public function getShopeeShopId()
    {
        return $this->container['shopee_shop_id'];
    }

    /**
     * Sets shopee_shop_id
     *
     * @param string|null $shopee_shop_id Shopee SHOP ID
     *
     * @return self
     */
    public function setShopeeShopId($shopee_shop_id)
    {
        if (is_null($shopee_shop_id)) {
            throw new \InvalidArgumentException('non-nullable shopee_shop_id cannot be null');
        }
        $this->container['shopee_shop_id'] = $shopee_shop_id;

        return $this;
    }

    /**
     * Gets shopee_refresh_token
     *
     * @return string|null
     */
    public function getShopeeRefreshToken()
    {
        return $this->container['shopee_refresh_token'];
    }

    /**
     * Sets shopee_refresh_token
     *
     * @param string|null $shopee_refresh_token Shopee Refresh Token
     *
     * @return self
     */
    public function setShopeeRefreshToken($shopee_refresh_token)
    {
        if (is_null($shopee_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable shopee_refresh_token cannot be null');
        }
        $this->container['shopee_refresh_token'] = $shopee_refresh_token;

        return $this;
    }

    /**
     * Gets shopee_region
     *
     * @return string|null
     */
    public function getShopeeRegion()
    {
        return $this->container['shopee_region'];
    }

    /**
     * Sets shopee_region
     *
     * @param string|null $shopee_region Shopee API endpoint Region. Use for Chinese Mainland or Brazil.
     *
     * @return self
     */
    public function setShopeeRegion($shopee_region)
    {
        if (is_null($shopee_region)) {
            throw new \InvalidArgumentException('non-nullable shopee_region cannot be null');
        }
        $this->container['shopee_region'] = $shopee_region;

        return $this;
    }

    /**
     * Gets shopee_environment
     *
     * @return string|null
     */
    public function getShopeeEnvironment()
    {
        return $this->container['shopee_environment'];
    }

    /**
     * Sets shopee_environment
     *
     * @param string|null $shopee_environment Shopee Environment
     *
     * @return self
     */
    public function setShopeeEnvironment($shopee_environment)
    {
        if (is_null($shopee_environment)) {
            throw new \InvalidArgumentException('non-nullable shopee_environment cannot be null');
        }
        $this->container['shopee_environment'] = $shopee_environment;

        return $this;
    }

    /**
     * Gets shoplazza_access_token
     *
     * @return string|null
     */
    public function getShoplazzaAccessToken()
    {
        return $this->container['shoplazza_access_token'];
    }

    /**
     * Sets shoplazza_access_token
     *
     * @param string|null $shoplazza_access_token Access token authorizing the app to access resources on behalf of a user
     *
     * @return self
     */
    public function setShoplazzaAccessToken($shoplazza_access_token)
    {
        if (is_null($shoplazza_access_token)) {
            throw new \InvalidArgumentException('non-nullable shoplazza_access_token cannot be null');
        }
        $this->container['shoplazza_access_token'] = $shoplazza_access_token;

        return $this;
    }

    /**
     * Gets shoplazza_shared_secret
     *
     * @return string|null
     */
    public function getShoplazzaSharedSecret()
    {
        return $this->container['shoplazza_shared_secret'];
    }

    /**
     * Sets shoplazza_shared_secret
     *
     * @param string|null $shoplazza_shared_secret Shared secret
     *
     * @return self
     */
    public function setShoplazzaSharedSecret($shoplazza_shared_secret)
    {
        if (is_null($shoplazza_shared_secret)) {
            throw new \InvalidArgumentException('non-nullable shoplazza_shared_secret cannot be null');
        }
        $this->container['shoplazza_shared_secret'] = $shoplazza_shared_secret;

        return $this;
    }

    /**
     * Gets shopware_access_key
     *
     * @return string|null
     */
    public function getShopwareAccessKey()
    {
        return $this->container['shopware_access_key'];
    }

    /**
     * Sets shopware_access_key
     *
     * @param string|null $shopware_access_key Shopware access key
     *
     * @return self
     */
    public function setShopwareAccessKey($shopware_access_key)
    {
        if (is_null($shopware_access_key)) {
            throw new \InvalidArgumentException('non-nullable shopware_access_key cannot be null');
        }
        $this->container['shopware_access_key'] = $shopware_access_key;

        return $this;
    }

    /**
     * Gets shopware_api_key
     *
     * @return string|null
     */
    public function getShopwareApiKey()
    {
        return $this->container['shopware_api_key'];
    }

    /**
     * Sets shopware_api_key
     *
     * @param string|null $shopware_api_key Shopware api key
     *
     * @return self
     */
    public function setShopwareApiKey($shopware_api_key)
    {
        if (is_null($shopware_api_key)) {
            throw new \InvalidArgumentException('non-nullable shopware_api_key cannot be null');
        }
        $this->container['shopware_api_key'] = $shopware_api_key;

        return $this;
    }

    /**
     * Gets shopware_api_secret
     *
     * @return string|null
     */
    public function getShopwareApiSecret()
    {
        return $this->container['shopware_api_secret'];
    }

    /**
     * Sets shopware_api_secret
     *
     * @param string|null $shopware_api_secret Shopware client secret access key
     *
     * @return self
     */
    public function setShopwareApiSecret($shopware_api_secret)
    {
        if (is_null($shopware_api_secret)) {
            throw new \InvalidArgumentException('non-nullable shopware_api_secret cannot be null');
        }
        $this->container['shopware_api_secret'] = $shopware_api_secret;

        return $this;
    }

    /**
     * Gets miva_access_token
     *
     * @return string|null
     */
    public function getMivaAccessToken()
    {
        return $this->container['miva_access_token'];
    }

    /**
     * Sets miva_access_token
     *
     * @param string|null $miva_access_token Miva access token
     *
     * @return self
     */
    public function setMivaAccessToken($miva_access_token)
    {
        if (is_null($miva_access_token)) {
            throw new \InvalidArgumentException('non-nullable miva_access_token cannot be null');
        }
        $this->container['miva_access_token'] = $miva_access_token;

        return $this;
    }

    /**
     * Gets miva_signature
     *
     * @return string|null
     */
    public function getMivaSignature()
    {
        return $this->container['miva_signature'];
    }

    /**
     * Sets miva_signature
     *
     * @param string|null $miva_signature Miva signature
     *
     * @return self
     */
    public function setMivaSignature($miva_signature)
    {
        if (is_null($miva_signature)) {
            throw new \InvalidArgumentException('non-nullable miva_signature cannot be null');
        }
        $this->container['miva_signature'] = $miva_signature;

        return $this;
    }

    /**
     * Gets tiendanube_user_id
     *
     * @return int|null
     */
    public function getTiendanubeUserId()
    {
        return $this->container['tiendanube_user_id'];
    }

    /**
     * Sets tiendanube_user_id
     *
     * @param int|null $tiendanube_user_id Tiendanube User ID
     *
     * @return self
     */
    public function setTiendanubeUserId($tiendanube_user_id)
    {
        if (is_null($tiendanube_user_id)) {
            throw new \InvalidArgumentException('non-nullable tiendanube_user_id cannot be null');
        }
        $this->container['tiendanube_user_id'] = $tiendanube_user_id;

        return $this;
    }

    /**
     * Gets tiendanube_access_token
     *
     * @return string|null
     */
    public function getTiendanubeAccessToken()
    {
        return $this->container['tiendanube_access_token'];
    }

    /**
     * Sets tiendanube_access_token
     *
     * @param string|null $tiendanube_access_token Tiendanube Access Token
     *
     * @return self
     */
    public function setTiendanubeAccessToken($tiendanube_access_token)
    {
        if (is_null($tiendanube_access_token)) {
            throw new \InvalidArgumentException('non-nullable tiendanube_access_token cannot be null');
        }
        $this->container['tiendanube_access_token'] = $tiendanube_access_token;

        return $this;
    }

    /**
     * Gets tiendanube_client_secret
     *
     * @return string|null
     */
    public function getTiendanubeClientSecret()
    {
        return $this->container['tiendanube_client_secret'];
    }

    /**
     * Sets tiendanube_client_secret
     *
     * @param string|null $tiendanube_client_secret Tiendanube Client Secret
     *
     * @return self
     */
    public function setTiendanubeClientSecret($tiendanube_client_secret)
    {
        if (is_null($tiendanube_client_secret)) {
            throw new \InvalidArgumentException('non-nullable tiendanube_client_secret cannot be null');
        }
        $this->container['tiendanube_client_secret'] = $tiendanube_client_secret;

        return $this;
    }

    /**
     * Gets volusion_login
     *
     * @return string|null
     */
    public function getVolusionLogin()
    {
        return $this->container['volusion_login'];
    }

    /**
     * Sets volusion_login
     *
     * @param string|null $volusion_login It's a Volusion account for which API is enabled
     *
     * @return self
     */
    public function setVolusionLogin($volusion_login)
    {
        if (is_null($volusion_login)) {
            throw new \InvalidArgumentException('non-nullable volusion_login cannot be null');
        }
        $this->container['volusion_login'] = $volusion_login;

        return $this;
    }

    /**
     * Gets volusion_password
     *
     * @return string|null
     */
    public function getVolusionPassword()
    {
        return $this->container['volusion_password'];
    }

    /**
     * Sets volusion_password
     *
     * @param string|null $volusion_password Volusion API Password
     *
     * @return self
     */
    public function setVolusionPassword($volusion_password)
    {
        if (is_null($volusion_password)) {
            throw new \InvalidArgumentException('non-nullable volusion_password cannot be null');
        }
        $this->container['volusion_password'] = $volusion_password;

        return $this;
    }

    /**
     * Gets hybris_client_id
     *
     * @return string|null
     */
    public function getHybrisClientId()
    {
        return $this->container['hybris_client_id'];
    }

    /**
     * Sets hybris_client_id
     *
     * @param string|null $hybris_client_id Omni Commerce Connector Client ID
     *
     * @return self
     */
    public function setHybrisClientId($hybris_client_id)
    {
        if (is_null($hybris_client_id)) {
            throw new \InvalidArgumentException('non-nullable hybris_client_id cannot be null');
        }
        $this->container['hybris_client_id'] = $hybris_client_id;

        return $this;
    }

    /**
     * Gets hybris_client_secret
     *
     * @return string|null
     */
    public function getHybrisClientSecret()
    {
        return $this->container['hybris_client_secret'];
    }

    /**
     * Sets hybris_client_secret
     *
     * @param string|null $hybris_client_secret Omni Commerce Connector Client Secret
     *
     * @return self
     */
    public function setHybrisClientSecret($hybris_client_secret)
    {
        if (is_null($hybris_client_secret)) {
            throw new \InvalidArgumentException('non-nullable hybris_client_secret cannot be null');
        }
        $this->container['hybris_client_secret'] = $hybris_client_secret;

        return $this;
    }

    /**
     * Gets hybris_username
     *
     * @return string|null
     */
    public function getHybrisUsername()
    {
        return $this->container['hybris_username'];
    }

    /**
     * Sets hybris_username
     *
     * @param string|null $hybris_username User Name
     *
     * @return self
     */
    public function setHybrisUsername($hybris_username)
    {
        if (is_null($hybris_username)) {
            throw new \InvalidArgumentException('non-nullable hybris_username cannot be null');
        }
        $this->container['hybris_username'] = $hybris_username;

        return $this;
    }

    /**
     * Gets hybris_password
     *
     * @return string|null
     */
    public function getHybrisPassword()
    {
        return $this->container['hybris_password'];
    }

    /**
     * Sets hybris_password
     *
     * @param string|null $hybris_password User password
     *
     * @return self
     */
    public function setHybrisPassword($hybris_password)
    {
        if (is_null($hybris_password)) {
            throw new \InvalidArgumentException('non-nullable hybris_password cannot be null');
        }
        $this->container['hybris_password'] = $hybris_password;

        return $this;
    }

    /**
     * Gets hybris_websites
     *
     * @return \OpenAPI\Client\Model\AccountCartAddHybrisWebsitesInner[]|null
     */
    public function getHybrisWebsites()
    {
        return $this->container['hybris_websites'];
    }

    /**
     * Sets hybris_websites
     *
     * @param \OpenAPI\Client\Model\AccountCartAddHybrisWebsitesInner[]|null $hybris_websites Websites to stores mapping data
     *
     * @return self
     */
    public function setHybrisWebsites($hybris_websites)
    {
        if (is_null($hybris_websites)) {
            throw new \InvalidArgumentException('non-nullable hybris_websites cannot be null');
        }


        if ((count($hybris_websites) < 1)) {
            throw new \InvalidArgumentException('invalid length for $hybris_websites when calling AccountCartAdd., number of items must be greater than or equal to 1.');
        }
        $this->container['hybris_websites'] = $hybris_websites;

        return $this;
    }

    /**
     * Gets square_client_id
     *
     * @return string|null
     */
    public function getSquareClientId()
    {
        return $this->container['square_client_id'];
    }

    /**
     * Sets square_client_id
     *
     * @param string|null $square_client_id Square (Weebly) Client ID
     *
     * @return self
     */
    public function setSquareClientId($square_client_id)
    {
        if (is_null($square_client_id)) {
            throw new \InvalidArgumentException('non-nullable square_client_id cannot be null');
        }
        $this->container['square_client_id'] = $square_client_id;

        return $this;
    }

    /**
     * Gets square_client_secret
     *
     * @return string|null
     */
    public function getSquareClientSecret()
    {
        return $this->container['square_client_secret'];
    }

    /**
     * Sets square_client_secret
     *
     * @param string|null $square_client_secret Square (Weebly) Client Secret
     *
     * @return self
     */
    public function setSquareClientSecret($square_client_secret)
    {
        if (is_null($square_client_secret)) {
            throw new \InvalidArgumentException('non-nullable square_client_secret cannot be null');
        }
        $this->container['square_client_secret'] = $square_client_secret;

        return $this;
    }

    /**
     * Gets square_refresh_token
     *
     * @return string|null
     */
    public function getSquareRefreshToken()
    {
        return $this->container['square_refresh_token'];
    }

    /**
     * Sets square_refresh_token
     *
     * @param string|null $square_refresh_token Square (Weebly) Refresh Token
     *
     * @return self
     */
    public function setSquareRefreshToken($square_refresh_token)
    {
        if (is_null($square_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable square_refresh_token cannot be null');
        }
        $this->container['square_refresh_token'] = $square_refresh_token;

        return $this;
    }

    /**
     * Gets squarespace_api_key
     *
     * @return string|null
     */
    public function getSquarespaceApiKey()
    {
        return $this->container['squarespace_api_key'];
    }

    /**
     * Sets squarespace_api_key
     *
     * @param string|null $squarespace_api_key Squarespace API Key
     *
     * @return self
     */
    public function setSquarespaceApiKey($squarespace_api_key)
    {
        if (is_null($squarespace_api_key)) {
            throw new \InvalidArgumentException('non-nullable squarespace_api_key cannot be null');
        }
        $this->container['squarespace_api_key'] = $squarespace_api_key;

        return $this;
    }

    /**
     * Gets squarespace_client_id
     *
     * @return string|null
     */
    public function getSquarespaceClientId()
    {
        return $this->container['squarespace_client_id'];
    }

    /**
     * Sets squarespace_client_id
     *
     * @param string|null $squarespace_client_id Squarespace Connector Client ID
     *
     * @return self
     */
    public function setSquarespaceClientId($squarespace_client_id)
    {
        if (is_null($squarespace_client_id)) {
            throw new \InvalidArgumentException('non-nullable squarespace_client_id cannot be null');
        }
        $this->container['squarespace_client_id'] = $squarespace_client_id;

        return $this;
    }

    /**
     * Gets squarespace_client_secret
     *
     * @return string|null
     */
    public function getSquarespaceClientSecret()
    {
        return $this->container['squarespace_client_secret'];
    }

    /**
     * Sets squarespace_client_secret
     *
     * @param string|null $squarespace_client_secret Squarespace Connector Client Secret
     *
     * @return self
     */
    public function setSquarespaceClientSecret($squarespace_client_secret)
    {
        if (is_null($squarespace_client_secret)) {
            throw new \InvalidArgumentException('non-nullable squarespace_client_secret cannot be null');
        }
        $this->container['squarespace_client_secret'] = $squarespace_client_secret;

        return $this;
    }

    /**
     * Gets squarespace_access_token
     *
     * @return string|null
     */
    public function getSquarespaceAccessToken()
    {
        return $this->container['squarespace_access_token'];
    }

    /**
     * Sets squarespace_access_token
     *
     * @param string|null $squarespace_access_token Squarespace access token
     *
     * @return self
     */
    public function setSquarespaceAccessToken($squarespace_access_token)
    {
        if (is_null($squarespace_access_token)) {
            throw new \InvalidArgumentException('non-nullable squarespace_access_token cannot be null');
        }
        $this->container['squarespace_access_token'] = $squarespace_access_token;

        return $this;
    }

    /**
     * Gets squarespace_refresh_token
     *
     * @return string|null
     */
    public function getSquarespaceRefreshToken()
    {
        return $this->container['squarespace_refresh_token'];
    }

    /**
     * Sets squarespace_refresh_token
     *
     * @param string|null $squarespace_refresh_token Squarespace refresh token
     *
     * @return self
     */
    public function setSquarespaceRefreshToken($squarespace_refresh_token)
    {
        if (is_null($squarespace_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable squarespace_refresh_token cannot be null');
        }
        $this->container['squarespace_refresh_token'] = $squarespace_refresh_token;

        return $this;
    }

    /**
     * Gets commercehq_api_key
     *
     * @return string|null
     */
    public function getCommercehqApiKey()
    {
        return $this->container['commercehq_api_key'];
    }

    /**
     * Sets commercehq_api_key
     *
     * @param string|null $commercehq_api_key CommerceHQ api key
     *
     * @return self
     */
    public function setCommercehqApiKey($commercehq_api_key)
    {
        if (is_null($commercehq_api_key)) {
            throw new \InvalidArgumentException('non-nullable commercehq_api_key cannot be null');
        }
        $this->container['commercehq_api_key'] = $commercehq_api_key;

        return $this;
    }

    /**
     * Gets commercehq_api_password
     *
     * @return string|null
     */
    public function getCommercehqApiPassword()
    {
        return $this->container['commercehq_api_password'];
    }

    /**
     * Sets commercehq_api_password
     *
     * @param string|null $commercehq_api_password CommerceHQ api password
     *
     * @return self
     */
    public function setCommercehqApiPassword($commercehq_api_password)
    {
        if (is_null($commercehq_api_password)) {
            throw new \InvalidArgumentException('non-nullable commercehq_api_password cannot be null');
        }
        $this->container['commercehq_api_password'] = $commercehq_api_password;

        return $this;
    }

    /**
     * Gets wc_consumer_key
     *
     * @return string|null
     */
    public function getWcConsumerKey()
    {
        return $this->container['wc_consumer_key'];
    }

    /**
     * Sets wc_consumer_key
     *
     * @param string|null $wc_consumer_key Woocommerce consumer key
     *
     * @return self
     */
    public function setWcConsumerKey($wc_consumer_key)
    {
        if (is_null($wc_consumer_key)) {
            throw new \InvalidArgumentException('non-nullable wc_consumer_key cannot be null');
        }
        $this->container['wc_consumer_key'] = $wc_consumer_key;

        return $this;
    }

    /**
     * Gets wc_consumer_secret
     *
     * @return string|null
     */
    public function getWcConsumerSecret()
    {
        return $this->container['wc_consumer_secret'];
    }

    /**
     * Sets wc_consumer_secret
     *
     * @param string|null $wc_consumer_secret Woocommerce consumer secret
     *
     * @return self
     */
    public function setWcConsumerSecret($wc_consumer_secret)
    {
        if (is_null($wc_consumer_secret)) {
            throw new \InvalidArgumentException('non-nullable wc_consumer_secret cannot be null');
        }
        $this->container['wc_consumer_secret'] = $wc_consumer_secret;

        return $this;
    }

    /**
     * Gets magento_consumer_key
     *
     * @return string|null
     */
    public function getMagentoConsumerKey()
    {
        return $this->container['magento_consumer_key'];
    }

    /**
     * Sets magento_consumer_key
     *
     * @param string|null $magento_consumer_key Magento Consumer Key
     *
     * @return self
     */
    public function setMagentoConsumerKey($magento_consumer_key)
    {
        if (is_null($magento_consumer_key)) {
            throw new \InvalidArgumentException('non-nullable magento_consumer_key cannot be null');
        }
        $this->container['magento_consumer_key'] = $magento_consumer_key;

        return $this;
    }

    /**
     * Gets magento_consumer_secret
     *
     * @return string|null
     */
    public function getMagentoConsumerSecret()
    {
        return $this->container['magento_consumer_secret'];
    }

    /**
     * Sets magento_consumer_secret
     *
     * @param string|null $magento_consumer_secret Magento Consumer Secret
     *
     * @return self
     */
    public function setMagentoConsumerSecret($magento_consumer_secret)
    {
        if (is_null($magento_consumer_secret)) {
            throw new \InvalidArgumentException('non-nullable magento_consumer_secret cannot be null');
        }
        $this->container['magento_consumer_secret'] = $magento_consumer_secret;

        return $this;
    }

    /**
     * Gets magento_access_token
     *
     * @return string|null
     */
    public function getMagentoAccessToken()
    {
        return $this->container['magento_access_token'];
    }

    /**
     * Sets magento_access_token
     *
     * @param string|null $magento_access_token Magento Access Token
     *
     * @return self
     */
    public function setMagentoAccessToken($magento_access_token)
    {
        if (is_null($magento_access_token)) {
            throw new \InvalidArgumentException('non-nullable magento_access_token cannot be null');
        }
        $this->container['magento_access_token'] = $magento_access_token;

        return $this;
    }

    /**
     * Gets magento_token_secret
     *
     * @return string|null
     */
    public function getMagentoTokenSecret()
    {
        return $this->container['magento_token_secret'];
    }

    /**
     * Sets magento_token_secret
     *
     * @param string|null $magento_token_secret Magento Token Secret
     *
     * @return self
     */
    public function setMagentoTokenSecret($magento_token_secret)
    {
        if (is_null($magento_token_secret)) {
            throw new \InvalidArgumentException('non-nullable magento_token_secret cannot be null');
        }
        $this->container['magento_token_secret'] = $magento_token_secret;

        return $this;
    }

    /**
     * Gets prestashop_webservice_key
     *
     * @return string|null
     */
    public function getPrestashopWebserviceKey()
    {
        return $this->container['prestashop_webservice_key'];
    }

    /**
     * Sets prestashop_webservice_key
     *
     * @param string|null $prestashop_webservice_key Prestashop webservice key
     *
     * @return self
     */
    public function setPrestashopWebserviceKey($prestashop_webservice_key)
    {
        if (is_null($prestashop_webservice_key)) {
            throw new \InvalidArgumentException('non-nullable prestashop_webservice_key cannot be null');
        }
        $this->container['prestashop_webservice_key'] = $prestashop_webservice_key;

        return $this;
    }

    /**
     * Gets wix_app_id
     *
     * @return string|null
     */
    public function getWixAppId()
    {
        return $this->container['wix_app_id'];
    }

    /**
     * Sets wix_app_id
     *
     * @param string|null $wix_app_id Wix App ID
     *
     * @return self
     */
    public function setWixAppId($wix_app_id)
    {
        if (is_null($wix_app_id)) {
            throw new \InvalidArgumentException('non-nullable wix_app_id cannot be null');
        }
        $this->container['wix_app_id'] = $wix_app_id;

        return $this;
    }

    /**
     * Gets wix_app_secret_key
     *
     * @return string|null
     */
    public function getWixAppSecretKey()
    {
        return $this->container['wix_app_secret_key'];
    }

    /**
     * Sets wix_app_secret_key
     *
     * @param string|null $wix_app_secret_key Wix App Secret Key
     *
     * @return self
     */
    public function setWixAppSecretKey($wix_app_secret_key)
    {
        if (is_null($wix_app_secret_key)) {
            throw new \InvalidArgumentException('non-nullable wix_app_secret_key cannot be null');
        }
        $this->container['wix_app_secret_key'] = $wix_app_secret_key;

        return $this;
    }

    /**
     * Gets wix_instance_id
     *
     * @return string|null
     */
    public function getWixInstanceId()
    {
        return $this->container['wix_instance_id'];
    }

    /**
     * Sets wix_instance_id
     *
     * @param string|null $wix_instance_id Wix Instance ID
     *
     * @return self
     */
    public function setWixInstanceId($wix_instance_id)
    {
        if (is_null($wix_instance_id)) {
            throw new \InvalidArgumentException('non-nullable wix_instance_id cannot be null');
        }
        $this->container['wix_instance_id'] = $wix_instance_id;

        return $this;
    }

    /**
     * Gets wix_refresh_token
     *
     * @return string|null
     */
    public function getWixRefreshToken()
    {
        return $this->container['wix_refresh_token'];
    }

    /**
     * Sets wix_refresh_token
     *
     * @param string|null $wix_refresh_token Wix refresh token
     *
     * @return self
     */
    public function setWixRefreshToken($wix_refresh_token)
    {
        if (is_null($wix_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable wix_refresh_token cannot be null');
        }
        $this->container['wix_refresh_token'] = $wix_refresh_token;

        return $this;
    }

    /**
     * Gets mercado_libre_app_id
     *
     * @return string|null
     */
    public function getMercadoLibreAppId()
    {
        return $this->container['mercado_libre_app_id'];
    }

    /**
     * Sets mercado_libre_app_id
     *
     * @param string|null $mercado_libre_app_id Mercado Libre App ID
     *
     * @return self
     */
    public function setMercadoLibreAppId($mercado_libre_app_id)
    {
        if (is_null($mercado_libre_app_id)) {
            throw new \InvalidArgumentException('non-nullable mercado_libre_app_id cannot be null');
        }
        $this->container['mercado_libre_app_id'] = $mercado_libre_app_id;

        return $this;
    }

    /**
     * Gets mercado_libre_app_secret_key
     *
     * @return string|null
     */
    public function getMercadoLibreAppSecretKey()
    {
        return $this->container['mercado_libre_app_secret_key'];
    }

    /**
     * Sets mercado_libre_app_secret_key
     *
     * @param string|null $mercado_libre_app_secret_key Mercado Libre App Secret Key
     *
     * @return self
     */
    public function setMercadoLibreAppSecretKey($mercado_libre_app_secret_key)
    {
        if (is_null($mercado_libre_app_secret_key)) {
            throw new \InvalidArgumentException('non-nullable mercado_libre_app_secret_key cannot be null');
        }
        $this->container['mercado_libre_app_secret_key'] = $mercado_libre_app_secret_key;

        return $this;
    }

    /**
     * Gets mercado_libre_refresh_token
     *
     * @return string|null
     */
    public function getMercadoLibreRefreshToken()
    {
        return $this->container['mercado_libre_refresh_token'];
    }

    /**
     * Sets mercado_libre_refresh_token
     *
     * @param string|null $mercado_libre_refresh_token Mercado Libre Refresh Token
     *
     * @return self
     */
    public function setMercadoLibreRefreshToken($mercado_libre_refresh_token)
    {
        if (is_null($mercado_libre_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable mercado_libre_refresh_token cannot be null');
        }
        $this->container['mercado_libre_refresh_token'] = $mercado_libre_refresh_token;

        return $this;
    }

    /**
     * Gets zid_client_id
     *
     * @return int|null
     */
    public function getZidClientId()
    {
        return $this->container['zid_client_id'];
    }

    /**
     * Sets zid_client_id
     *
     * @param int|null $zid_client_id Zid Client ID
     *
     * @return self
     */
    public function setZidClientId($zid_client_id)
    {
        if (is_null($zid_client_id)) {
            throw new \InvalidArgumentException('non-nullable zid_client_id cannot be null');
        }
        $this->container['zid_client_id'] = $zid_client_id;

        return $this;
    }

    /**
     * Gets zid_client_secret
     *
     * @return string|null
     */
    public function getZidClientSecret()
    {
        return $this->container['zid_client_secret'];
    }

    /**
     * Sets zid_client_secret
     *
     * @param string|null $zid_client_secret Zid Client Secret
     *
     * @return self
     */
    public function setZidClientSecret($zid_client_secret)
    {
        if (is_null($zid_client_secret)) {
            throw new \InvalidArgumentException('non-nullable zid_client_secret cannot be null');
        }
        $this->container['zid_client_secret'] = $zid_client_secret;

        return $this;
    }

    /**
     * Gets zid_access_token
     *
     * @return string|null
     */
    public function getZidAccessToken()
    {
        return $this->container['zid_access_token'];
    }

    /**
     * Sets zid_access_token
     *
     * @param string|null $zid_access_token Zid Access Token
     *
     * @return self
     */
    public function setZidAccessToken($zid_access_token)
    {
        if (is_null($zid_access_token)) {
            throw new \InvalidArgumentException('non-nullable zid_access_token cannot be null');
        }
        $this->container['zid_access_token'] = $zid_access_token;

        return $this;
    }

    /**
     * Gets zid_authorization
     *
     * @return string|null
     */
    public function getZidAuthorization()
    {
        return $this->container['zid_authorization'];
    }

    /**
     * Sets zid_authorization
     *
     * @param string|null $zid_authorization Zid Authorization
     *
     * @return self
     */
    public function setZidAuthorization($zid_authorization)
    {
        if (is_null($zid_authorization)) {
            throw new \InvalidArgumentException('non-nullable zid_authorization cannot be null');
        }
        $this->container['zid_authorization'] = $zid_authorization;

        return $this;
    }

    /**
     * Gets zid_refresh_token
     *
     * @return string|null
     */
    public function getZidRefreshToken()
    {
        return $this->container['zid_refresh_token'];
    }

    /**
     * Sets zid_refresh_token
     *
     * @param string|null $zid_refresh_token Zid refresh token
     *
     * @return self
     */
    public function setZidRefreshToken($zid_refresh_token)
    {
        if (is_null($zid_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable zid_refresh_token cannot be null');
        }
        $this->container['zid_refresh_token'] = $zid_refresh_token;

        return $this;
    }

    /**
     * Gets flipkart_client_id
     *
     * @return string|null
     */
    public function getFlipkartClientId()
    {
        return $this->container['flipkart_client_id'];
    }

    /**
     * Sets flipkart_client_id
     *
     * @param string|null $flipkart_client_id Flipkart Client ID
     *
     * @return self
     */
    public function setFlipkartClientId($flipkart_client_id)
    {
        if (is_null($flipkart_client_id)) {
            throw new \InvalidArgumentException('non-nullable flipkart_client_id cannot be null');
        }
        $this->container['flipkart_client_id'] = $flipkart_client_id;

        return $this;
    }

    /**
     * Gets flipkart_client_secret
     *
     * @return string|null
     */
    public function getFlipkartClientSecret()
    {
        return $this->container['flipkart_client_secret'];
    }

    /**
     * Sets flipkart_client_secret
     *
     * @param string|null $flipkart_client_secret Flipkart Client Secret
     *
     * @return self
     */
    public function setFlipkartClientSecret($flipkart_client_secret)
    {
        if (is_null($flipkart_client_secret)) {
            throw new \InvalidArgumentException('non-nullable flipkart_client_secret cannot be null');
        }
        $this->container['flipkart_client_secret'] = $flipkart_client_secret;

        return $this;
    }

    /**
     * Gets allegro_client_id
     *
     * @return string|null
     */
    public function getAllegroClientId()
    {
        return $this->container['allegro_client_id'];
    }

    /**
     * Sets allegro_client_id
     *
     * @param string|null $allegro_client_id Allegro Client ID
     *
     * @return self
     */
    public function setAllegroClientId($allegro_client_id)
    {
        if (is_null($allegro_client_id)) {
            throw new \InvalidArgumentException('non-nullable allegro_client_id cannot be null');
        }
        $this->container['allegro_client_id'] = $allegro_client_id;

        return $this;
    }

    /**
     * Gets allegro_client_secret
     *
     * @return string|null
     */
    public function getAllegroClientSecret()
    {
        return $this->container['allegro_client_secret'];
    }

    /**
     * Sets allegro_client_secret
     *
     * @param string|null $allegro_client_secret Allegro Client Secret
     *
     * @return self
     */
    public function setAllegroClientSecret($allegro_client_secret)
    {
        if (is_null($allegro_client_secret)) {
            throw new \InvalidArgumentException('non-nullable allegro_client_secret cannot be null');
        }
        $this->container['allegro_client_secret'] = $allegro_client_secret;

        return $this;
    }

    /**
     * Gets allegro_access_token
     *
     * @return string|null
     */
    public function getAllegroAccessToken()
    {
        return $this->container['allegro_access_token'];
    }

    /**
     * Sets allegro_access_token
     *
     * @param string|null $allegro_access_token Allegro Access Token
     *
     * @return self
     */
    public function setAllegroAccessToken($allegro_access_token)
    {
        if (is_null($allegro_access_token)) {
            throw new \InvalidArgumentException('non-nullable allegro_access_token cannot be null');
        }
        $this->container['allegro_access_token'] = $allegro_access_token;

        return $this;
    }

    /**
     * Gets allegro_refresh_token
     *
     * @return string|null
     */
    public function getAllegroRefreshToken()
    {
        return $this->container['allegro_refresh_token'];
    }

    /**
     * Sets allegro_refresh_token
     *
     * @param string|null $allegro_refresh_token Allegro Refresh Token
     *
     * @return self
     */
    public function setAllegroRefreshToken($allegro_refresh_token)
    {
        if (is_null($allegro_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable allegro_refresh_token cannot be null');
        }
        $this->container['allegro_refresh_token'] = $allegro_refresh_token;

        return $this;
    }

    /**
     * Gets allegro_environment
     *
     * @return string|null
     */
    public function getAllegroEnvironment()
    {
        return $this->container['allegro_environment'];
    }

    /**
     * Sets allegro_environment
     *
     * @param string|null $allegro_environment Allegro Environment
     *
     * @return self
     */
    public function setAllegroEnvironment($allegro_environment)
    {
        if (is_null($allegro_environment)) {
            throw new \InvalidArgumentException('non-nullable allegro_environment cannot be null');
        }
        $this->container['allegro_environment'] = $allegro_environment;

        return $this;
    }

    /**
     * Gets zoho_client_id
     *
     * @return string|null
     */
    public function getZohoClientId()
    {
        return $this->container['zoho_client_id'];
    }

    /**
     * Sets zoho_client_id
     *
     * @param string|null $zoho_client_id Zoho Client ID
     *
     * @return self
     */
    public function setZohoClientId($zoho_client_id)
    {
        if (is_null($zoho_client_id)) {
            throw new \InvalidArgumentException('non-nullable zoho_client_id cannot be null');
        }
        $this->container['zoho_client_id'] = $zoho_client_id;

        return $this;
    }

    /**
     * Gets zoho_client_secret
     *
     * @return string|null
     */
    public function getZohoClientSecret()
    {
        return $this->container['zoho_client_secret'];
    }

    /**
     * Sets zoho_client_secret
     *
     * @param string|null $zoho_client_secret Zoho Client Secret
     *
     * @return self
     */
    public function setZohoClientSecret($zoho_client_secret)
    {
        if (is_null($zoho_client_secret)) {
            throw new \InvalidArgumentException('non-nullable zoho_client_secret cannot be null');
        }
        $this->container['zoho_client_secret'] = $zoho_client_secret;

        return $this;
    }

    /**
     * Gets zoho_refresh_token
     *
     * @return string|null
     */
    public function getZohoRefreshToken()
    {
        return $this->container['zoho_refresh_token'];
    }

    /**
     * Sets zoho_refresh_token
     *
     * @param string|null $zoho_refresh_token Zoho Refresh Token
     *
     * @return self
     */
    public function setZohoRefreshToken($zoho_refresh_token)
    {
        if (is_null($zoho_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable zoho_refresh_token cannot be null');
        }
        $this->container['zoho_refresh_token'] = $zoho_refresh_token;

        return $this;
    }

    /**
     * Gets zoho_region
     *
     * @return string|null
     */
    public function getZohoRegion()
    {
        return $this->container['zoho_region'];
    }

    /**
     * Sets zoho_region
     *
     * @param string|null $zoho_region Zoho API endpoint Region
     *
     * @return self
     */
    public function setZohoRegion($zoho_region)
    {
        if (is_null($zoho_region)) {
            throw new \InvalidArgumentException('non-nullable zoho_region cannot be null');
        }
        $this->container['zoho_region'] = $zoho_region;

        return $this;
    }

    /**
     * Gets otto_client_id
     *
     * @return string|null
     */
    public function getOttoClientId()
    {
        return $this->container['otto_client_id'];
    }

    /**
     * Sets otto_client_id
     *
     * @param string|null $otto_client_id Otto Client ID
     *
     * @return self
     */
    public function setOttoClientId($otto_client_id)
    {
        if (is_null($otto_client_id)) {
            throw new \InvalidArgumentException('non-nullable otto_client_id cannot be null');
        }
        $this->container['otto_client_id'] = $otto_client_id;

        return $this;
    }

    /**
     * Gets otto_client_secret
     *
     * @return string|null
     */
    public function getOttoClientSecret()
    {
        return $this->container['otto_client_secret'];
    }

    /**
     * Sets otto_client_secret
     *
     * @param string|null $otto_client_secret Otto Client Secret
     *
     * @return self
     */
    public function setOttoClientSecret($otto_client_secret)
    {
        if (is_null($otto_client_secret)) {
            throw new \InvalidArgumentException('non-nullable otto_client_secret cannot be null');
        }
        $this->container['otto_client_secret'] = $otto_client_secret;

        return $this;
    }

    /**
     * Gets otto_app_id
     *
     * @return string|null
     */
    public function getOttoAppId()
    {
        return $this->container['otto_app_id'];
    }

    /**
     * Sets otto_app_id
     *
     * @param string|null $otto_app_id Otto App ID
     *
     * @return self
     */
    public function setOttoAppId($otto_app_id)
    {
        if (is_null($otto_app_id)) {
            throw new \InvalidArgumentException('non-nullable otto_app_id cannot be null');
        }
        $this->container['otto_app_id'] = $otto_app_id;

        return $this;
    }

    /**
     * Gets otto_refresh_token
     *
     * @return string|null
     */
    public function getOttoRefreshToken()
    {
        return $this->container['otto_refresh_token'];
    }

    /**
     * Sets otto_refresh_token
     *
     * @param string|null $otto_refresh_token Otto Refresh Token
     *
     * @return self
     */
    public function setOttoRefreshToken($otto_refresh_token)
    {
        if (is_null($otto_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable otto_refresh_token cannot be null');
        }
        $this->container['otto_refresh_token'] = $otto_refresh_token;

        return $this;
    }

    /**
     * Gets otto_environment
     *
     * @return string|null
     */
    public function getOttoEnvironment()
    {
        return $this->container['otto_environment'];
    }

    /**
     * Sets otto_environment
     *
     * @param string|null $otto_environment Otto Environment
     *
     * @return self
     */
    public function setOttoEnvironment($otto_environment)
    {
        if (is_null($otto_environment)) {
            throw new \InvalidArgumentException('non-nullable otto_environment cannot be null');
        }
        $this->container['otto_environment'] = $otto_environment;

        return $this;
    }

    /**
     * Gets otto_access_token
     *
     * @return string|null
     */
    public function getOttoAccessToken()
    {
        return $this->container['otto_access_token'];
    }

    /**
     * Sets otto_access_token
     *
     * @param string|null $otto_access_token Otto Access Token
     *
     * @return self
     */
    public function setOttoAccessToken($otto_access_token)
    {
        if (is_null($otto_access_token)) {
            throw new \InvalidArgumentException('non-nullable otto_access_token cannot be null');
        }
        $this->container['otto_access_token'] = $otto_access_token;

        return $this;
    }

    /**
     * Gets tiktokshop_app_key
     *
     * @return string|null
     */
    public function getTiktokshopAppKey()
    {
        return $this->container['tiktokshop_app_key'];
    }

    /**
     * Sets tiktokshop_app_key
     *
     * @param string|null $tiktokshop_app_key TikTok Shop App Key
     *
     * @return self
     */
    public function setTiktokshopAppKey($tiktokshop_app_key)
    {
        if (is_null($tiktokshop_app_key)) {
            throw new \InvalidArgumentException('non-nullable tiktokshop_app_key cannot be null');
        }
        $this->container['tiktokshop_app_key'] = $tiktokshop_app_key;

        return $this;
    }

    /**
     * Gets tiktokshop_app_secret
     *
     * @return string|null
     */
    public function getTiktokshopAppSecret()
    {
        return $this->container['tiktokshop_app_secret'];
    }

    /**
     * Sets tiktokshop_app_secret
     *
     * @param string|null $tiktokshop_app_secret TikTok Shop App Secret
     *
     * @return self
     */
    public function setTiktokshopAppSecret($tiktokshop_app_secret)
    {
        if (is_null($tiktokshop_app_secret)) {
            throw new \InvalidArgumentException('non-nullable tiktokshop_app_secret cannot be null');
        }
        $this->container['tiktokshop_app_secret'] = $tiktokshop_app_secret;

        return $this;
    }

    /**
     * Gets tiktokshop_refresh_token
     *
     * @return string|null
     */
    public function getTiktokshopRefreshToken()
    {
        return $this->container['tiktokshop_refresh_token'];
    }

    /**
     * Sets tiktokshop_refresh_token
     *
     * @param string|null $tiktokshop_refresh_token TikTok Shop Refresh Token
     *
     * @return self
     */
    public function setTiktokshopRefreshToken($tiktokshop_refresh_token)
    {
        if (is_null($tiktokshop_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable tiktokshop_refresh_token cannot be null');
        }
        $this->container['tiktokshop_refresh_token'] = $tiktokshop_refresh_token;

        return $this;
    }

    /**
     * Gets tiktokshop_access_token
     *
     * @return string|null
     */
    public function getTiktokshopAccessToken()
    {
        return $this->container['tiktokshop_access_token'];
    }

    /**
     * Sets tiktokshop_access_token
     *
     * @param string|null $tiktokshop_access_token TikTok Shop Access Token
     *
     * @return self
     */
    public function setTiktokshopAccessToken($tiktokshop_access_token)
    {
        if (is_null($tiktokshop_access_token)) {
            throw new \InvalidArgumentException('non-nullable tiktokshop_access_token cannot be null');
        }
        $this->container['tiktokshop_access_token'] = $tiktokshop_access_token;

        return $this;
    }

    /**
     * Gets salla_client_id
     *
     * @return string|null
     */
    public function getSallaClientId()
    {
        return $this->container['salla_client_id'];
    }

    /**
     * Sets salla_client_id
     *
     * @param string|null $salla_client_id Salla Client ID
     *
     * @return self
     */
    public function setSallaClientId($salla_client_id)
    {
        if (is_null($salla_client_id)) {
            throw new \InvalidArgumentException('non-nullable salla_client_id cannot be null');
        }
        $this->container['salla_client_id'] = $salla_client_id;

        return $this;
    }

    /**
     * Gets salla_client_secret
     *
     * @return string|null
     */
    public function getSallaClientSecret()
    {
        return $this->container['salla_client_secret'];
    }

    /**
     * Sets salla_client_secret
     *
     * @param string|null $salla_client_secret Salla Client Secret
     *
     * @return self
     */
    public function setSallaClientSecret($salla_client_secret)
    {
        if (is_null($salla_client_secret)) {
            throw new \InvalidArgumentException('non-nullable salla_client_secret cannot be null');
        }
        $this->container['salla_client_secret'] = $salla_client_secret;

        return $this;
    }

    /**
     * Gets salla_refresh_token
     *
     * @return string|null
     */
    public function getSallaRefreshToken()
    {
        return $this->container['salla_refresh_token'];
    }

    /**
     * Sets salla_refresh_token
     *
     * @param string|null $salla_refresh_token Salla Refresh Token
     *
     * @return self
     */
    public function setSallaRefreshToken($salla_refresh_token)
    {
        if (is_null($salla_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable salla_refresh_token cannot be null');
        }
        $this->container['salla_refresh_token'] = $salla_refresh_token;

        return $this;
    }

    /**
     * Gets salla_access_token
     *
     * @return string|null
     */
    public function getSallaAccessToken()
    {
        return $this->container['salla_access_token'];
    }

    /**
     * Sets salla_access_token
     *
     * @param string|null $salla_access_token Salla Access Token
     *
     * @return self
     */
    public function setSallaAccessToken($salla_access_token)
    {
        if (is_null($salla_access_token)) {
            throw new \InvalidArgumentException('non-nullable salla_access_token cannot be null');
        }
        $this->container['salla_access_token'] = $salla_access_token;

        return $this;
    }

    /**
     * Gets temu_app_key
     *
     * @return string|null
     */
    public function getTemuAppKey()
    {
        return $this->container['temu_app_key'];
    }

    /**
     * Sets temu_app_key
     *
     * @param string|null $temu_app_key Temu App Key
     *
     * @return self
     */
    public function setTemuAppKey($temu_app_key)
    {
        if (is_null($temu_app_key)) {
            throw new \InvalidArgumentException('non-nullable temu_app_key cannot be null');
        }
        $this->container['temu_app_key'] = $temu_app_key;

        return $this;
    }

    /**
     * Gets temu_app_secret
     *
     * @return string|null
     */
    public function getTemuAppSecret()
    {
        return $this->container['temu_app_secret'];
    }

    /**
     * Sets temu_app_secret
     *
     * @param string|null $temu_app_secret Temu App Secret
     *
     * @return self
     */
    public function setTemuAppSecret($temu_app_secret)
    {
        if (is_null($temu_app_secret)) {
            throw new \InvalidArgumentException('non-nullable temu_app_secret cannot be null');
        }
        $this->container['temu_app_secret'] = $temu_app_secret;

        return $this;
    }

    /**
     * Gets temu_access_token
     *
     * @return string|null
     */
    public function getTemuAccessToken()
    {
        return $this->container['temu_access_token'];
    }

    /**
     * Sets temu_access_token
     *
     * @param string|null $temu_access_token Temu Access Token
     *
     * @return self
     */
    public function setTemuAccessToken($temu_access_token)
    {
        if (is_null($temu_access_token)) {
            throw new \InvalidArgumentException('non-nullable temu_access_token cannot be null');
        }
        $this->container['temu_access_token'] = $temu_access_token;

        return $this;
    }

    /**
     * Gets temu_region
     *
     * @return string|null
     */
    public function getTemuRegion()
    {
        return $this->container['temu_region'];
    }

    /**
     * Sets temu_region
     *
     * @param string|null $temu_region Temu API endpoint Region.
     *
     * @return self
     */
    public function setTemuRegion($temu_region)
    {
        if (is_null($temu_region)) {
            throw new \InvalidArgumentException('non-nullable temu_region cannot be null');
        }
        $this->container['temu_region'] = $temu_region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


