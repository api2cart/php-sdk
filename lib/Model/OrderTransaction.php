<?php
/**
 * OrderTransaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderTransaction Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order_Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'transaction_id' => 'string',
        'order_id' => 'string',
        'parent_id' => 'string',
        'description' => 'string',
        'status' => 'string',
        'gateway' => 'string',
        'reference_number' => 'string',
        'currency' => 'string',
        'amount' => 'float',
        'created_time' => '\OpenAPI\Client\Model\A2CDateTime',
        'settlement_currency' => 'string',
        'settlement_amount' => 'float',
        'settlement_created_time' => '\OpenAPI\Client\Model\A2CDateTime',
        'card_brand' => 'string',
        'card_bin' => 'string',
        'card_last_four' => 'string',
        'avs_street_resp_code' => 'string',
        'avs_postal_resp_code' => 'string',
        'avs_message' => 'string',
        'cvv_code' => 'string',
        'cvv_message' => 'string',
        'is_test_mode' => 'bool',
        'additional_fields' => 'object',
        'custom_fields' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'transaction_id' => null,
        'order_id' => null,
        'parent_id' => null,
        'description' => null,
        'status' => null,
        'gateway' => null,
        'reference_number' => null,
        'currency' => null,
        'amount' => null,
        'created_time' => null,
        'settlement_currency' => null,
        'settlement_amount' => null,
        'settlement_created_time' => null,
        'card_brand' => null,
        'card_bin' => null,
        'card_last_four' => null,
        'avs_street_resp_code' => null,
        'avs_postal_resp_code' => null,
        'avs_message' => null,
        'cvv_code' => null,
        'cvv_message' => null,
        'is_test_mode' => null,
        'additional_fields' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'transaction_id' => true,
        'order_id' => false,
        'parent_id' => true,
        'description' => true,
        'status' => true,
        'gateway' => true,
        'reference_number' => true,
        'currency' => true,
        'amount' => true,
        'created_time' => true,
        'settlement_currency' => true,
        'settlement_amount' => true,
        'settlement_created_time' => true,
        'card_brand' => true,
        'card_bin' => true,
        'card_last_four' => true,
        'avs_street_resp_code' => true,
        'avs_postal_resp_code' => true,
        'avs_message' => true,
        'cvv_code' => true,
        'cvv_message' => true,
        'is_test_mode' => true,
        'additional_fields' => true,
        'custom_fields' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'transaction_id' => 'transaction_id',
        'order_id' => 'order_id',
        'parent_id' => 'parent_id',
        'description' => 'description',
        'status' => 'status',
        'gateway' => 'gateway',
        'reference_number' => 'reference_number',
        'currency' => 'currency',
        'amount' => 'amount',
        'created_time' => 'created_time',
        'settlement_currency' => 'settlement_currency',
        'settlement_amount' => 'settlement_amount',
        'settlement_created_time' => 'settlement_created_time',
        'card_brand' => 'card_brand',
        'card_bin' => 'card_bin',
        'card_last_four' => 'card_last_four',
        'avs_street_resp_code' => 'avs_street_resp_code',
        'avs_postal_resp_code' => 'avs_postal_resp_code',
        'avs_message' => 'avs_message',
        'cvv_code' => 'cvv_code',
        'cvv_message' => 'cvv_message',
        'is_test_mode' => 'is_test_mode',
        'additional_fields' => 'additional_fields',
        'custom_fields' => 'custom_fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'transaction_id' => 'setTransactionId',
        'order_id' => 'setOrderId',
        'parent_id' => 'setParentId',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'gateway' => 'setGateway',
        'reference_number' => 'setReferenceNumber',
        'currency' => 'setCurrency',
        'amount' => 'setAmount',
        'created_time' => 'setCreatedTime',
        'settlement_currency' => 'setSettlementCurrency',
        'settlement_amount' => 'setSettlementAmount',
        'settlement_created_time' => 'setSettlementCreatedTime',
        'card_brand' => 'setCardBrand',
        'card_bin' => 'setCardBin',
        'card_last_four' => 'setCardLastFour',
        'avs_street_resp_code' => 'setAvsStreetRespCode',
        'avs_postal_resp_code' => 'setAvsPostalRespCode',
        'avs_message' => 'setAvsMessage',
        'cvv_code' => 'setCvvCode',
        'cvv_message' => 'setCvvMessage',
        'is_test_mode' => 'setIsTestMode',
        'additional_fields' => 'setAdditionalFields',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'transaction_id' => 'getTransactionId',
        'order_id' => 'getOrderId',
        'parent_id' => 'getParentId',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'gateway' => 'getGateway',
        'reference_number' => 'getReferenceNumber',
        'currency' => 'getCurrency',
        'amount' => 'getAmount',
        'created_time' => 'getCreatedTime',
        'settlement_currency' => 'getSettlementCurrency',
        'settlement_amount' => 'getSettlementAmount',
        'settlement_created_time' => 'getSettlementCreatedTime',
        'card_brand' => 'getCardBrand',
        'card_bin' => 'getCardBin',
        'card_last_four' => 'getCardLastFour',
        'avs_street_resp_code' => 'getAvsStreetRespCode',
        'avs_postal_resp_code' => 'getAvsPostalRespCode',
        'avs_message' => 'getAvsMessage',
        'cvv_code' => 'getCvvCode',
        'cvv_message' => 'getCvvMessage',
        'is_test_mode' => 'getIsTestMode',
        'additional_fields' => 'getAdditionalFields',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('gateway', $data ?? [], null);
        $this->setIfExists('reference_number', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('created_time', $data ?? [], null);
        $this->setIfExists('settlement_currency', $data ?? [], null);
        $this->setIfExists('settlement_amount', $data ?? [], null);
        $this->setIfExists('settlement_created_time', $data ?? [], null);
        $this->setIfExists('card_brand', $data ?? [], null);
        $this->setIfExists('card_bin', $data ?? [], null);
        $this->setIfExists('card_last_four', $data ?? [], null);
        $this->setIfExists('avs_street_resp_code', $data ?? [], null);
        $this->setIfExists('avs_postal_resp_code', $data ?? [], null);
        $this->setIfExists('avs_message', $data ?? [], null);
        $this->setIfExists('cvv_code', $data ?? [], null);
        $this->setIfExists('cvv_message', $data ?? [], null);
        $this->setIfExists('is_test_mode', $data ?? [], null);
        $this->setIfExists('additional_fields', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id transaction_id
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway gateway
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        if (is_null($gateway)) {
            array_push($this->openAPINullablesSetToNull, 'gateway');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gateway', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number reference_number
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        if (is_null($reference_number)) {
            array_push($this->openAPINullablesSetToNull, 'reference_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            array_push($this->openAPINullablesSetToNull, 'amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \OpenAPI\Client\Model\A2CDateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \OpenAPI\Client\Model\A2CDateTime|null $created_time created_time
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        if (is_null($created_time)) {
            array_push($this->openAPINullablesSetToNull, 'created_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets settlement_currency
     *
     * @return string|null
     */
    public function getSettlementCurrency()
    {
        return $this->container['settlement_currency'];
    }

    /**
     * Sets settlement_currency
     *
     * @param string|null $settlement_currency settlement_currency
     *
     * @return self
     */
    public function setSettlementCurrency($settlement_currency)
    {
        if (is_null($settlement_currency)) {
            array_push($this->openAPINullablesSetToNull, 'settlement_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('settlement_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['settlement_currency'] = $settlement_currency;

        return $this;
    }

    /**
     * Gets settlement_amount
     *
     * @return float|null
     */
    public function getSettlementAmount()
    {
        return $this->container['settlement_amount'];
    }

    /**
     * Sets settlement_amount
     *
     * @param float|null $settlement_amount settlement_amount
     *
     * @return self
     */
    public function setSettlementAmount($settlement_amount)
    {
        if (is_null($settlement_amount)) {
            array_push($this->openAPINullablesSetToNull, 'settlement_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('settlement_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['settlement_amount'] = $settlement_amount;

        return $this;
    }

    /**
     * Gets settlement_created_time
     *
     * @return \OpenAPI\Client\Model\A2CDateTime|null
     */
    public function getSettlementCreatedTime()
    {
        return $this->container['settlement_created_time'];
    }

    /**
     * Sets settlement_created_time
     *
     * @param \OpenAPI\Client\Model\A2CDateTime|null $settlement_created_time settlement_created_time
     *
     * @return self
     */
    public function setSettlementCreatedTime($settlement_created_time)
    {
        if (is_null($settlement_created_time)) {
            array_push($this->openAPINullablesSetToNull, 'settlement_created_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('settlement_created_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['settlement_created_time'] = $settlement_created_time;

        return $this;
    }

    /**
     * Gets card_brand
     *
     * @return string|null
     */
    public function getCardBrand()
    {
        return $this->container['card_brand'];
    }

    /**
     * Sets card_brand
     *
     * @param string|null $card_brand card_brand
     *
     * @return self
     */
    public function setCardBrand($card_brand)
    {
        if (is_null($card_brand)) {
            array_push($this->openAPINullablesSetToNull, 'card_brand');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_brand', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_brand'] = $card_brand;

        return $this;
    }

    /**
     * Gets card_bin
     *
     * @return string|null
     */
    public function getCardBin()
    {
        return $this->container['card_bin'];
    }

    /**
     * Sets card_bin
     *
     * @param string|null $card_bin card_bin
     *
     * @return self
     */
    public function setCardBin($card_bin)
    {
        if (is_null($card_bin)) {
            array_push($this->openAPINullablesSetToNull, 'card_bin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_bin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_bin'] = $card_bin;

        return $this;
    }

    /**
     * Gets card_last_four
     *
     * @return string|null
     */
    public function getCardLastFour()
    {
        return $this->container['card_last_four'];
    }

    /**
     * Sets card_last_four
     *
     * @param string|null $card_last_four card_last_four
     *
     * @return self
     */
    public function setCardLastFour($card_last_four)
    {
        if (is_null($card_last_four)) {
            array_push($this->openAPINullablesSetToNull, 'card_last_four');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_last_four', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_last_four'] = $card_last_four;

        return $this;
    }

    /**
     * Gets avs_street_resp_code
     *
     * @return string|null
     */
    public function getAvsStreetRespCode()
    {
        return $this->container['avs_street_resp_code'];
    }

    /**
     * Sets avs_street_resp_code
     *
     * @param string|null $avs_street_resp_code avs_street_resp_code
     *
     * @return self
     */
    public function setAvsStreetRespCode($avs_street_resp_code)
    {
        if (is_null($avs_street_resp_code)) {
            array_push($this->openAPINullablesSetToNull, 'avs_street_resp_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avs_street_resp_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avs_street_resp_code'] = $avs_street_resp_code;

        return $this;
    }

    /**
     * Gets avs_postal_resp_code
     *
     * @return string|null
     */
    public function getAvsPostalRespCode()
    {
        return $this->container['avs_postal_resp_code'];
    }

    /**
     * Sets avs_postal_resp_code
     *
     * @param string|null $avs_postal_resp_code avs_postal_resp_code
     *
     * @return self
     */
    public function setAvsPostalRespCode($avs_postal_resp_code)
    {
        if (is_null($avs_postal_resp_code)) {
            array_push($this->openAPINullablesSetToNull, 'avs_postal_resp_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avs_postal_resp_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avs_postal_resp_code'] = $avs_postal_resp_code;

        return $this;
    }

    /**
     * Gets avs_message
     *
     * @return string|null
     */
    public function getAvsMessage()
    {
        return $this->container['avs_message'];
    }

    /**
     * Sets avs_message
     *
     * @param string|null $avs_message avs_message
     *
     * @return self
     */
    public function setAvsMessage($avs_message)
    {
        if (is_null($avs_message)) {
            array_push($this->openAPINullablesSetToNull, 'avs_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avs_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avs_message'] = $avs_message;

        return $this;
    }

    /**
     * Gets cvv_code
     *
     * @return string|null
     */
    public function getCvvCode()
    {
        return $this->container['cvv_code'];
    }

    /**
     * Sets cvv_code
     *
     * @param string|null $cvv_code cvv_code
     *
     * @return self
     */
    public function setCvvCode($cvv_code)
    {
        if (is_null($cvv_code)) {
            array_push($this->openAPINullablesSetToNull, 'cvv_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cvv_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cvv_code'] = $cvv_code;

        return $this;
    }

    /**
     * Gets cvv_message
     *
     * @return string|null
     */
    public function getCvvMessage()
    {
        return $this->container['cvv_message'];
    }

    /**
     * Sets cvv_message
     *
     * @param string|null $cvv_message cvv_message
     *
     * @return self
     */
    public function setCvvMessage($cvv_message)
    {
        if (is_null($cvv_message)) {
            array_push($this->openAPINullablesSetToNull, 'cvv_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cvv_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cvv_message'] = $cvv_message;

        return $this;
    }

    /**
     * Gets is_test_mode
     *
     * @return bool|null
     */
    public function getIsTestMode()
    {
        return $this->container['is_test_mode'];
    }

    /**
     * Sets is_test_mode
     *
     * @param bool|null $is_test_mode is_test_mode
     *
     * @return self
     */
    public function setIsTestMode($is_test_mode)
    {
        if (is_null($is_test_mode)) {
            array_push($this->openAPINullablesSetToNull, 'is_test_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_test_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_test_mode'] = $is_test_mode;

        return $this;
    }

    /**
     * Gets additional_fields
     *
     * @return object|null
     */
    public function getAdditionalFields()
    {
        return $this->container['additional_fields'];
    }

    /**
     * Sets additional_fields
     *
     * @param object|null $additional_fields additional_fields
     *
     * @return self
     */
    public function setAdditionalFields($additional_fields)
    {
        if (is_null($additional_fields)) {
            array_push($this->openAPINullablesSetToNull, 'additional_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_fields'] = $additional_fields;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            array_push($this->openAPINullablesSetToNull, 'custom_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


