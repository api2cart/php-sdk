<?php
/**
 * ProductImageAdd
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductImageAdd Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductImageAdd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductImageAdd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'image_name' => 'string',
        'product_id' => 'string',
        'product_variant_id' => 'string',
        'variant_ids' => 'string',
        'option_value_ids' => 'string',
        'store_id' => 'string',
        'lang_id' => 'string',
        'url' => 'string',
        'content' => 'string',
        'label' => 'string',
        'mime' => 'string',
        'position' => 'int',
        'use_latest_api_version' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'image_name' => null,
        'product_id' => null,
        'product_variant_id' => null,
        'variant_ids' => null,
        'option_value_ids' => null,
        'store_id' => null,
        'lang_id' => null,
        'url' => null,
        'content' => null,
        'label' => null,
        'mime' => null,
        'position' => null,
        'use_latest_api_version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'image_name' => false,
        'product_id' => false,
        'product_variant_id' => false,
        'variant_ids' => false,
        'option_value_ids' => false,
        'store_id' => false,
        'lang_id' => false,
        'url' => false,
        'content' => false,
        'label' => false,
        'mime' => false,
        'position' => false,
        'use_latest_api_version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'image_name' => 'image_name',
        'product_id' => 'product_id',
        'product_variant_id' => 'product_variant_id',
        'variant_ids' => 'variant_ids',
        'option_value_ids' => 'option_value_ids',
        'store_id' => 'store_id',
        'lang_id' => 'lang_id',
        'url' => 'url',
        'content' => 'content',
        'label' => 'label',
        'mime' => 'mime',
        'position' => 'position',
        'use_latest_api_version' => 'use_latest_api_version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'image_name' => 'setImageName',
        'product_id' => 'setProductId',
        'product_variant_id' => 'setProductVariantId',
        'variant_ids' => 'setVariantIds',
        'option_value_ids' => 'setOptionValueIds',
        'store_id' => 'setStoreId',
        'lang_id' => 'setLangId',
        'url' => 'setUrl',
        'content' => 'setContent',
        'label' => 'setLabel',
        'mime' => 'setMime',
        'position' => 'setPosition',
        'use_latest_api_version' => 'setUseLatestApiVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'image_name' => 'getImageName',
        'product_id' => 'getProductId',
        'product_variant_id' => 'getProductVariantId',
        'variant_ids' => 'getVariantIds',
        'option_value_ids' => 'getOptionValueIds',
        'store_id' => 'getStoreId',
        'lang_id' => 'getLangId',
        'url' => 'getUrl',
        'content' => 'getContent',
        'label' => 'getLabel',
        'mime' => 'getMime',
        'position' => 'getPosition',
        'use_latest_api_version' => 'getUseLatestApiVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_SMALL = 'small';
    public const TYPE_BASE = 'base';
    public const TYPE_ADDITIONAL = 'additional';
    public const TYPE_THUMBNAIL = 'thumbnail';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SMALL,
            self::TYPE_BASE,
            self::TYPE_ADDITIONAL,
            self::TYPE_THUMBNAIL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('image_name', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('product_variant_id', $data ?? [], null);
        $this->setIfExists('variant_ids', $data ?? [], null);
        $this->setIfExists('option_value_ids', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('lang_id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('mime', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], 0);
        $this->setIfExists('use_latest_api_version', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['image_name'] === null) {
            $invalidProperties[] = "'image_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Defines image's types that are specified by comma-separated list
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets image_name
     *
     * @return string
     */
    public function getImageName()
    {
        return $this->container['image_name'];
    }

    /**
     * Sets image_name
     *
     * @param string $image_name Defines image's name
     *
     * @return self
     */
    public function setImageName($image_name)
    {
        if (is_null($image_name)) {
            throw new \InvalidArgumentException('non-nullable image_name cannot be null');
        }
        $this->container['image_name'] = $image_name;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id Defines product id where the image should be added
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_variant_id
     *
     * @return string|null
     */
    public function getProductVariantId()
    {
        return $this->container['product_variant_id'];
    }

    /**
     * Sets product_variant_id
     *
     * @param string|null $product_variant_id Defines product's variants specified by variant id
     *
     * @return self
     */
    public function setProductVariantId($product_variant_id)
    {
        if (is_null($product_variant_id)) {
            throw new \InvalidArgumentException('non-nullable product_variant_id cannot be null');
        }
        $this->container['product_variant_id'] = $product_variant_id;

        return $this;
    }

    /**
     * Gets variant_ids
     *
     * @return string|null
     */
    public function getVariantIds()
    {
        return $this->container['variant_ids'];
    }

    /**
     * Sets variant_ids
     *
     * @param string|null $variant_ids Defines product's variants ids
     *
     * @return self
     */
    public function setVariantIds($variant_ids)
    {
        if (is_null($variant_ids)) {
            throw new \InvalidArgumentException('non-nullable variant_ids cannot be null');
        }
        $this->container['variant_ids'] = $variant_ids;

        return $this;
    }

    /**
     * Gets option_value_ids
     *
     * @return string|null
     */
    public function getOptionValueIds()
    {
        return $this->container['option_value_ids'];
    }

    /**
     * Sets option_value_ids
     *
     * @param string|null $option_value_ids Defines product's option values ids
     *
     * @return self
     */
    public function setOptionValueIds($option_value_ids)
    {
        if (is_null($option_value_ids)) {
            throw new \InvalidArgumentException('non-nullable option_value_ids cannot be null');
        }
        $this->container['option_value_ids'] = $option_value_ids;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id Store Id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets lang_id
     *
     * @return string|null
     */
    public function getLangId()
    {
        return $this->container['lang_id'];
    }

    /**
     * Sets lang_id
     *
     * @param string|null $lang_id Add product image on specified language id
     *
     * @return self
     */
    public function setLangId($lang_id)
    {
        if (is_null($lang_id)) {
            throw new \InvalidArgumentException('non-nullable lang_id cannot be null');
        }
        $this->container['lang_id'] = $lang_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Defines URL of the image that has to be added
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content Content(body) encoded in base64 of image file
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Defines alternative text that has to be attached to the picture
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets mime
     *
     * @return string|null
     */
    public function getMime()
    {
        return $this->container['mime'];
    }

    /**
     * Sets mime
     *
     * @param string|null $mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
     *
     * @return self
     */
    public function setMime($mime)
    {
        if (is_null($mime)) {
            throw new \InvalidArgumentException('non-nullable mime cannot be null');
        }
        $this->container['mime'] = $mime;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position Defines image’s position in the list
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets use_latest_api_version
     *
     * @return bool|null
     */
    public function getUseLatestApiVersion()
    {
        return $this->container['use_latest_api_version'];
    }

    /**
     * Sets use_latest_api_version
     *
     * @param bool|null $use_latest_api_version Use the latest platform API version
     *
     * @return self
     */
    public function setUseLatestApiVersion($use_latest_api_version)
    {
        if (is_null($use_latest_api_version)) {
            throw new \InvalidArgumentException('non-nullable use_latest_api_version cannot be null');
        }
        $this->container['use_latest_api_version'] = $use_latest_api_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


