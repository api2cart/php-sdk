<?php
/**
 * OrderShipmentAdd
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderShipmentAdd Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderShipmentAdd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderShipmentAdd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'string',
        'store_id' => 'string',
        'warehouse_id' => 'string',
        'shipment_provider' => 'string',
        'shipping_method' => 'string',
        'items' => '\OpenAPI\Client\Model\OrderShipmentAddItemsInner[]',
        'send_notifications' => 'bool',
        'tracking_numbers' => '\OpenAPI\Client\Model\OrderShipmentAddTrackingNumbersInner[]',
        'adjust_stock' => 'bool',
        'enable_cache' => 'bool',
        'tracking_link' => 'string',
        'is_shipped' => 'bool',
        'check_process_status' => 'bool',
        'use_latest_api_version' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_id' => null,
        'store_id' => null,
        'warehouse_id' => null,
        'shipment_provider' => null,
        'shipping_method' => null,
        'items' => null,
        'send_notifications' => null,
        'tracking_numbers' => null,
        'adjust_stock' => null,
        'enable_cache' => null,
        'tracking_link' => null,
        'is_shipped' => null,
        'check_process_status' => null,
        'use_latest_api_version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_id' => false,
        'store_id' => false,
        'warehouse_id' => false,
        'shipment_provider' => false,
        'shipping_method' => false,
        'items' => false,
        'send_notifications' => false,
        'tracking_numbers' => false,
        'adjust_stock' => false,
        'enable_cache' => false,
        'tracking_link' => false,
        'is_shipped' => false,
        'check_process_status' => false,
        'use_latest_api_version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
        'store_id' => 'store_id',
        'warehouse_id' => 'warehouse_id',
        'shipment_provider' => 'shipment_provider',
        'shipping_method' => 'shipping_method',
        'items' => 'items',
        'send_notifications' => 'send_notifications',
        'tracking_numbers' => 'tracking_numbers',
        'adjust_stock' => 'adjust_stock',
        'enable_cache' => 'enable_cache',
        'tracking_link' => 'tracking_link',
        'is_shipped' => 'is_shipped',
        'check_process_status' => 'check_process_status',
        'use_latest_api_version' => 'use_latest_api_version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'store_id' => 'setStoreId',
        'warehouse_id' => 'setWarehouseId',
        'shipment_provider' => 'setShipmentProvider',
        'shipping_method' => 'setShippingMethod',
        'items' => 'setItems',
        'send_notifications' => 'setSendNotifications',
        'tracking_numbers' => 'setTrackingNumbers',
        'adjust_stock' => 'setAdjustStock',
        'enable_cache' => 'setEnableCache',
        'tracking_link' => 'setTrackingLink',
        'is_shipped' => 'setIsShipped',
        'check_process_status' => 'setCheckProcessStatus',
        'use_latest_api_version' => 'setUseLatestApiVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'store_id' => 'getStoreId',
        'warehouse_id' => 'getWarehouseId',
        'shipment_provider' => 'getShipmentProvider',
        'shipping_method' => 'getShippingMethod',
        'items' => 'getItems',
        'send_notifications' => 'getSendNotifications',
        'tracking_numbers' => 'getTrackingNumbers',
        'adjust_stock' => 'getAdjustStock',
        'enable_cache' => 'getEnableCache',
        'tracking_link' => 'getTrackingLink',
        'is_shipped' => 'getIsShipped',
        'check_process_status' => 'getCheckProcessStatus',
        'use_latest_api_version' => 'getUseLatestApiVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('shipment_provider', $data ?? [], null);
        $this->setIfExists('shipping_method', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('send_notifications', $data ?? [], false);
        $this->setIfExists('tracking_numbers', $data ?? [], null);
        $this->setIfExists('adjust_stock', $data ?? [], false);
        $this->setIfExists('enable_cache', $data ?? [], false);
        $this->setIfExists('tracking_link', $data ?? [], null);
        $this->setIfExists('is_shipped', $data ?? [], true);
        $this->setIfExists('check_process_status', $data ?? [], false);
        $this->setIfExists('use_latest_api_version', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Defines the order for which the shipment will be created
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id Store Id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets shipment_provider
     *
     * @return string|null
     */
    public function getShipmentProvider()
    {
        return $this->container['shipment_provider'];
    }

    /**
     * Sets shipment_provider
     *
     * @param string|null $shipment_provider Defines company name that provide tracking of shipment
     *
     * @return self
     */
    public function setShipmentProvider($shipment_provider)
    {
        if (is_null($shipment_provider)) {
            throw new \InvalidArgumentException('non-nullable shipment_provider cannot be null');
        }
        $this->container['shipment_provider'] = $shipment_provider;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string|null
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string|null $shipping_method Define shipping method
     *
     * @return self
     */
    public function setShippingMethod($shipping_method)
    {
        if (is_null($shipping_method)) {
            throw new \InvalidArgumentException('non-nullable shipping_method cannot be null');
        }
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\OrderShipmentAddItemsInner[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\OrderShipmentAddItemsInner[]|null $items Defines items in the order that will be shipped
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets send_notifications
     *
     * @return bool|null
     */
    public function getSendNotifications()
    {
        return $this->container['send_notifications'];
    }

    /**
     * Sets send_notifications
     *
     * @param bool|null $send_notifications Send notifications to customer after shipment was created
     *
     * @return self
     */
    public function setSendNotifications($send_notifications)
    {
        if (is_null($send_notifications)) {
            throw new \InvalidArgumentException('non-nullable send_notifications cannot be null');
        }
        $this->container['send_notifications'] = $send_notifications;

        return $this;
    }

    /**
     * Gets tracking_numbers
     *
     * @return \OpenAPI\Client\Model\OrderShipmentAddTrackingNumbersInner[]|null
     */
    public function getTrackingNumbers()
    {
        return $this->container['tracking_numbers'];
    }

    /**
     * Sets tracking_numbers
     *
     * @param \OpenAPI\Client\Model\OrderShipmentAddTrackingNumbersInner[]|null $tracking_numbers Defines shipment's tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = \"https://api2cart.com/docs/#/cart/CartInfo\">cart.info</a > method
     *
     * @return self
     */
    public function setTrackingNumbers($tracking_numbers)
    {
        if (is_null($tracking_numbers)) {
            throw new \InvalidArgumentException('non-nullable tracking_numbers cannot be null');
        }
        $this->container['tracking_numbers'] = $tracking_numbers;

        return $this;
    }

    /**
     * Gets adjust_stock
     *
     * @return bool|null
     */
    public function getAdjustStock()
    {
        return $this->container['adjust_stock'];
    }

    /**
     * Sets adjust_stock
     *
     * @param bool|null $adjust_stock This parameter is used for adjust stock.
     *
     * @return self
     */
    public function setAdjustStock($adjust_stock)
    {
        if (is_null($adjust_stock)) {
            throw new \InvalidArgumentException('non-nullable adjust_stock cannot be null');
        }
        $this->container['adjust_stock'] = $adjust_stock;

        return $this;
    }

    /**
     * Gets enable_cache
     *
     * @return bool|null
     */
    public function getEnableCache()
    {
        return $this->container['enable_cache'];
    }

    /**
     * Sets enable_cache
     *
     * @param bool|null $enable_cache If the value is 'true' and order exist in our cache, we will use order.info from cache to prepare shipment items.
     *
     * @return self
     */
    public function setEnableCache($enable_cache)
    {
        if (is_null($enable_cache)) {
            throw new \InvalidArgumentException('non-nullable enable_cache cannot be null');
        }
        $this->container['enable_cache'] = $enable_cache;

        return $this;
    }

    /**
     * Gets tracking_link
     *
     * @return string|null
     */
    public function getTrackingLink()
    {
        return $this->container['tracking_link'];
    }

    /**
     * Sets tracking_link
     *
     * @param string|null $tracking_link Defines custom tracking link
     *
     * @return self
     */
    public function setTrackingLink($tracking_link)
    {
        if (is_null($tracking_link)) {
            throw new \InvalidArgumentException('non-nullable tracking_link cannot be null');
        }
        $this->container['tracking_link'] = $tracking_link;

        return $this;
    }

    /**
     * Gets is_shipped
     *
     * @return bool|null
     */
    public function getIsShipped()
    {
        return $this->container['is_shipped'];
    }

    /**
     * Sets is_shipped
     *
     * @param bool|null $is_shipped Defines shipment's status
     *
     * @return self
     */
    public function setIsShipped($is_shipped)
    {
        if (is_null($is_shipped)) {
            throw new \InvalidArgumentException('non-nullable is_shipped cannot be null');
        }
        $this->container['is_shipped'] = $is_shipped;

        return $this;
    }

    /**
     * Gets check_process_status
     *
     * @return bool|null
     */
    public function getCheckProcessStatus()
    {
        return $this->container['check_process_status'];
    }

    /**
     * Sets check_process_status
     *
     * @param bool|null $check_process_status Disable or enable check process status. Please note that the response will be slower due to additional requests to the store.
     *
     * @return self
     */
    public function setCheckProcessStatus($check_process_status)
    {
        if (is_null($check_process_status)) {
            throw new \InvalidArgumentException('non-nullable check_process_status cannot be null');
        }
        $this->container['check_process_status'] = $check_process_status;

        return $this;
    }

    /**
     * Gets use_latest_api_version
     *
     * @return bool|null
     */
    public function getUseLatestApiVersion()
    {
        return $this->container['use_latest_api_version'];
    }

    /**
     * Sets use_latest_api_version
     *
     * @param bool|null $use_latest_api_version Use the latest platform API version
     *
     * @return self
     */
    public function setUseLatestApiVersion($use_latest_api_version)
    {
        if (is_null($use_latest_api_version)) {
            throw new \InvalidArgumentException('non-nullable use_latest_api_version cannot be null');
        }
        $this->container['use_latest_api_version'] = $use_latest_api_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


