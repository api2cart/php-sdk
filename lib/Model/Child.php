<?php
/**
 * Child
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Child Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Child implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Child';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'parent_id' => 'string',
        'sku' => 'string',
        'upc' => 'string',
        'ean' => 'string',
        'mpn' => 'string',
        'gtin' => 'string',
        'isbn' => 'string',
        'url' => 'string',
        'seo_url' => 'string',
        'sort_order' => 'int',
        'created_time' => '\OpenAPI\Client\Model\A2CDateTime',
        'modified_time' => '\OpenAPI\Client\Model\A2CDateTime',
        'name' => 'string',
        'short_description' => 'string',
        'full_description' => 'string',
        'images' => '\OpenAPI\Client\Model\Image[]',
        'combination' => '\OpenAPI\Client\Model\ProductChildItemCombination[]',
        'default_price' => 'float',
        'cost_price' => 'float',
        'list_price' => 'float',
        'wholesale_price' => 'float',
        'advanced_price' => '\OpenAPI\Client\Model\ProductAdvancedPrice[]',
        'tax_class_id' => 'string',
        'avail_for_sale' => 'bool',
        'allow_backorders' => 'bool',
        'in_stock' => 'bool',
        'on_sale' => 'bool',
        'manage_stock' => 'bool',
        'inventory_level' => 'float',
        'inventory' => '\OpenAPI\Client\Model\ProductInventory[]',
        'min_quantity' => 'float',
        'low_stock_threshold' => 'float',
        'default_qty_in_pack' => 'float',
        'is_qty_in_pack_fixed' => 'bool',
        'weight_unit' => 'string',
        'weight' => 'float',
        'dimensions_unit' => 'string',
        'width' => 'float',
        'height' => 'float',
        'length' => 'float',
        'meta_title' => 'string',
        'meta_description' => 'string',
        'meta_keywords' => 'string',
        'discounts' => '\OpenAPI\Client\Model\Discount[]',
        'is_virtual' => 'bool',
        'additional_fields' => 'object',
        'custom_fields' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'parent_id' => null,
        'sku' => null,
        'upc' => null,
        'ean' => null,
        'mpn' => null,
        'gtin' => null,
        'isbn' => null,
        'url' => null,
        'seo_url' => null,
        'sort_order' => null,
        'created_time' => null,
        'modified_time' => null,
        'name' => null,
        'short_description' => null,
        'full_description' => null,
        'images' => null,
        'combination' => null,
        'default_price' => null,
        'cost_price' => null,
        'list_price' => null,
        'wholesale_price' => null,
        'advanced_price' => null,
        'tax_class_id' => null,
        'avail_for_sale' => null,
        'allow_backorders' => null,
        'in_stock' => null,
        'on_sale' => null,
        'manage_stock' => null,
        'inventory_level' => null,
        'inventory' => null,
        'min_quantity' => null,
        'low_stock_threshold' => null,
        'default_qty_in_pack' => null,
        'is_qty_in_pack_fixed' => null,
        'weight_unit' => null,
        'weight' => null,
        'dimensions_unit' => null,
        'width' => null,
        'height' => null,
        'length' => null,
        'meta_title' => null,
        'meta_description' => null,
        'meta_keywords' => null,
        'discounts' => null,
        'is_virtual' => null,
        'additional_fields' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'parent_id' => false,
        'sku' => true,
        'upc' => true,
        'ean' => true,
        'mpn' => true,
        'gtin' => true,
        'isbn' => true,
        'url' => true,
        'seo_url' => true,
        'sort_order' => true,
        'created_time' => true,
        'modified_time' => true,
        'name' => true,
        'short_description' => true,
        'full_description' => true,
        'images' => false,
        'combination' => false,
        'default_price' => true,
        'cost_price' => true,
        'list_price' => true,
        'wholesale_price' => true,
        'advanced_price' => false,
        'tax_class_id' => true,
        'avail_for_sale' => true,
        'allow_backorders' => true,
        'in_stock' => true,
        'on_sale' => true,
        'manage_stock' => true,
        'inventory_level' => true,
        'inventory' => false,
        'min_quantity' => true,
        'low_stock_threshold' => true,
        'default_qty_in_pack' => true,
        'is_qty_in_pack_fixed' => true,
        'weight_unit' => true,
        'weight' => true,
        'dimensions_unit' => true,
        'width' => true,
        'height' => true,
        'length' => true,
        'meta_title' => true,
        'meta_description' => true,
        'meta_keywords' => true,
        'discounts' => false,
        'is_virtual' => true,
        'additional_fields' => true,
        'custom_fields' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parent_id' => 'parent_id',
        'sku' => 'sku',
        'upc' => 'upc',
        'ean' => 'ean',
        'mpn' => 'mpn',
        'gtin' => 'gtin',
        'isbn' => 'isbn',
        'url' => 'url',
        'seo_url' => 'seo_url',
        'sort_order' => 'sort_order',
        'created_time' => 'created_time',
        'modified_time' => 'modified_time',
        'name' => 'name',
        'short_description' => 'short_description',
        'full_description' => 'full_description',
        'images' => 'images',
        'combination' => 'combination',
        'default_price' => 'default_price',
        'cost_price' => 'cost_price',
        'list_price' => 'list_price',
        'wholesale_price' => 'wholesale_price',
        'advanced_price' => 'advanced_price',
        'tax_class_id' => 'tax_class_id',
        'avail_for_sale' => 'avail_for_sale',
        'allow_backorders' => 'allow_backorders',
        'in_stock' => 'in_stock',
        'on_sale' => 'on_sale',
        'manage_stock' => 'manage_stock',
        'inventory_level' => 'inventory_level',
        'inventory' => 'inventory',
        'min_quantity' => 'min_quantity',
        'low_stock_threshold' => 'low_stock_threshold',
        'default_qty_in_pack' => 'default_qty_in_pack',
        'is_qty_in_pack_fixed' => 'is_qty_in_pack_fixed',
        'weight_unit' => 'weight_unit',
        'weight' => 'weight',
        'dimensions_unit' => 'dimensions_unit',
        'width' => 'width',
        'height' => 'height',
        'length' => 'length',
        'meta_title' => 'meta_title',
        'meta_description' => 'meta_description',
        'meta_keywords' => 'meta_keywords',
        'discounts' => 'discounts',
        'is_virtual' => 'is_virtual',
        'additional_fields' => 'additional_fields',
        'custom_fields' => 'custom_fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent_id' => 'setParentId',
        'sku' => 'setSku',
        'upc' => 'setUpc',
        'ean' => 'setEan',
        'mpn' => 'setMpn',
        'gtin' => 'setGtin',
        'isbn' => 'setIsbn',
        'url' => 'setUrl',
        'seo_url' => 'setSeoUrl',
        'sort_order' => 'setSortOrder',
        'created_time' => 'setCreatedTime',
        'modified_time' => 'setModifiedTime',
        'name' => 'setName',
        'short_description' => 'setShortDescription',
        'full_description' => 'setFullDescription',
        'images' => 'setImages',
        'combination' => 'setCombination',
        'default_price' => 'setDefaultPrice',
        'cost_price' => 'setCostPrice',
        'list_price' => 'setListPrice',
        'wholesale_price' => 'setWholesalePrice',
        'advanced_price' => 'setAdvancedPrice',
        'tax_class_id' => 'setTaxClassId',
        'avail_for_sale' => 'setAvailForSale',
        'allow_backorders' => 'setAllowBackorders',
        'in_stock' => 'setInStock',
        'on_sale' => 'setOnSale',
        'manage_stock' => 'setManageStock',
        'inventory_level' => 'setInventoryLevel',
        'inventory' => 'setInventory',
        'min_quantity' => 'setMinQuantity',
        'low_stock_threshold' => 'setLowStockThreshold',
        'default_qty_in_pack' => 'setDefaultQtyInPack',
        'is_qty_in_pack_fixed' => 'setIsQtyInPackFixed',
        'weight_unit' => 'setWeightUnit',
        'weight' => 'setWeight',
        'dimensions_unit' => 'setDimensionsUnit',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'length' => 'setLength',
        'meta_title' => 'setMetaTitle',
        'meta_description' => 'setMetaDescription',
        'meta_keywords' => 'setMetaKeywords',
        'discounts' => 'setDiscounts',
        'is_virtual' => 'setIsVirtual',
        'additional_fields' => 'setAdditionalFields',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent_id' => 'getParentId',
        'sku' => 'getSku',
        'upc' => 'getUpc',
        'ean' => 'getEan',
        'mpn' => 'getMpn',
        'gtin' => 'getGtin',
        'isbn' => 'getIsbn',
        'url' => 'getUrl',
        'seo_url' => 'getSeoUrl',
        'sort_order' => 'getSortOrder',
        'created_time' => 'getCreatedTime',
        'modified_time' => 'getModifiedTime',
        'name' => 'getName',
        'short_description' => 'getShortDescription',
        'full_description' => 'getFullDescription',
        'images' => 'getImages',
        'combination' => 'getCombination',
        'default_price' => 'getDefaultPrice',
        'cost_price' => 'getCostPrice',
        'list_price' => 'getListPrice',
        'wholesale_price' => 'getWholesalePrice',
        'advanced_price' => 'getAdvancedPrice',
        'tax_class_id' => 'getTaxClassId',
        'avail_for_sale' => 'getAvailForSale',
        'allow_backorders' => 'getAllowBackorders',
        'in_stock' => 'getInStock',
        'on_sale' => 'getOnSale',
        'manage_stock' => 'getManageStock',
        'inventory_level' => 'getInventoryLevel',
        'inventory' => 'getInventory',
        'min_quantity' => 'getMinQuantity',
        'low_stock_threshold' => 'getLowStockThreshold',
        'default_qty_in_pack' => 'getDefaultQtyInPack',
        'is_qty_in_pack_fixed' => 'getIsQtyInPackFixed',
        'weight_unit' => 'getWeightUnit',
        'weight' => 'getWeight',
        'dimensions_unit' => 'getDimensionsUnit',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'length' => 'getLength',
        'meta_title' => 'getMetaTitle',
        'meta_description' => 'getMetaDescription',
        'meta_keywords' => 'getMetaKeywords',
        'discounts' => 'getDiscounts',
        'is_virtual' => 'getIsVirtual',
        'additional_fields' => 'getAdditionalFields',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('upc', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('mpn', $data ?? [], null);
        $this->setIfExists('gtin', $data ?? [], null);
        $this->setIfExists('isbn', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('seo_url', $data ?? [], null);
        $this->setIfExists('sort_order', $data ?? [], null);
        $this->setIfExists('created_time', $data ?? [], null);
        $this->setIfExists('modified_time', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('full_description', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('combination', $data ?? [], null);
        $this->setIfExists('default_price', $data ?? [], null);
        $this->setIfExists('cost_price', $data ?? [], null);
        $this->setIfExists('list_price', $data ?? [], null);
        $this->setIfExists('wholesale_price', $data ?? [], null);
        $this->setIfExists('advanced_price', $data ?? [], null);
        $this->setIfExists('tax_class_id', $data ?? [], null);
        $this->setIfExists('avail_for_sale', $data ?? [], null);
        $this->setIfExists('allow_backorders', $data ?? [], null);
        $this->setIfExists('in_stock', $data ?? [], null);
        $this->setIfExists('on_sale', $data ?? [], null);
        $this->setIfExists('manage_stock', $data ?? [], null);
        $this->setIfExists('inventory_level', $data ?? [], null);
        $this->setIfExists('inventory', $data ?? [], null);
        $this->setIfExists('min_quantity', $data ?? [], null);
        $this->setIfExists('low_stock_threshold', $data ?? [], null);
        $this->setIfExists('default_qty_in_pack', $data ?? [], null);
        $this->setIfExists('is_qty_in_pack_fixed', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('dimensions_unit', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('meta_title', $data ?? [], null);
        $this->setIfExists('meta_description', $data ?? [], null);
        $this->setIfExists('meta_keywords', $data ?? [], null);
        $this->setIfExists('discounts', $data ?? [], null);
        $this->setIfExists('is_virtual', $data ?? [], null);
        $this->setIfExists('additional_fields', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            throw new \InvalidArgumentException('non-nullable parent_id cannot be null');
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku sku
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            array_push($this->openAPINullablesSetToNull, 'sku');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sku', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string|null
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string|null $upc upc
     *
     * @return self
     */
    public function setUpc($upc)
    {
        if (is_null($upc)) {
            array_push($this->openAPINullablesSetToNull, 'upc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean ean
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            array_push($this->openAPINullablesSetToNull, 'ean');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ean', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string|null
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string|null $mpn mpn
     *
     * @return self
     */
    public function setMpn($mpn)
    {
        if (is_null($mpn)) {
            array_push($this->openAPINullablesSetToNull, 'mpn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mpn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin gtin
     *
     * @return self
     */
    public function setGtin($gtin)
    {
        if (is_null($gtin)) {
            array_push($this->openAPINullablesSetToNull, 'gtin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gtin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets isbn
     *
     * @return string|null
     */
    public function getIsbn()
    {
        return $this->container['isbn'];
    }

    /**
     * Sets isbn
     *
     * @param string|null $isbn isbn
     *
     * @return self
     */
    public function setIsbn($isbn)
    {
        if (is_null($isbn)) {
            array_push($this->openAPINullablesSetToNull, 'isbn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isbn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isbn'] = $isbn;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets seo_url
     *
     * @return string|null
     */
    public function getSeoUrl()
    {
        return $this->container['seo_url'];
    }

    /**
     * Sets seo_url
     *
     * @param string|null $seo_url seo_url
     *
     * @return self
     */
    public function setSeoUrl($seo_url)
    {
        if (is_null($seo_url)) {
            array_push($this->openAPINullablesSetToNull, 'seo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['seo_url'] = $seo_url;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int|null $sort_order sort_order
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        if (is_null($sort_order)) {
            array_push($this->openAPINullablesSetToNull, 'sort_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \OpenAPI\Client\Model\A2CDateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \OpenAPI\Client\Model\A2CDateTime|null $created_time created_time
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        if (is_null($created_time)) {
            array_push($this->openAPINullablesSetToNull, 'created_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets modified_time
     *
     * @return \OpenAPI\Client\Model\A2CDateTime|null
     */
    public function getModifiedTime()
    {
        return $this->container['modified_time'];
    }

    /**
     * Sets modified_time
     *
     * @param \OpenAPI\Client\Model\A2CDateTime|null $modified_time modified_time
     *
     * @return self
     */
    public function setModifiedTime($modified_time)
    {
        if (is_null($modified_time)) {
            array_push($this->openAPINullablesSetToNull, 'modified_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified_time'] = $modified_time;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description short_description
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if (is_null($short_description)) {
            array_push($this->openAPINullablesSetToNull, 'short_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets full_description
     *
     * @return string|null
     */
    public function getFullDescription()
    {
        return $this->container['full_description'];
    }

    /**
     * Sets full_description
     *
     * @param string|null $full_description full_description
     *
     * @return self
     */
    public function setFullDescription($full_description)
    {
        if (is_null($full_description)) {
            array_push($this->openAPINullablesSetToNull, 'full_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('full_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['full_description'] = $full_description;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \OpenAPI\Client\Model\Image[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \OpenAPI\Client\Model\Image[]|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets combination
     *
     * @return \OpenAPI\Client\Model\ProductChildItemCombination[]|null
     */
    public function getCombination()
    {
        return $this->container['combination'];
    }

    /**
     * Sets combination
     *
     * @param \OpenAPI\Client\Model\ProductChildItemCombination[]|null $combination combination
     *
     * @return self
     */
    public function setCombination($combination)
    {
        if (is_null($combination)) {
            throw new \InvalidArgumentException('non-nullable combination cannot be null');
        }
        $this->container['combination'] = $combination;

        return $this;
    }

    /**
     * Gets default_price
     *
     * @return float|null
     */
    public function getDefaultPrice()
    {
        return $this->container['default_price'];
    }

    /**
     * Sets default_price
     *
     * @param float|null $default_price default_price
     *
     * @return self
     */
    public function setDefaultPrice($default_price)
    {
        if (is_null($default_price)) {
            array_push($this->openAPINullablesSetToNull, 'default_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_price'] = $default_price;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return float|null
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param float|null $cost_price cost_price
     *
     * @return self
     */
    public function setCostPrice($cost_price)
    {
        if (is_null($cost_price)) {
            array_push($this->openAPINullablesSetToNull, 'cost_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets list_price
     *
     * @return float|null
     */
    public function getListPrice()
    {
        return $this->container['list_price'];
    }

    /**
     * Sets list_price
     *
     * @param float|null $list_price list_price
     *
     * @return self
     */
    public function setListPrice($list_price)
    {
        if (is_null($list_price)) {
            array_push($this->openAPINullablesSetToNull, 'list_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('list_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['list_price'] = $list_price;

        return $this;
    }

    /**
     * Gets wholesale_price
     *
     * @return float|null
     */
    public function getWholesalePrice()
    {
        return $this->container['wholesale_price'];
    }

    /**
     * Sets wholesale_price
     *
     * @param float|null $wholesale_price wholesale_price
     *
     * @return self
     */
    public function setWholesalePrice($wholesale_price)
    {
        if (is_null($wholesale_price)) {
            array_push($this->openAPINullablesSetToNull, 'wholesale_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wholesale_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wholesale_price'] = $wholesale_price;

        return $this;
    }

    /**
     * Gets advanced_price
     *
     * @return \OpenAPI\Client\Model\ProductAdvancedPrice[]|null
     */
    public function getAdvancedPrice()
    {
        return $this->container['advanced_price'];
    }

    /**
     * Sets advanced_price
     *
     * @param \OpenAPI\Client\Model\ProductAdvancedPrice[]|null $advanced_price advanced_price
     *
     * @return self
     */
    public function setAdvancedPrice($advanced_price)
    {
        if (is_null($advanced_price)) {
            throw new \InvalidArgumentException('non-nullable advanced_price cannot be null');
        }
        $this->container['advanced_price'] = $advanced_price;

        return $this;
    }

    /**
     * Gets tax_class_id
     *
     * @return string|null
     */
    public function getTaxClassId()
    {
        return $this->container['tax_class_id'];
    }

    /**
     * Sets tax_class_id
     *
     * @param string|null $tax_class_id tax_class_id
     *
     * @return self
     */
    public function setTaxClassId($tax_class_id)
    {
        if (is_null($tax_class_id)) {
            array_push($this->openAPINullablesSetToNull, 'tax_class_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_class_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_class_id'] = $tax_class_id;

        return $this;
    }

    /**
     * Gets avail_for_sale
     *
     * @return bool|null
     */
    public function getAvailForSale()
    {
        return $this->container['avail_for_sale'];
    }

    /**
     * Sets avail_for_sale
     *
     * @param bool|null $avail_for_sale avail_for_sale
     *
     * @return self
     */
    public function setAvailForSale($avail_for_sale)
    {
        if (is_null($avail_for_sale)) {
            array_push($this->openAPINullablesSetToNull, 'avail_for_sale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avail_for_sale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avail_for_sale'] = $avail_for_sale;

        return $this;
    }

    /**
     * Gets allow_backorders
     *
     * @return bool|null
     */
    public function getAllowBackorders()
    {
        return $this->container['allow_backorders'];
    }

    /**
     * Sets allow_backorders
     *
     * @param bool|null $allow_backorders allow_backorders
     *
     * @return self
     */
    public function setAllowBackorders($allow_backorders)
    {
        if (is_null($allow_backorders)) {
            array_push($this->openAPINullablesSetToNull, 'allow_backorders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allow_backorders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allow_backorders'] = $allow_backorders;

        return $this;
    }

    /**
     * Gets in_stock
     *
     * @return bool|null
     */
    public function getInStock()
    {
        return $this->container['in_stock'];
    }

    /**
     * Sets in_stock
     *
     * @param bool|null $in_stock in_stock
     *
     * @return self
     */
    public function setInStock($in_stock)
    {
        if (is_null($in_stock)) {
            array_push($this->openAPINullablesSetToNull, 'in_stock');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('in_stock', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['in_stock'] = $in_stock;

        return $this;
    }

    /**
     * Gets on_sale
     *
     * @return bool|null
     */
    public function getOnSale()
    {
        return $this->container['on_sale'];
    }

    /**
     * Sets on_sale
     *
     * @param bool|null $on_sale on_sale
     *
     * @return self
     */
    public function setOnSale($on_sale)
    {
        if (is_null($on_sale)) {
            array_push($this->openAPINullablesSetToNull, 'on_sale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('on_sale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['on_sale'] = $on_sale;

        return $this;
    }

    /**
     * Gets manage_stock
     *
     * @return bool|null
     */
    public function getManageStock()
    {
        return $this->container['manage_stock'];
    }

    /**
     * Sets manage_stock
     *
     * @param bool|null $manage_stock manage_stock
     *
     * @return self
     */
    public function setManageStock($manage_stock)
    {
        if (is_null($manage_stock)) {
            array_push($this->openAPINullablesSetToNull, 'manage_stock');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manage_stock', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manage_stock'] = $manage_stock;

        return $this;
    }

    /**
     * Gets inventory_level
     *
     * @return float|null
     */
    public function getInventoryLevel()
    {
        return $this->container['inventory_level'];
    }

    /**
     * Sets inventory_level
     *
     * @param float|null $inventory_level inventory_level
     *
     * @return self
     */
    public function setInventoryLevel($inventory_level)
    {
        if (is_null($inventory_level)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inventory_level'] = $inventory_level;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return \OpenAPI\Client\Model\ProductInventory[]|null
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param \OpenAPI\Client\Model\ProductInventory[]|null $inventory inventory
     *
     * @return self
     */
    public function setInventory($inventory)
    {
        if (is_null($inventory)) {
            throw new \InvalidArgumentException('non-nullable inventory cannot be null');
        }
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets min_quantity
     *
     * @return float|null
     */
    public function getMinQuantity()
    {
        return $this->container['min_quantity'];
    }

    /**
     * Sets min_quantity
     *
     * @param float|null $min_quantity min_quantity
     *
     * @return self
     */
    public function setMinQuantity($min_quantity)
    {
        if (is_null($min_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'min_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_quantity'] = $min_quantity;

        return $this;
    }

    /**
     * Gets low_stock_threshold
     *
     * @return float|null
     */
    public function getLowStockThreshold()
    {
        return $this->container['low_stock_threshold'];
    }

    /**
     * Sets low_stock_threshold
     *
     * @param float|null $low_stock_threshold low_stock_threshold
     *
     * @return self
     */
    public function setLowStockThreshold($low_stock_threshold)
    {
        if (is_null($low_stock_threshold)) {
            array_push($this->openAPINullablesSetToNull, 'low_stock_threshold');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('low_stock_threshold', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['low_stock_threshold'] = $low_stock_threshold;

        return $this;
    }

    /**
     * Gets default_qty_in_pack
     *
     * @return float|null
     */
    public function getDefaultQtyInPack()
    {
        return $this->container['default_qty_in_pack'];
    }

    /**
     * Sets default_qty_in_pack
     *
     * @param float|null $default_qty_in_pack default_qty_in_pack
     *
     * @return self
     */
    public function setDefaultQtyInPack($default_qty_in_pack)
    {
        if (is_null($default_qty_in_pack)) {
            array_push($this->openAPINullablesSetToNull, 'default_qty_in_pack');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_qty_in_pack', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_qty_in_pack'] = $default_qty_in_pack;

        return $this;
    }

    /**
     * Gets is_qty_in_pack_fixed
     *
     * @return bool|null
     */
    public function getIsQtyInPackFixed()
    {
        return $this->container['is_qty_in_pack_fixed'];
    }

    /**
     * Sets is_qty_in_pack_fixed
     *
     * @param bool|null $is_qty_in_pack_fixed is_qty_in_pack_fixed
     *
     * @return self
     */
    public function setIsQtyInPackFixed($is_qty_in_pack_fixed)
    {
        if (is_null($is_qty_in_pack_fixed)) {
            array_push($this->openAPINullablesSetToNull, 'is_qty_in_pack_fixed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_qty_in_pack_fixed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_qty_in_pack_fixed'] = $is_qty_in_pack_fixed;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string|null $weight_unit weight_unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            array_push($this->openAPINullablesSetToNull, 'weight_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            array_push($this->openAPINullablesSetToNull, 'weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets dimensions_unit
     *
     * @return string|null
     */
    public function getDimensionsUnit()
    {
        return $this->container['dimensions_unit'];
    }

    /**
     * Sets dimensions_unit
     *
     * @param string|null $dimensions_unit dimensions_unit
     *
     * @return self
     */
    public function setDimensionsUnit($dimensions_unit)
    {
        if (is_null($dimensions_unit)) {
            array_push($this->openAPINullablesSetToNull, 'dimensions_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dimensions_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dimensions_unit'] = $dimensions_unit;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            array_push($this->openAPINullablesSetToNull, 'width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            array_push($this->openAPINullablesSetToNull, 'height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float|null $length length
     *
     * @return self
     */
    public function setLength($length)
    {
        if (is_null($length)) {
            array_push($this->openAPINullablesSetToNull, 'length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('length', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets meta_title
     *
     * @return string|null
     */
    public function getMetaTitle()
    {
        return $this->container['meta_title'];
    }

    /**
     * Sets meta_title
     *
     * @param string|null $meta_title meta_title
     *
     * @return self
     */
    public function setMetaTitle($meta_title)
    {
        if (is_null($meta_title)) {
            array_push($this->openAPINullablesSetToNull, 'meta_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meta_title'] = $meta_title;

        return $this;
    }

    /**
     * Gets meta_description
     *
     * @return string|null
     */
    public function getMetaDescription()
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     *
     * @param string|null $meta_description meta_description
     *
     * @return self
     */
    public function setMetaDescription($meta_description)
    {
        if (is_null($meta_description)) {
            array_push($this->openAPINullablesSetToNull, 'meta_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets meta_keywords
     *
     * @return string|null
     */
    public function getMetaKeywords()
    {
        return $this->container['meta_keywords'];
    }

    /**
     * Sets meta_keywords
     *
     * @param string|null $meta_keywords meta_keywords
     *
     * @return self
     */
    public function setMetaKeywords($meta_keywords)
    {
        if (is_null($meta_keywords)) {
            array_push($this->openAPINullablesSetToNull, 'meta_keywords');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_keywords', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meta_keywords'] = $meta_keywords;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \OpenAPI\Client\Model\Discount[]|null
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \OpenAPI\Client\Model\Discount[]|null $discounts discounts
     *
     * @return self
     */
    public function setDiscounts($discounts)
    {
        if (is_null($discounts)) {
            throw new \InvalidArgumentException('non-nullable discounts cannot be null');
        }
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets is_virtual
     *
     * @return bool|null
     */
    public function getIsVirtual()
    {
        return $this->container['is_virtual'];
    }

    /**
     * Sets is_virtual
     *
     * @param bool|null $is_virtual is_virtual
     *
     * @return self
     */
    public function setIsVirtual($is_virtual)
    {
        if (is_null($is_virtual)) {
            array_push($this->openAPINullablesSetToNull, 'is_virtual');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_virtual', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_virtual'] = $is_virtual;

        return $this;
    }

    /**
     * Gets additional_fields
     *
     * @return object|null
     */
    public function getAdditionalFields()
    {
        return $this->container['additional_fields'];
    }

    /**
     * Sets additional_fields
     *
     * @param object|null $additional_fields additional_fields
     *
     * @return self
     */
    public function setAdditionalFields($additional_fields)
    {
        if (is_null($additional_fields)) {
            array_push($this->openAPINullablesSetToNull, 'additional_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_fields'] = $additional_fields;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            array_push($this->openAPINullablesSetToNull, 'custom_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


