<?php
/**
 * CustomerAddAddressInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomerAddAddressInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerAddAddressInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerAdd_address_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_book_type' => 'string',
        'address_book_first_name' => 'string',
        'address_book_last_name' => 'string',
        'address_book_company' => 'string',
        'address_book_fax' => 'string',
        'address_book_phone' => 'string',
        'address_book_phone_mobile' => 'string',
        'address_book_website' => 'string',
        'address_book_address1' => 'string',
        'address_book_address2' => 'string',
        'address_book_city' => 'string',
        'address_book_country' => 'string',
        'address_book_state' => 'string',
        'address_book_postcode' => 'string',
        'address_book_gender' => 'string',
        'address_book_region' => 'string',
        'address_book_default' => 'bool',
        'address_book_tax_id' => 'string',
        'address_book_identification_number' => 'string',
        'address_book_alias' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address_book_type' => null,
        'address_book_first_name' => null,
        'address_book_last_name' => null,
        'address_book_company' => null,
        'address_book_fax' => null,
        'address_book_phone' => null,
        'address_book_phone_mobile' => null,
        'address_book_website' => null,
        'address_book_address1' => null,
        'address_book_address2' => null,
        'address_book_city' => null,
        'address_book_country' => null,
        'address_book_state' => null,
        'address_book_postcode' => null,
        'address_book_gender' => null,
        'address_book_region' => null,
        'address_book_default' => null,
        'address_book_tax_id' => null,
        'address_book_identification_number' => null,
        'address_book_alias' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address_book_type' => false,
        'address_book_first_name' => false,
        'address_book_last_name' => false,
        'address_book_company' => false,
        'address_book_fax' => false,
        'address_book_phone' => false,
        'address_book_phone_mobile' => false,
        'address_book_website' => false,
        'address_book_address1' => false,
        'address_book_address2' => false,
        'address_book_city' => false,
        'address_book_country' => false,
        'address_book_state' => false,
        'address_book_postcode' => false,
        'address_book_gender' => false,
        'address_book_region' => false,
        'address_book_default' => false,
        'address_book_tax_id' => false,
        'address_book_identification_number' => false,
        'address_book_alias' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_book_type' => 'address_book_type',
        'address_book_first_name' => 'address_book_first_name',
        'address_book_last_name' => 'address_book_last_name',
        'address_book_company' => 'address_book_company',
        'address_book_fax' => 'address_book_fax',
        'address_book_phone' => 'address_book_phone',
        'address_book_phone_mobile' => 'address_book_phone_mobile',
        'address_book_website' => 'address_book_website',
        'address_book_address1' => 'address_book_address1',
        'address_book_address2' => 'address_book_address2',
        'address_book_city' => 'address_book_city',
        'address_book_country' => 'address_book_country',
        'address_book_state' => 'address_book_state',
        'address_book_postcode' => 'address_book_postcode',
        'address_book_gender' => 'address_book_gender',
        'address_book_region' => 'address_book_region',
        'address_book_default' => 'address_book_default',
        'address_book_tax_id' => 'address_book_tax_id',
        'address_book_identification_number' => 'address_book_identification_number',
        'address_book_alias' => 'address_book_alias'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_book_type' => 'setAddressBookType',
        'address_book_first_name' => 'setAddressBookFirstName',
        'address_book_last_name' => 'setAddressBookLastName',
        'address_book_company' => 'setAddressBookCompany',
        'address_book_fax' => 'setAddressBookFax',
        'address_book_phone' => 'setAddressBookPhone',
        'address_book_phone_mobile' => 'setAddressBookPhoneMobile',
        'address_book_website' => 'setAddressBookWebsite',
        'address_book_address1' => 'setAddressBookAddress1',
        'address_book_address2' => 'setAddressBookAddress2',
        'address_book_city' => 'setAddressBookCity',
        'address_book_country' => 'setAddressBookCountry',
        'address_book_state' => 'setAddressBookState',
        'address_book_postcode' => 'setAddressBookPostcode',
        'address_book_gender' => 'setAddressBookGender',
        'address_book_region' => 'setAddressBookRegion',
        'address_book_default' => 'setAddressBookDefault',
        'address_book_tax_id' => 'setAddressBookTaxId',
        'address_book_identification_number' => 'setAddressBookIdentificationNumber',
        'address_book_alias' => 'setAddressBookAlias'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_book_type' => 'getAddressBookType',
        'address_book_first_name' => 'getAddressBookFirstName',
        'address_book_last_name' => 'getAddressBookLastName',
        'address_book_company' => 'getAddressBookCompany',
        'address_book_fax' => 'getAddressBookFax',
        'address_book_phone' => 'getAddressBookPhone',
        'address_book_phone_mobile' => 'getAddressBookPhoneMobile',
        'address_book_website' => 'getAddressBookWebsite',
        'address_book_address1' => 'getAddressBookAddress1',
        'address_book_address2' => 'getAddressBookAddress2',
        'address_book_city' => 'getAddressBookCity',
        'address_book_country' => 'getAddressBookCountry',
        'address_book_state' => 'getAddressBookState',
        'address_book_postcode' => 'getAddressBookPostcode',
        'address_book_gender' => 'getAddressBookGender',
        'address_book_region' => 'getAddressBookRegion',
        'address_book_default' => 'getAddressBookDefault',
        'address_book_tax_id' => 'getAddressBookTaxId',
        'address_book_identification_number' => 'getAddressBookIdentificationNumber',
        'address_book_alias' => 'getAddressBookAlias'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('address_book_type', $data ?? [], null);
        $this->setIfExists('address_book_first_name', $data ?? [], null);
        $this->setIfExists('address_book_last_name', $data ?? [], null);
        $this->setIfExists('address_book_company', $data ?? [], null);
        $this->setIfExists('address_book_fax', $data ?? [], null);
        $this->setIfExists('address_book_phone', $data ?? [], null);
        $this->setIfExists('address_book_phone_mobile', $data ?? [], null);
        $this->setIfExists('address_book_website', $data ?? [], null);
        $this->setIfExists('address_book_address1', $data ?? [], null);
        $this->setIfExists('address_book_address2', $data ?? [], null);
        $this->setIfExists('address_book_city', $data ?? [], null);
        $this->setIfExists('address_book_country', $data ?? [], null);
        $this->setIfExists('address_book_state', $data ?? [], null);
        $this->setIfExists('address_book_postcode', $data ?? [], null);
        $this->setIfExists('address_book_gender', $data ?? [], null);
        $this->setIfExists('address_book_region', $data ?? [], null);
        $this->setIfExists('address_book_default', $data ?? [], null);
        $this->setIfExists('address_book_tax_id', $data ?? [], null);
        $this->setIfExists('address_book_identification_number', $data ?? [], null);
        $this->setIfExists('address_book_alias', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_book_type
     *
     * @return string|null
     */
    public function getAddressBookType()
    {
        return $this->container['address_book_type'];
    }

    /**
     * Sets address_book_type
     *
     * @param string|null $address_book_type Specifies customer's address type
     *
     * @return self
     */
    public function setAddressBookType($address_book_type)
    {
        if (is_null($address_book_type)) {
            throw new \InvalidArgumentException('non-nullable address_book_type cannot be null');
        }
        $this->container['address_book_type'] = $address_book_type;

        return $this;
    }

    /**
     * Gets address_book_first_name
     *
     * @return string|null
     */
    public function getAddressBookFirstName()
    {
        return $this->container['address_book_first_name'];
    }

    /**
     * Sets address_book_first_name
     *
     * @param string|null $address_book_first_name Specifies customer's first name in the address book
     *
     * @return self
     */
    public function setAddressBookFirstName($address_book_first_name)
    {
        if (is_null($address_book_first_name)) {
            throw new \InvalidArgumentException('non-nullable address_book_first_name cannot be null');
        }
        $this->container['address_book_first_name'] = $address_book_first_name;

        return $this;
    }

    /**
     * Gets address_book_last_name
     *
     * @return string|null
     */
    public function getAddressBookLastName()
    {
        return $this->container['address_book_last_name'];
    }

    /**
     * Sets address_book_last_name
     *
     * @param string|null $address_book_last_name Specifies customer's last name in the address book
     *
     * @return self
     */
    public function setAddressBookLastName($address_book_last_name)
    {
        if (is_null($address_book_last_name)) {
            throw new \InvalidArgumentException('non-nullable address_book_last_name cannot be null');
        }
        $this->container['address_book_last_name'] = $address_book_last_name;

        return $this;
    }

    /**
     * Gets address_book_company
     *
     * @return string|null
     */
    public function getAddressBookCompany()
    {
        return $this->container['address_book_company'];
    }

    /**
     * Sets address_book_company
     *
     * @param string|null $address_book_company Specifies customer's company name in the address book
     *
     * @return self
     */
    public function setAddressBookCompany($address_book_company)
    {
        if (is_null($address_book_company)) {
            throw new \InvalidArgumentException('non-nullable address_book_company cannot be null');
        }
        $this->container['address_book_company'] = $address_book_company;

        return $this;
    }

    /**
     * Gets address_book_fax
     *
     * @return string|null
     */
    public function getAddressBookFax()
    {
        return $this->container['address_book_fax'];
    }

    /**
     * Sets address_book_fax
     *
     * @param string|null $address_book_fax Specifies customer's fax in the address book
     *
     * @return self
     */
    public function setAddressBookFax($address_book_fax)
    {
        if (is_null($address_book_fax)) {
            throw new \InvalidArgumentException('non-nullable address_book_fax cannot be null');
        }
        $this->container['address_book_fax'] = $address_book_fax;

        return $this;
    }

    /**
     * Gets address_book_phone
     *
     * @return string|null
     */
    public function getAddressBookPhone()
    {
        return $this->container['address_book_phone'];
    }

    /**
     * Sets address_book_phone
     *
     * @param string|null $address_book_phone Specifies customer's phone number in the address book
     *
     * @return self
     */
    public function setAddressBookPhone($address_book_phone)
    {
        if (is_null($address_book_phone)) {
            throw new \InvalidArgumentException('non-nullable address_book_phone cannot be null');
        }
        $this->container['address_book_phone'] = $address_book_phone;

        return $this;
    }

    /**
     * Gets address_book_phone_mobile
     *
     * @return string|null
     */
    public function getAddressBookPhoneMobile()
    {
        return $this->container['address_book_phone_mobile'];
    }

    /**
     * Sets address_book_phone_mobile
     *
     * @param string|null $address_book_phone_mobile Specifies customer's mobile phone number in the address book
     *
     * @return self
     */
    public function setAddressBookPhoneMobile($address_book_phone_mobile)
    {
        if (is_null($address_book_phone_mobile)) {
            throw new \InvalidArgumentException('non-nullable address_book_phone_mobile cannot be null');
        }
        $this->container['address_book_phone_mobile'] = $address_book_phone_mobile;

        return $this;
    }

    /**
     * Gets address_book_website
     *
     * @return string|null
     */
    public function getAddressBookWebsite()
    {
        return $this->container['address_book_website'];
    }

    /**
     * Sets address_book_website
     *
     * @param string|null $address_book_website Specifies customer's website in the address book
     *
     * @return self
     */
    public function setAddressBookWebsite($address_book_website)
    {
        if (is_null($address_book_website)) {
            throw new \InvalidArgumentException('non-nullable address_book_website cannot be null');
        }
        $this->container['address_book_website'] = $address_book_website;

        return $this;
    }

    /**
     * Gets address_book_address1
     *
     * @return string|null
     */
    public function getAddressBookAddress1()
    {
        return $this->container['address_book_address1'];
    }

    /**
     * Sets address_book_address1
     *
     * @param string|null $address_book_address1 Specifies customer's first address in the address book
     *
     * @return self
     */
    public function setAddressBookAddress1($address_book_address1)
    {
        if (is_null($address_book_address1)) {
            throw new \InvalidArgumentException('non-nullable address_book_address1 cannot be null');
        }
        $this->container['address_book_address1'] = $address_book_address1;

        return $this;
    }

    /**
     * Gets address_book_address2
     *
     * @return string|null
     */
    public function getAddressBookAddress2()
    {
        return $this->container['address_book_address2'];
    }

    /**
     * Sets address_book_address2
     *
     * @param string|null $address_book_address2 Specifies customer's second address in the address book
     *
     * @return self
     */
    public function setAddressBookAddress2($address_book_address2)
    {
        if (is_null($address_book_address2)) {
            throw new \InvalidArgumentException('non-nullable address_book_address2 cannot be null');
        }
        $this->container['address_book_address2'] = $address_book_address2;

        return $this;
    }

    /**
     * Gets address_book_city
     *
     * @return string|null
     */
    public function getAddressBookCity()
    {
        return $this->container['address_book_city'];
    }

    /**
     * Sets address_book_city
     *
     * @param string|null $address_book_city Specifies customer's city in the address book
     *
     * @return self
     */
    public function setAddressBookCity($address_book_city)
    {
        if (is_null($address_book_city)) {
            throw new \InvalidArgumentException('non-nullable address_book_city cannot be null');
        }
        $this->container['address_book_city'] = $address_book_city;

        return $this;
    }

    /**
     * Gets address_book_country
     *
     * @return string|null
     */
    public function getAddressBookCountry()
    {
        return $this->container['address_book_country'];
    }

    /**
     * Sets address_book_country
     *
     * @param string|null $address_book_country ISO code or name of country
     *
     * @return self
     */
    public function setAddressBookCountry($address_book_country)
    {
        if (is_null($address_book_country)) {
            throw new \InvalidArgumentException('non-nullable address_book_country cannot be null');
        }
        $this->container['address_book_country'] = $address_book_country;

        return $this;
    }

    /**
     * Gets address_book_state
     *
     * @return string|null
     */
    public function getAddressBookState()
    {
        return $this->container['address_book_state'];
    }

    /**
     * Sets address_book_state
     *
     * @param string|null $address_book_state ISO code or name of state.
     *
     * @return self
     */
    public function setAddressBookState($address_book_state)
    {
        if (is_null($address_book_state)) {
            throw new \InvalidArgumentException('non-nullable address_book_state cannot be null');
        }
        $this->container['address_book_state'] = $address_book_state;

        return $this;
    }

    /**
     * Gets address_book_postcode
     *
     * @return string|null
     */
    public function getAddressBookPostcode()
    {
        return $this->container['address_book_postcode'];
    }

    /**
     * Sets address_book_postcode
     *
     * @param string|null $address_book_postcode Specifies customer's postcode
     *
     * @return self
     */
    public function setAddressBookPostcode($address_book_postcode)
    {
        if (is_null($address_book_postcode)) {
            throw new \InvalidArgumentException('non-nullable address_book_postcode cannot be null');
        }
        $this->container['address_book_postcode'] = $address_book_postcode;

        return $this;
    }

    /**
     * Gets address_book_gender
     *
     * @return string|null
     */
    public function getAddressBookGender()
    {
        return $this->container['address_book_gender'];
    }

    /**
     * Sets address_book_gender
     *
     * @param string|null $address_book_gender Specifies customer's gender
     *
     * @return self
     */
    public function setAddressBookGender($address_book_gender)
    {
        if (is_null($address_book_gender)) {
            throw new \InvalidArgumentException('non-nullable address_book_gender cannot be null');
        }
        $this->container['address_book_gender'] = $address_book_gender;

        return $this;
    }

    /**
     * Gets address_book_region
     *
     * @return string|null
     */
    public function getAddressBookRegion()
    {
        return $this->container['address_book_region'];
    }

    /**
     * Sets address_book_region
     *
     * @param string|null $address_book_region Specifies customer's region
     *
     * @return self
     */
    public function setAddressBookRegion($address_book_region)
    {
        if (is_null($address_book_region)) {
            throw new \InvalidArgumentException('non-nullable address_book_region cannot be null');
        }
        $this->container['address_book_region'] = $address_book_region;

        return $this;
    }

    /**
     * Gets address_book_default
     *
     * @return bool|null
     */
    public function getAddressBookDefault()
    {
        return $this->container['address_book_default'];
    }

    /**
     * Sets address_book_default
     *
     * @param bool|null $address_book_default Defines whether the address is used by default
     *
     * @return self
     */
    public function setAddressBookDefault($address_book_default)
    {
        if (is_null($address_book_default)) {
            throw new \InvalidArgumentException('non-nullable address_book_default cannot be null');
        }
        $this->container['address_book_default'] = $address_book_default;

        return $this;
    }

    /**
     * Gets address_book_tax_id
     *
     * @return string|null
     */
    public function getAddressBookTaxId()
    {
        return $this->container['address_book_tax_id'];
    }

    /**
     * Sets address_book_tax_id
     *
     * @param string|null $address_book_tax_id Add Tax Id
     *
     * @return self
     */
    public function setAddressBookTaxId($address_book_tax_id)
    {
        if (is_null($address_book_tax_id)) {
            throw new \InvalidArgumentException('non-nullable address_book_tax_id cannot be null');
        }
        $this->container['address_book_tax_id'] = $address_book_tax_id;

        return $this;
    }

    /**
     * Gets address_book_identification_number
     *
     * @return string|null
     */
    public function getAddressBookIdentificationNumber()
    {
        return $this->container['address_book_identification_number'];
    }

    /**
     * Sets address_book_identification_number
     *
     * @param string|null $address_book_identification_number The national ID card number of this person, or a unique tax identification number.
     *
     * @return self
     */
    public function setAddressBookIdentificationNumber($address_book_identification_number)
    {
        if (is_null($address_book_identification_number)) {
            throw new \InvalidArgumentException('non-nullable address_book_identification_number cannot be null');
        }
        $this->container['address_book_identification_number'] = $address_book_identification_number;

        return $this;
    }

    /**
     * Gets address_book_alias
     *
     * @return string|null
     */
    public function getAddressBookAlias()
    {
        return $this->container['address_book_alias'];
    }

    /**
     * Sets address_book_alias
     *
     * @param string|null $address_book_alias Specifies customer's alias in the address book
     *
     * @return self
     */
    public function setAddressBookAlias($address_book_alias)
    {
        if (is_null($address_book_alias)) {
            throw new \InvalidArgumentException('non-nullable address_book_alias cannot be null');
        }
        $this->container['address_book_alias'] = $address_book_alias;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


