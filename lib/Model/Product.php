<?php
/**
 * Product
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Product implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'u_model' => 'string',
        'u_sku' => 'string',
        'name' => 'string',
        'description' => 'string',
        'short_description' => 'string',
        'price' => 'float',
        'advanced_price' => '\OpenAPI\Client\Model\ProductAdvancedPrice[]',
        'cost_price' => 'float',
        'quantity' => 'float',
        'inventory' => '\OpenAPI\Client\Model\ProductInventory[]',
        'group_items' => '\OpenAPI\Client\Model\ProductGroupItem[]',
        'u_brand_id' => 'string',
        'u_brand' => 'string',
        'categories_ids' => 'string[]',
        'stores_ids' => 'string[]',
        'url' => 'string',
        'seo_url' => 'string',
        'meta_title' => 'string',
        'meta_keywords' => 'string',
        'meta_description' => 'string',
        'avail_sale' => 'bool',
        'avail_view' => 'bool',
        'is_virtual' => 'bool',
        'is_downloadable' => 'bool',
        'weight' => 'float',
        'weight_unit' => 'string',
        'sort_order' => 'int',
        'in_stock' => 'bool',
        'on_sale' => 'bool',
        'backorders' => 'string',
        'manage_stock' => 'string',
        'is_stock_managed' => 'bool',
        'create_at' => '\OpenAPI\Client\Model\A2CDateTime',
        'modified_at' => '\OpenAPI\Client\Model\A2CDateTime',
        'tax_class_id' => 'string',
        'special_price' => '\OpenAPI\Client\Model\SpecialPrice',
        'tier_price' => '\OpenAPI\Client\Model\ProductTierPrice[]',
        'group_price' => '\OpenAPI\Client\Model\ProductGroupPrice[]',
        'images' => '\OpenAPI\Client\Model\Image[]',
        'product_options' => '\OpenAPI\Client\Model\ProductOption[]',
        'u_upc' => 'string',
        'u_mpn' => 'string',
        'u_gtin' => 'string',
        'u_isbn' => 'string',
        'u_ean' => 'string',
        'related_products_ids' => 'string[]',
        'up_sell_products_ids' => 'string[]',
        'cross_sell_products_ids' => 'string[]',
        'dimensions_unit' => 'string',
        'width' => 'float',
        'height' => 'float',
        'length' => 'float',
        'discounts' => '\OpenAPI\Client\Model\Discount[]',
        'additional_fields' => 'object',
        'custom_fields' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'u_model' => null,
        'u_sku' => null,
        'name' => null,
        'description' => null,
        'short_description' => null,
        'price' => null,
        'advanced_price' => null,
        'cost_price' => null,
        'quantity' => null,
        'inventory' => null,
        'group_items' => null,
        'u_brand_id' => null,
        'u_brand' => null,
        'categories_ids' => null,
        'stores_ids' => null,
        'url' => null,
        'seo_url' => null,
        'meta_title' => null,
        'meta_keywords' => null,
        'meta_description' => null,
        'avail_sale' => null,
        'avail_view' => null,
        'is_virtual' => null,
        'is_downloadable' => null,
        'weight' => null,
        'weight_unit' => null,
        'sort_order' => null,
        'in_stock' => null,
        'on_sale' => null,
        'backorders' => null,
        'manage_stock' => null,
        'is_stock_managed' => null,
        'create_at' => null,
        'modified_at' => null,
        'tax_class_id' => null,
        'special_price' => null,
        'tier_price' => null,
        'group_price' => null,
        'images' => null,
        'product_options' => null,
        'u_upc' => null,
        'u_mpn' => null,
        'u_gtin' => null,
        'u_isbn' => null,
        'u_ean' => null,
        'related_products_ids' => null,
        'up_sell_products_ids' => null,
        'cross_sell_products_ids' => null,
        'dimensions_unit' => null,
        'width' => null,
        'height' => null,
        'length' => null,
        'discounts' => null,
        'additional_fields' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => true,
        'u_model' => true,
        'u_sku' => true,
        'name' => true,
        'description' => true,
        'short_description' => true,
        'price' => true,
        'advanced_price' => false,
        'cost_price' => true,
        'quantity' => true,
        'inventory' => false,
        'group_items' => false,
        'u_brand_id' => true,
        'u_brand' => true,
        'categories_ids' => false,
        'stores_ids' => false,
        'url' => true,
        'seo_url' => true,
        'meta_title' => true,
        'meta_keywords' => true,
        'meta_description' => true,
        'avail_sale' => true,
        'avail_view' => true,
        'is_virtual' => true,
        'is_downloadable' => true,
        'weight' => true,
        'weight_unit' => true,
        'sort_order' => true,
        'in_stock' => true,
        'on_sale' => true,
        'backorders' => true,
        'manage_stock' => true,
        'is_stock_managed' => true,
        'create_at' => true,
        'modified_at' => true,
        'tax_class_id' => true,
        'special_price' => true,
        'tier_price' => false,
        'group_price' => false,
        'images' => false,
        'product_options' => false,
        'u_upc' => true,
        'u_mpn' => true,
        'u_gtin' => true,
        'u_isbn' => true,
        'u_ean' => true,
        'related_products_ids' => false,
        'up_sell_products_ids' => false,
        'cross_sell_products_ids' => false,
        'dimensions_unit' => true,
        'width' => true,
        'height' => true,
        'length' => true,
        'discounts' => false,
        'additional_fields' => true,
        'custom_fields' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'u_model' => 'u_model',
        'u_sku' => 'u_sku',
        'name' => 'name',
        'description' => 'description',
        'short_description' => 'short_description',
        'price' => 'price',
        'advanced_price' => 'advanced_price',
        'cost_price' => 'cost_price',
        'quantity' => 'quantity',
        'inventory' => 'inventory',
        'group_items' => 'group_items',
        'u_brand_id' => 'u_brand_id',
        'u_brand' => 'u_brand',
        'categories_ids' => 'categories_ids',
        'stores_ids' => 'stores_ids',
        'url' => 'url',
        'seo_url' => 'seo_url',
        'meta_title' => 'meta_title',
        'meta_keywords' => 'meta_keywords',
        'meta_description' => 'meta_description',
        'avail_sale' => 'avail_sale',
        'avail_view' => 'avail_view',
        'is_virtual' => 'is_virtual',
        'is_downloadable' => 'is_downloadable',
        'weight' => 'weight',
        'weight_unit' => 'weight_unit',
        'sort_order' => 'sort_order',
        'in_stock' => 'in_stock',
        'on_sale' => 'on_sale',
        'backorders' => 'backorders',
        'manage_stock' => 'manage_stock',
        'is_stock_managed' => 'is_stock_managed',
        'create_at' => 'create_at',
        'modified_at' => 'modified_at',
        'tax_class_id' => 'tax_class_id',
        'special_price' => 'special_price',
        'tier_price' => 'tier_price',
        'group_price' => 'group_price',
        'images' => 'images',
        'product_options' => 'product_options',
        'u_upc' => 'u_upc',
        'u_mpn' => 'u_mpn',
        'u_gtin' => 'u_gtin',
        'u_isbn' => 'u_isbn',
        'u_ean' => 'u_ean',
        'related_products_ids' => 'related_products_ids',
        'up_sell_products_ids' => 'up_sell_products_ids',
        'cross_sell_products_ids' => 'cross_sell_products_ids',
        'dimensions_unit' => 'dimensions_unit',
        'width' => 'width',
        'height' => 'height',
        'length' => 'length',
        'discounts' => 'discounts',
        'additional_fields' => 'additional_fields',
        'custom_fields' => 'custom_fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'u_model' => 'setUModel',
        'u_sku' => 'setUSku',
        'name' => 'setName',
        'description' => 'setDescription',
        'short_description' => 'setShortDescription',
        'price' => 'setPrice',
        'advanced_price' => 'setAdvancedPrice',
        'cost_price' => 'setCostPrice',
        'quantity' => 'setQuantity',
        'inventory' => 'setInventory',
        'group_items' => 'setGroupItems',
        'u_brand_id' => 'setUBrandId',
        'u_brand' => 'setUBrand',
        'categories_ids' => 'setCategoriesIds',
        'stores_ids' => 'setStoresIds',
        'url' => 'setUrl',
        'seo_url' => 'setSeoUrl',
        'meta_title' => 'setMetaTitle',
        'meta_keywords' => 'setMetaKeywords',
        'meta_description' => 'setMetaDescription',
        'avail_sale' => 'setAvailSale',
        'avail_view' => 'setAvailView',
        'is_virtual' => 'setIsVirtual',
        'is_downloadable' => 'setIsDownloadable',
        'weight' => 'setWeight',
        'weight_unit' => 'setWeightUnit',
        'sort_order' => 'setSortOrder',
        'in_stock' => 'setInStock',
        'on_sale' => 'setOnSale',
        'backorders' => 'setBackorders',
        'manage_stock' => 'setManageStock',
        'is_stock_managed' => 'setIsStockManaged',
        'create_at' => 'setCreateAt',
        'modified_at' => 'setModifiedAt',
        'tax_class_id' => 'setTaxClassId',
        'special_price' => 'setSpecialPrice',
        'tier_price' => 'setTierPrice',
        'group_price' => 'setGroupPrice',
        'images' => 'setImages',
        'product_options' => 'setProductOptions',
        'u_upc' => 'setUUpc',
        'u_mpn' => 'setUMpn',
        'u_gtin' => 'setUGtin',
        'u_isbn' => 'setUIsbn',
        'u_ean' => 'setUEan',
        'related_products_ids' => 'setRelatedProductsIds',
        'up_sell_products_ids' => 'setUpSellProductsIds',
        'cross_sell_products_ids' => 'setCrossSellProductsIds',
        'dimensions_unit' => 'setDimensionsUnit',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'length' => 'setLength',
        'discounts' => 'setDiscounts',
        'additional_fields' => 'setAdditionalFields',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'u_model' => 'getUModel',
        'u_sku' => 'getUSku',
        'name' => 'getName',
        'description' => 'getDescription',
        'short_description' => 'getShortDescription',
        'price' => 'getPrice',
        'advanced_price' => 'getAdvancedPrice',
        'cost_price' => 'getCostPrice',
        'quantity' => 'getQuantity',
        'inventory' => 'getInventory',
        'group_items' => 'getGroupItems',
        'u_brand_id' => 'getUBrandId',
        'u_brand' => 'getUBrand',
        'categories_ids' => 'getCategoriesIds',
        'stores_ids' => 'getStoresIds',
        'url' => 'getUrl',
        'seo_url' => 'getSeoUrl',
        'meta_title' => 'getMetaTitle',
        'meta_keywords' => 'getMetaKeywords',
        'meta_description' => 'getMetaDescription',
        'avail_sale' => 'getAvailSale',
        'avail_view' => 'getAvailView',
        'is_virtual' => 'getIsVirtual',
        'is_downloadable' => 'getIsDownloadable',
        'weight' => 'getWeight',
        'weight_unit' => 'getWeightUnit',
        'sort_order' => 'getSortOrder',
        'in_stock' => 'getInStock',
        'on_sale' => 'getOnSale',
        'backorders' => 'getBackorders',
        'manage_stock' => 'getManageStock',
        'is_stock_managed' => 'getIsStockManaged',
        'create_at' => 'getCreateAt',
        'modified_at' => 'getModifiedAt',
        'tax_class_id' => 'getTaxClassId',
        'special_price' => 'getSpecialPrice',
        'tier_price' => 'getTierPrice',
        'group_price' => 'getGroupPrice',
        'images' => 'getImages',
        'product_options' => 'getProductOptions',
        'u_upc' => 'getUUpc',
        'u_mpn' => 'getUMpn',
        'u_gtin' => 'getUGtin',
        'u_isbn' => 'getUIsbn',
        'u_ean' => 'getUEan',
        'related_products_ids' => 'getRelatedProductsIds',
        'up_sell_products_ids' => 'getUpSellProductsIds',
        'cross_sell_products_ids' => 'getCrossSellProductsIds',
        'dimensions_unit' => 'getDimensionsUnit',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'length' => 'getLength',
        'discounts' => 'getDiscounts',
        'additional_fields' => 'getAdditionalFields',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('u_model', $data ?? [], null);
        $this->setIfExists('u_sku', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('advanced_price', $data ?? [], null);
        $this->setIfExists('cost_price', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('inventory', $data ?? [], null);
        $this->setIfExists('group_items', $data ?? [], null);
        $this->setIfExists('u_brand_id', $data ?? [], null);
        $this->setIfExists('u_brand', $data ?? [], null);
        $this->setIfExists('categories_ids', $data ?? [], null);
        $this->setIfExists('stores_ids', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('seo_url', $data ?? [], null);
        $this->setIfExists('meta_title', $data ?? [], null);
        $this->setIfExists('meta_keywords', $data ?? [], null);
        $this->setIfExists('meta_description', $data ?? [], null);
        $this->setIfExists('avail_sale', $data ?? [], null);
        $this->setIfExists('avail_view', $data ?? [], null);
        $this->setIfExists('is_virtual', $data ?? [], null);
        $this->setIfExists('is_downloadable', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('sort_order', $data ?? [], null);
        $this->setIfExists('in_stock', $data ?? [], null);
        $this->setIfExists('on_sale', $data ?? [], null);
        $this->setIfExists('backorders', $data ?? [], null);
        $this->setIfExists('manage_stock', $data ?? [], null);
        $this->setIfExists('is_stock_managed', $data ?? [], null);
        $this->setIfExists('create_at', $data ?? [], null);
        $this->setIfExists('modified_at', $data ?? [], null);
        $this->setIfExists('tax_class_id', $data ?? [], null);
        $this->setIfExists('special_price', $data ?? [], null);
        $this->setIfExists('tier_price', $data ?? [], null);
        $this->setIfExists('group_price', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('product_options', $data ?? [], null);
        $this->setIfExists('u_upc', $data ?? [], null);
        $this->setIfExists('u_mpn', $data ?? [], null);
        $this->setIfExists('u_gtin', $data ?? [], null);
        $this->setIfExists('u_isbn', $data ?? [], null);
        $this->setIfExists('u_ean', $data ?? [], null);
        $this->setIfExists('related_products_ids', $data ?? [], null);
        $this->setIfExists('up_sell_products_ids', $data ?? [], null);
        $this->setIfExists('cross_sell_products_ids', $data ?? [], null);
        $this->setIfExists('dimensions_unit', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('discounts', $data ?? [], null);
        $this->setIfExists('additional_fields', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets u_model
     *
     * @return string|null
     */
    public function getUModel()
    {
        return $this->container['u_model'];
    }

    /**
     * Sets u_model
     *
     * @param string|null $u_model u_model
     *
     * @return self
     */
    public function setUModel($u_model)
    {
        if (is_null($u_model)) {
            array_push($this->openAPINullablesSetToNull, 'u_model');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('u_model', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['u_model'] = $u_model;

        return $this;
    }

    /**
     * Gets u_sku
     *
     * @return string|null
     */
    public function getUSku()
    {
        return $this->container['u_sku'];
    }

    /**
     * Sets u_sku
     *
     * @param string|null $u_sku u_sku
     *
     * @return self
     */
    public function setUSku($u_sku)
    {
        if (is_null($u_sku)) {
            array_push($this->openAPINullablesSetToNull, 'u_sku');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('u_sku', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['u_sku'] = $u_sku;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description short_description
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if (is_null($short_description)) {
            array_push($this->openAPINullablesSetToNull, 'short_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets advanced_price
     *
     * @return \OpenAPI\Client\Model\ProductAdvancedPrice[]|null
     */
    public function getAdvancedPrice()
    {
        return $this->container['advanced_price'];
    }

    /**
     * Sets advanced_price
     *
     * @param \OpenAPI\Client\Model\ProductAdvancedPrice[]|null $advanced_price advanced_price
     *
     * @return self
     */
    public function setAdvancedPrice($advanced_price)
    {
        if (is_null($advanced_price)) {
            throw new \InvalidArgumentException('non-nullable advanced_price cannot be null');
        }
        $this->container['advanced_price'] = $advanced_price;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return float|null
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param float|null $cost_price cost_price
     *
     * @return self
     */
    public function setCostPrice($cost_price)
    {
        if (is_null($cost_price)) {
            array_push($this->openAPINullablesSetToNull, 'cost_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            array_push($this->openAPINullablesSetToNull, 'quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return \OpenAPI\Client\Model\ProductInventory[]|null
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param \OpenAPI\Client\Model\ProductInventory[]|null $inventory inventory
     *
     * @return self
     */
    public function setInventory($inventory)
    {
        if (is_null($inventory)) {
            throw new \InvalidArgumentException('non-nullable inventory cannot be null');
        }
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets group_items
     *
     * @return \OpenAPI\Client\Model\ProductGroupItem[]|null
     */
    public function getGroupItems()
    {
        return $this->container['group_items'];
    }

    /**
     * Sets group_items
     *
     * @param \OpenAPI\Client\Model\ProductGroupItem[]|null $group_items group_items
     *
     * @return self
     */
    public function setGroupItems($group_items)
    {
        if (is_null($group_items)) {
            throw new \InvalidArgumentException('non-nullable group_items cannot be null');
        }
        $this->container['group_items'] = $group_items;

        return $this;
    }

    /**
     * Gets u_brand_id
     *
     * @return string|null
     */
    public function getUBrandId()
    {
        return $this->container['u_brand_id'];
    }

    /**
     * Sets u_brand_id
     *
     * @param string|null $u_brand_id u_brand_id
     *
     * @return self
     */
    public function setUBrandId($u_brand_id)
    {
        if (is_null($u_brand_id)) {
            array_push($this->openAPINullablesSetToNull, 'u_brand_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('u_brand_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['u_brand_id'] = $u_brand_id;

        return $this;
    }

    /**
     * Gets u_brand
     *
     * @return string|null
     */
    public function getUBrand()
    {
        return $this->container['u_brand'];
    }

    /**
     * Sets u_brand
     *
     * @param string|null $u_brand u_brand
     *
     * @return self
     */
    public function setUBrand($u_brand)
    {
        if (is_null($u_brand)) {
            array_push($this->openAPINullablesSetToNull, 'u_brand');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('u_brand', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['u_brand'] = $u_brand;

        return $this;
    }

    /**
     * Gets categories_ids
     *
     * @return string[]|null
     */
    public function getCategoriesIds()
    {
        return $this->container['categories_ids'];
    }

    /**
     * Sets categories_ids
     *
     * @param string[]|null $categories_ids categories_ids
     *
     * @return self
     */
    public function setCategoriesIds($categories_ids)
    {
        if (is_null($categories_ids)) {
            throw new \InvalidArgumentException('non-nullable categories_ids cannot be null');
        }
        $this->container['categories_ids'] = $categories_ids;

        return $this;
    }

    /**
     * Gets stores_ids
     *
     * @return string[]|null
     */
    public function getStoresIds()
    {
        return $this->container['stores_ids'];
    }

    /**
     * Sets stores_ids
     *
     * @param string[]|null $stores_ids stores_ids
     *
     * @return self
     */
    public function setStoresIds($stores_ids)
    {
        if (is_null($stores_ids)) {
            throw new \InvalidArgumentException('non-nullable stores_ids cannot be null');
        }
        $this->container['stores_ids'] = $stores_ids;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets seo_url
     *
     * @return string|null
     */
    public function getSeoUrl()
    {
        return $this->container['seo_url'];
    }

    /**
     * Sets seo_url
     *
     * @param string|null $seo_url seo_url
     *
     * @return self
     */
    public function setSeoUrl($seo_url)
    {
        if (is_null($seo_url)) {
            array_push($this->openAPINullablesSetToNull, 'seo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['seo_url'] = $seo_url;

        return $this;
    }

    /**
     * Gets meta_title
     *
     * @return string|null
     */
    public function getMetaTitle()
    {
        return $this->container['meta_title'];
    }

    /**
     * Sets meta_title
     *
     * @param string|null $meta_title meta_title
     *
     * @return self
     */
    public function setMetaTitle($meta_title)
    {
        if (is_null($meta_title)) {
            array_push($this->openAPINullablesSetToNull, 'meta_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meta_title'] = $meta_title;

        return $this;
    }

    /**
     * Gets meta_keywords
     *
     * @return string|null
     */
    public function getMetaKeywords()
    {
        return $this->container['meta_keywords'];
    }

    /**
     * Sets meta_keywords
     *
     * @param string|null $meta_keywords meta_keywords
     *
     * @return self
     */
    public function setMetaKeywords($meta_keywords)
    {
        if (is_null($meta_keywords)) {
            array_push($this->openAPINullablesSetToNull, 'meta_keywords');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_keywords', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meta_keywords'] = $meta_keywords;

        return $this;
    }

    /**
     * Gets meta_description
     *
     * @return string|null
     */
    public function getMetaDescription()
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     *
     * @param string|null $meta_description meta_description
     *
     * @return self
     */
    public function setMetaDescription($meta_description)
    {
        if (is_null($meta_description)) {
            array_push($this->openAPINullablesSetToNull, 'meta_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets avail_sale
     *
     * @return bool|null
     */
    public function getAvailSale()
    {
        return $this->container['avail_sale'];
    }

    /**
     * Sets avail_sale
     *
     * @param bool|null $avail_sale avail_sale
     *
     * @return self
     */
    public function setAvailSale($avail_sale)
    {
        if (is_null($avail_sale)) {
            array_push($this->openAPINullablesSetToNull, 'avail_sale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avail_sale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avail_sale'] = $avail_sale;

        return $this;
    }

    /**
     * Gets avail_view
     *
     * @return bool|null
     */
    public function getAvailView()
    {
        return $this->container['avail_view'];
    }

    /**
     * Sets avail_view
     *
     * @param bool|null $avail_view avail_view
     *
     * @return self
     */
    public function setAvailView($avail_view)
    {
        if (is_null($avail_view)) {
            array_push($this->openAPINullablesSetToNull, 'avail_view');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avail_view', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avail_view'] = $avail_view;

        return $this;
    }

    /**
     * Gets is_virtual
     *
     * @return bool|null
     */
    public function getIsVirtual()
    {
        return $this->container['is_virtual'];
    }

    /**
     * Sets is_virtual
     *
     * @param bool|null $is_virtual is_virtual
     *
     * @return self
     */
    public function setIsVirtual($is_virtual)
    {
        if (is_null($is_virtual)) {
            array_push($this->openAPINullablesSetToNull, 'is_virtual');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_virtual', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_virtual'] = $is_virtual;

        return $this;
    }

    /**
     * Gets is_downloadable
     *
     * @return bool|null
     */
    public function getIsDownloadable()
    {
        return $this->container['is_downloadable'];
    }

    /**
     * Sets is_downloadable
     *
     * @param bool|null $is_downloadable is_downloadable
     *
     * @return self
     */
    public function setIsDownloadable($is_downloadable)
    {
        if (is_null($is_downloadable)) {
            array_push($this->openAPINullablesSetToNull, 'is_downloadable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_downloadable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_downloadable'] = $is_downloadable;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            array_push($this->openAPINullablesSetToNull, 'weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string|null $weight_unit weight_unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            array_push($this->openAPINullablesSetToNull, 'weight_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int|null $sort_order sort_order
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        if (is_null($sort_order)) {
            array_push($this->openAPINullablesSetToNull, 'sort_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets in_stock
     *
     * @return bool|null
     */
    public function getInStock()
    {
        return $this->container['in_stock'];
    }

    /**
     * Sets in_stock
     *
     * @param bool|null $in_stock in_stock
     *
     * @return self
     */
    public function setInStock($in_stock)
    {
        if (is_null($in_stock)) {
            array_push($this->openAPINullablesSetToNull, 'in_stock');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('in_stock', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['in_stock'] = $in_stock;

        return $this;
    }

    /**
     * Gets on_sale
     *
     * @return bool|null
     */
    public function getOnSale()
    {
        return $this->container['on_sale'];
    }

    /**
     * Sets on_sale
     *
     * @param bool|null $on_sale on_sale
     *
     * @return self
     */
    public function setOnSale($on_sale)
    {
        if (is_null($on_sale)) {
            array_push($this->openAPINullablesSetToNull, 'on_sale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('on_sale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['on_sale'] = $on_sale;

        return $this;
    }

    /**
     * Gets backorders
     *
     * @return string|null
     */
    public function getBackorders()
    {
        return $this->container['backorders'];
    }

    /**
     * Sets backorders
     *
     * @param string|null $backorders backorders
     *
     * @return self
     */
    public function setBackorders($backorders)
    {
        if (is_null($backorders)) {
            array_push($this->openAPINullablesSetToNull, 'backorders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backorders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backorders'] = $backorders;

        return $this;
    }

    /**
     * Gets manage_stock
     *
     * @return string|null
     */
    public function getManageStock()
    {
        return $this->container['manage_stock'];
    }

    /**
     * Sets manage_stock
     *
     * @param string|null $manage_stock manage_stock
     *
     * @return self
     */
    public function setManageStock($manage_stock)
    {
        if (is_null($manage_stock)) {
            array_push($this->openAPINullablesSetToNull, 'manage_stock');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manage_stock', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manage_stock'] = $manage_stock;

        return $this;
    }

    /**
     * Gets is_stock_managed
     *
     * @return bool|null
     */
    public function getIsStockManaged()
    {
        return $this->container['is_stock_managed'];
    }

    /**
     * Sets is_stock_managed
     *
     * @param bool|null $is_stock_managed is_stock_managed
     *
     * @return self
     */
    public function setIsStockManaged($is_stock_managed)
    {
        if (is_null($is_stock_managed)) {
            array_push($this->openAPINullablesSetToNull, 'is_stock_managed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_stock_managed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_stock_managed'] = $is_stock_managed;

        return $this;
    }

    /**
     * Gets create_at
     *
     * @return \OpenAPI\Client\Model\A2CDateTime|null
     */
    public function getCreateAt()
    {
        return $this->container['create_at'];
    }

    /**
     * Sets create_at
     *
     * @param \OpenAPI\Client\Model\A2CDateTime|null $create_at create_at
     *
     * @return self
     */
    public function setCreateAt($create_at)
    {
        if (is_null($create_at)) {
            array_push($this->openAPINullablesSetToNull, 'create_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('create_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['create_at'] = $create_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return \OpenAPI\Client\Model\A2CDateTime|null
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param \OpenAPI\Client\Model\A2CDateTime|null $modified_at modified_at
     *
     * @return self
     */
    public function setModifiedAt($modified_at)
    {
        if (is_null($modified_at)) {
            array_push($this->openAPINullablesSetToNull, 'modified_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets tax_class_id
     *
     * @return string|null
     */
    public function getTaxClassId()
    {
        return $this->container['tax_class_id'];
    }

    /**
     * Sets tax_class_id
     *
     * @param string|null $tax_class_id tax_class_id
     *
     * @return self
     */
    public function setTaxClassId($tax_class_id)
    {
        if (is_null($tax_class_id)) {
            array_push($this->openAPINullablesSetToNull, 'tax_class_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_class_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_class_id'] = $tax_class_id;

        return $this;
    }

    /**
     * Gets special_price
     *
     * @return \OpenAPI\Client\Model\SpecialPrice|null
     */
    public function getSpecialPrice()
    {
        return $this->container['special_price'];
    }

    /**
     * Sets special_price
     *
     * @param \OpenAPI\Client\Model\SpecialPrice|null $special_price special_price
     *
     * @return self
     */
    public function setSpecialPrice($special_price)
    {
        if (is_null($special_price)) {
            array_push($this->openAPINullablesSetToNull, 'special_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('special_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['special_price'] = $special_price;

        return $this;
    }

    /**
     * Gets tier_price
     *
     * @return \OpenAPI\Client\Model\ProductTierPrice[]|null
     */
    public function getTierPrice()
    {
        return $this->container['tier_price'];
    }

    /**
     * Sets tier_price
     *
     * @param \OpenAPI\Client\Model\ProductTierPrice[]|null $tier_price tier_price
     *
     * @return self
     */
    public function setTierPrice($tier_price)
    {
        if (is_null($tier_price)) {
            throw new \InvalidArgumentException('non-nullable tier_price cannot be null');
        }
        $this->container['tier_price'] = $tier_price;

        return $this;
    }

    /**
     * Gets group_price
     *
     * @return \OpenAPI\Client\Model\ProductGroupPrice[]|null
     */
    public function getGroupPrice()
    {
        return $this->container['group_price'];
    }

    /**
     * Sets group_price
     *
     * @param \OpenAPI\Client\Model\ProductGroupPrice[]|null $group_price group_price
     *
     * @return self
     */
    public function setGroupPrice($group_price)
    {
        if (is_null($group_price)) {
            throw new \InvalidArgumentException('non-nullable group_price cannot be null');
        }
        $this->container['group_price'] = $group_price;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \OpenAPI\Client\Model\Image[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \OpenAPI\Client\Model\Image[]|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets product_options
     *
     * @return \OpenAPI\Client\Model\ProductOption[]|null
     */
    public function getProductOptions()
    {
        return $this->container['product_options'];
    }

    /**
     * Sets product_options
     *
     * @param \OpenAPI\Client\Model\ProductOption[]|null $product_options product_options
     *
     * @return self
     */
    public function setProductOptions($product_options)
    {
        if (is_null($product_options)) {
            throw new \InvalidArgumentException('non-nullable product_options cannot be null');
        }
        $this->container['product_options'] = $product_options;

        return $this;
    }

    /**
     * Gets u_upc
     *
     * @return string|null
     */
    public function getUUpc()
    {
        return $this->container['u_upc'];
    }

    /**
     * Sets u_upc
     *
     * @param string|null $u_upc u_upc
     *
     * @return self
     */
    public function setUUpc($u_upc)
    {
        if (is_null($u_upc)) {
            array_push($this->openAPINullablesSetToNull, 'u_upc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('u_upc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['u_upc'] = $u_upc;

        return $this;
    }

    /**
     * Gets u_mpn
     *
     * @return string|null
     */
    public function getUMpn()
    {
        return $this->container['u_mpn'];
    }

    /**
     * Sets u_mpn
     *
     * @param string|null $u_mpn u_mpn
     *
     * @return self
     */
    public function setUMpn($u_mpn)
    {
        if (is_null($u_mpn)) {
            array_push($this->openAPINullablesSetToNull, 'u_mpn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('u_mpn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['u_mpn'] = $u_mpn;

        return $this;
    }

    /**
     * Gets u_gtin
     *
     * @return string|null
     */
    public function getUGtin()
    {
        return $this->container['u_gtin'];
    }

    /**
     * Sets u_gtin
     *
     * @param string|null $u_gtin u_gtin
     *
     * @return self
     */
    public function setUGtin($u_gtin)
    {
        if (is_null($u_gtin)) {
            array_push($this->openAPINullablesSetToNull, 'u_gtin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('u_gtin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['u_gtin'] = $u_gtin;

        return $this;
    }

    /**
     * Gets u_isbn
     *
     * @return string|null
     */
    public function getUIsbn()
    {
        return $this->container['u_isbn'];
    }

    /**
     * Sets u_isbn
     *
     * @param string|null $u_isbn u_isbn
     *
     * @return self
     */
    public function setUIsbn($u_isbn)
    {
        if (is_null($u_isbn)) {
            array_push($this->openAPINullablesSetToNull, 'u_isbn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('u_isbn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['u_isbn'] = $u_isbn;

        return $this;
    }

    /**
     * Gets u_ean
     *
     * @return string|null
     */
    public function getUEan()
    {
        return $this->container['u_ean'];
    }

    /**
     * Sets u_ean
     *
     * @param string|null $u_ean u_ean
     *
     * @return self
     */
    public function setUEan($u_ean)
    {
        if (is_null($u_ean)) {
            array_push($this->openAPINullablesSetToNull, 'u_ean');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('u_ean', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['u_ean'] = $u_ean;

        return $this;
    }

    /**
     * Gets related_products_ids
     *
     * @return string[]|null
     */
    public function getRelatedProductsIds()
    {
        return $this->container['related_products_ids'];
    }

    /**
     * Sets related_products_ids
     *
     * @param string[]|null $related_products_ids related_products_ids
     *
     * @return self
     */
    public function setRelatedProductsIds($related_products_ids)
    {
        if (is_null($related_products_ids)) {
            throw new \InvalidArgumentException('non-nullable related_products_ids cannot be null');
        }
        $this->container['related_products_ids'] = $related_products_ids;

        return $this;
    }

    /**
     * Gets up_sell_products_ids
     *
     * @return string[]|null
     */
    public function getUpSellProductsIds()
    {
        return $this->container['up_sell_products_ids'];
    }

    /**
     * Sets up_sell_products_ids
     *
     * @param string[]|null $up_sell_products_ids up_sell_products_ids
     *
     * @return self
     */
    public function setUpSellProductsIds($up_sell_products_ids)
    {
        if (is_null($up_sell_products_ids)) {
            throw new \InvalidArgumentException('non-nullable up_sell_products_ids cannot be null');
        }
        $this->container['up_sell_products_ids'] = $up_sell_products_ids;

        return $this;
    }

    /**
     * Gets cross_sell_products_ids
     *
     * @return string[]|null
     */
    public function getCrossSellProductsIds()
    {
        return $this->container['cross_sell_products_ids'];
    }

    /**
     * Sets cross_sell_products_ids
     *
     * @param string[]|null $cross_sell_products_ids cross_sell_products_ids
     *
     * @return self
     */
    public function setCrossSellProductsIds($cross_sell_products_ids)
    {
        if (is_null($cross_sell_products_ids)) {
            throw new \InvalidArgumentException('non-nullable cross_sell_products_ids cannot be null');
        }
        $this->container['cross_sell_products_ids'] = $cross_sell_products_ids;

        return $this;
    }

    /**
     * Gets dimensions_unit
     *
     * @return string|null
     */
    public function getDimensionsUnit()
    {
        return $this->container['dimensions_unit'];
    }

    /**
     * Sets dimensions_unit
     *
     * @param string|null $dimensions_unit dimensions_unit
     *
     * @return self
     */
    public function setDimensionsUnit($dimensions_unit)
    {
        if (is_null($dimensions_unit)) {
            array_push($this->openAPINullablesSetToNull, 'dimensions_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dimensions_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dimensions_unit'] = $dimensions_unit;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            array_push($this->openAPINullablesSetToNull, 'width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            array_push($this->openAPINullablesSetToNull, 'height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float|null $length length
     *
     * @return self
     */
    public function setLength($length)
    {
        if (is_null($length)) {
            array_push($this->openAPINullablesSetToNull, 'length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('length', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \OpenAPI\Client\Model\Discount[]|null
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \OpenAPI\Client\Model\Discount[]|null $discounts discounts
     *
     * @return self
     */
    public function setDiscounts($discounts)
    {
        if (is_null($discounts)) {
            throw new \InvalidArgumentException('non-nullable discounts cannot be null');
        }
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets additional_fields
     *
     * @return object|null
     */
    public function getAdditionalFields()
    {
        return $this->container['additional_fields'];
    }

    /**
     * Sets additional_fields
     *
     * @param object|null $additional_fields additional_fields
     *
     * @return self
     */
    public function setAdditionalFields($additional_fields)
    {
        if (is_null($additional_fields)) {
            array_push($this->openAPINullablesSetToNull, 'additional_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_fields'] = $additional_fields;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            array_push($this->openAPINullablesSetToNull, 'custom_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


