<?php
/**
 * CartCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CartCreate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CartCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CartCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cart_id' => 'string',
        'store_url' => 'string',
        'bridge_url' => 'string',
        'store_root' => 'string',
        'store_key' => 'string',
        'shared_secret' => 'string',
        'validate_version' => 'bool',
        'verify' => 'bool',
        'db_tables_prefix' => 'string',
        'user_agent' => 'string',
        'ftp_host' => 'string',
        'ftp_user' => 'string',
        'ftp_password' => 'string',
        'ftp_port' => 'int',
        'ftp_store_dir' => 'string',
        'api_key_3dcart' => 'string',
        'admin_account' => 'string',
        'api_path' => 'string',
        'api_key_bigcommerce' => 'string',
        'client_id' => 'string',
        'access_token' => 'string',
        'context' => 'string',
        'access_token' => 'string',
        'api_key_shopify' => 'string',
        'api_password' => 'string',
        'access_token_shopify' => 'string',
        'api_key' => 'string',
        'api_username' => 'string',
        'encrypted_password' => 'string',
        'login' => 'string',
        'api_user_adnsf' => 'string',
        'api_pass' => 'string',
        'private_key' => 'string',
        'app_token' => 'string',
        'etsy_keystring' => 'string',
        'etsy_shared_secret' => 'string',
        'token_secret' => 'string',
        'etsy_client_id' => 'string',
        'etsy_refresh_token' => 'string',
        'ebay_client_id' => 'string',
        'ebay_client_secret' => 'string',
        'ebay_runame' => 'string',
        'ebay_access_token' => 'string',
        'ebay_refresh_token' => 'string',
        'ebay_environment' => 'string',
        'ebay_site_id' => 'int',
        'dw_client_id' => 'string',
        'dw_api_pass' => 'string',
        'demandware_user_name' => 'string',
        'demandware_user_password' => 'string',
        'store_id' => 'string',
        'seller_id' => 'string',
        'environment' => 'string',
        'hybris_client_id' => 'string',
        'hybris_client_secret' => 'string',
        'hybris_username' => 'string',
        'hybris_password' => 'string',
        'hybris_websites' => '\OpenAPI\Client\Model\AccountCartAddHybrisWebsitesInner[]',
        'walmart_client_id' => 'string',
        'walmart_client_secret' => 'string',
        'walmart_environment' => 'string',
        'walmart_channel_type' => 'string',
        'walmart_region' => 'string',
        'lightspeed_api_key' => 'string',
        'lightspeed_api_secret' => 'string',
        'shoplazza_access_token' => 'string',
        'shoplazza_shared_secret' => 'string',
        'shopware_access_key' => 'string',
        'shopware_api_key' => 'string',
        'shopware_api_secret' => 'string',
        'commercehq_api_key' => 'string',
        'commercehq_api_password' => 'string',
        '_3dcart_private_key' => 'string',
        '_3dcart_access_token' => 'string',
        'wc_consumer_key' => 'string',
        'wc_consumer_secret' => 'string',
        'magento_consumer_key' => 'string',
        'magento_consumer_secret' => 'string',
        'magento_access_token' => 'string',
        'magento_token_secret' => 'string',
        'prestashop_webservice_key' => 'string',
        'wix_app_id' => 'string',
        'wix_app_secret_key' => 'string',
        'wix_instance_id' => 'string',
        'wix_refresh_token' => 'string',
        'mercado_libre_app_id' => 'string',
        'mercado_libre_app_secret_key' => 'string',
        'mercado_libre_refresh_token' => 'string',
        'zid_client_id' => 'int',
        'zid_client_secret' => 'string',
        'zid_access_token' => 'string',
        'zid_authorization' => 'string',
        'zid_refresh_token' => 'string',
        'flipkart_client_id' => 'string',
        'flipkart_client_secret' => 'string',
        'allegro_client_id' => 'string',
        'allegro_client_secret' => 'string',
        'allegro_access_token' => 'string',
        'allegro_refresh_token' => 'string',
        'allegro_environment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cart_id' => null,
        'store_url' => null,
        'bridge_url' => null,
        'store_root' => null,
        'store_key' => null,
        'shared_secret' => null,
        'validate_version' => null,
        'verify' => null,
        'db_tables_prefix' => null,
        'user_agent' => null,
        'ftp_host' => null,
        'ftp_user' => null,
        'ftp_password' => null,
        'ftp_port' => null,
        'ftp_store_dir' => null,
        'api_key_3dcart' => null,
        'admin_account' => null,
        'api_path' => null,
        'api_key_bigcommerce' => null,
        'client_id' => null,
        'access_token' => null,
        'context' => null,
        'access_token' => null,
        'api_key_shopify' => null,
        'api_password' => null,
        'access_token_shopify' => null,
        'api_key' => null,
        'api_username' => null,
        'encrypted_password' => null,
        'login' => null,
        'api_user_adnsf' => null,
        'api_pass' => null,
        'private_key' => null,
        'app_token' => null,
        'etsy_keystring' => null,
        'etsy_shared_secret' => null,
        'token_secret' => null,
        'etsy_client_id' => null,
        'etsy_refresh_token' => null,
        'ebay_client_id' => null,
        'ebay_client_secret' => null,
        'ebay_runame' => null,
        'ebay_access_token' => null,
        'ebay_refresh_token' => null,
        'ebay_environment' => null,
        'ebay_site_id' => null,
        'dw_client_id' => null,
        'dw_api_pass' => null,
        'demandware_user_name' => null,
        'demandware_user_password' => null,
        'store_id' => null,
        'seller_id' => null,
        'environment' => null,
        'hybris_client_id' => null,
        'hybris_client_secret' => null,
        'hybris_username' => null,
        'hybris_password' => null,
        'hybris_websites' => null,
        'walmart_client_id' => null,
        'walmart_client_secret' => null,
        'walmart_environment' => null,
        'walmart_channel_type' => null,
        'walmart_region' => null,
        'lightspeed_api_key' => null,
        'lightspeed_api_secret' => null,
        'shoplazza_access_token' => null,
        'shoplazza_shared_secret' => null,
        'shopware_access_key' => null,
        'shopware_api_key' => null,
        'shopware_api_secret' => null,
        'commercehq_api_key' => null,
        'commercehq_api_password' => null,
        '_3dcart_private_key' => null,
        '_3dcart_access_token' => null,
        'wc_consumer_key' => null,
        'wc_consumer_secret' => null,
        'magento_consumer_key' => null,
        'magento_consumer_secret' => null,
        'magento_access_token' => null,
        'magento_token_secret' => null,
        'prestashop_webservice_key' => null,
        'wix_app_id' => null,
        'wix_app_secret_key' => null,
        'wix_instance_id' => null,
        'wix_refresh_token' => null,
        'mercado_libre_app_id' => null,
        'mercado_libre_app_secret_key' => null,
        'mercado_libre_refresh_token' => null,
        'zid_client_id' => null,
        'zid_client_secret' => null,
        'zid_access_token' => null,
        'zid_authorization' => null,
        'zid_refresh_token' => null,
        'flipkart_client_id' => null,
        'flipkart_client_secret' => null,
        'allegro_client_id' => null,
        'allegro_client_secret' => null,
        'allegro_access_token' => null,
        'allegro_refresh_token' => null,
        'allegro_environment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cart_id' => false,
        'store_url' => false,
        'bridge_url' => false,
        'store_root' => false,
        'store_key' => false,
        'shared_secret' => false,
        'validate_version' => false,
        'verify' => false,
        'db_tables_prefix' => false,
        'user_agent' => false,
        'ftp_host' => false,
        'ftp_user' => false,
        'ftp_password' => false,
        'ftp_port' => false,
        'ftp_store_dir' => false,
        'api_key_3dcart' => false,
        'admin_account' => false,
        'api_path' => false,
        'api_key_bigcommerce' => false,
        'client_id' => false,
        'access_token' => false,
        'context' => false,
        'access_token' => false,
        'api_key_shopify' => false,
        'api_password' => false,
        'access_token_shopify' => false,
        'api_key' => false,
        'api_username' => false,
        'encrypted_password' => false,
        'login' => false,
        'api_user_adnsf' => false,
        'api_pass' => false,
        'private_key' => false,
        'app_token' => false,
        'etsy_keystring' => false,
        'etsy_shared_secret' => false,
        'token_secret' => false,
        'etsy_client_id' => false,
        'etsy_refresh_token' => false,
        'ebay_client_id' => false,
        'ebay_client_secret' => false,
        'ebay_runame' => false,
        'ebay_access_token' => false,
        'ebay_refresh_token' => false,
        'ebay_environment' => false,
        'ebay_site_id' => false,
        'dw_client_id' => false,
        'dw_api_pass' => false,
        'demandware_user_name' => false,
        'demandware_user_password' => false,
        'store_id' => false,
        'seller_id' => false,
        'environment' => false,
        'hybris_client_id' => false,
        'hybris_client_secret' => false,
        'hybris_username' => false,
        'hybris_password' => false,
        'hybris_websites' => false,
        'walmart_client_id' => false,
        'walmart_client_secret' => false,
        'walmart_environment' => false,
        'walmart_channel_type' => false,
        'walmart_region' => false,
        'lightspeed_api_key' => false,
        'lightspeed_api_secret' => false,
        'shoplazza_access_token' => false,
        'shoplazza_shared_secret' => false,
        'shopware_access_key' => false,
        'shopware_api_key' => false,
        'shopware_api_secret' => false,
        'commercehq_api_key' => false,
        'commercehq_api_password' => false,
        '_3dcart_private_key' => false,
        '_3dcart_access_token' => false,
        'wc_consumer_key' => false,
        'wc_consumer_secret' => false,
        'magento_consumer_key' => false,
        'magento_consumer_secret' => false,
        'magento_access_token' => false,
        'magento_token_secret' => false,
        'prestashop_webservice_key' => false,
        'wix_app_id' => false,
        'wix_app_secret_key' => false,
        'wix_instance_id' => false,
        'wix_refresh_token' => false,
        'mercado_libre_app_id' => false,
        'mercado_libre_app_secret_key' => false,
        'mercado_libre_refresh_token' => false,
        'zid_client_id' => false,
        'zid_client_secret' => false,
        'zid_access_token' => false,
        'zid_authorization' => false,
        'zid_refresh_token' => false,
        'flipkart_client_id' => false,
        'flipkart_client_secret' => false,
        'allegro_client_id' => false,
        'allegro_client_secret' => false,
        'allegro_access_token' => false,
        'allegro_refresh_token' => false,
        'allegro_environment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cart_id' => 'cart_id',
        'store_url' => 'store_url',
        'bridge_url' => 'bridge_url',
        'store_root' => 'store_root',
        'store_key' => 'store_key',
        'shared_secret' => 'shared_secret',
        'validate_version' => 'validate_version',
        'verify' => 'verify',
        'db_tables_prefix' => 'db_tables_prefix',
        'user_agent' => 'user_agent',
        'ftp_host' => 'ftp_host',
        'ftp_user' => 'ftp_user',
        'ftp_password' => 'ftp_password',
        'ftp_port' => 'ftp_port',
        'ftp_store_dir' => 'ftp_store_dir',
        'api_key_3dcart' => 'apiKey_3dcart',
        'admin_account' => 'AdminAccount',
        'api_path' => 'ApiPath',
        'api_key_bigcommerce' => 'ApiKey_Bigcommerce',
        'client_id' => 'client_id',
        'access_token' => 'accessToken',
        'context' => 'context',
        'access_token' => 'access_token',
        'api_key_shopify' => 'apiKey_shopify',
        'api_password' => 'apiPassword',
        'access_token_shopify' => 'accessToken_shopify',
        'api_key' => 'apiKey',
        'api_username' => 'apiUsername',
        'encrypted_password' => 'EncryptedPassword',
        'login' => 'Login',
        'api_user_adnsf' => 'apiUser_adnsf',
        'api_pass' => 'apiPass',
        'private_key' => 'privateKey',
        'app_token' => 'appToken',
        'etsy_keystring' => 'etsy_keystring',
        'etsy_shared_secret' => 'etsy_shared_secret',
        'token_secret' => 'tokenSecret',
        'etsy_client_id' => 'etsy_client_id',
        'etsy_refresh_token' => 'etsy_refresh_token',
        'ebay_client_id' => 'ebay_client_id',
        'ebay_client_secret' => 'ebay_client_secret',
        'ebay_runame' => 'ebay_runame',
        'ebay_access_token' => 'ebay_access_token',
        'ebay_refresh_token' => 'ebay_refresh_token',
        'ebay_environment' => 'ebay_environment',
        'ebay_site_id' => 'ebay_site_id',
        'dw_client_id' => 'dw_client_id',
        'dw_api_pass' => 'dw_api_pass',
        'demandware_user_name' => 'demandware_user_name',
        'demandware_user_password' => 'demandware_user_password',
        'store_id' => 'store_id',
        'seller_id' => 'seller_id',
        'environment' => 'environment',
        'hybris_client_id' => 'hybris_client_id',
        'hybris_client_secret' => 'hybris_client_secret',
        'hybris_username' => 'hybris_username',
        'hybris_password' => 'hybris_password',
        'hybris_websites' => 'hybris_websites',
        'walmart_client_id' => 'walmart_client_id',
        'walmart_client_secret' => 'walmart_client_secret',
        'walmart_environment' => 'walmart_environment',
        'walmart_channel_type' => 'walmart_channel_type',
        'walmart_region' => 'walmart_region',
        'lightspeed_api_key' => 'lightspeed_api_key',
        'lightspeed_api_secret' => 'lightspeed_api_secret',
        'shoplazza_access_token' => 'shoplazza_access_token',
        'shoplazza_shared_secret' => 'shoplazza_shared_secret',
        'shopware_access_key' => 'shopware_access_key',
        'shopware_api_key' => 'shopware_api_key',
        'shopware_api_secret' => 'shopware_api_secret',
        'commercehq_api_key' => 'commercehq_api_key',
        'commercehq_api_password' => 'commercehq_api_password',
        '_3dcart_private_key' => '3dcart_private_key',
        '_3dcart_access_token' => '3dcart_access_token',
        'wc_consumer_key' => 'wc_consumer_key',
        'wc_consumer_secret' => 'wc_consumer_secret',
        'magento_consumer_key' => 'magento_consumer_key',
        'magento_consumer_secret' => 'magento_consumer_secret',
        'magento_access_token' => 'magento_access_token',
        'magento_token_secret' => 'magento_token_secret',
        'prestashop_webservice_key' => 'prestashop_webservice_key',
        'wix_app_id' => 'wix_app_id',
        'wix_app_secret_key' => 'wix_app_secret_key',
        'wix_instance_id' => 'wix_instance_id',
        'wix_refresh_token' => 'wix_refresh_token',
        'mercado_libre_app_id' => 'mercado_libre_app_id',
        'mercado_libre_app_secret_key' => 'mercado_libre_app_secret_key',
        'mercado_libre_refresh_token' => 'mercado_libre_refresh_token',
        'zid_client_id' => 'zid_client_id',
        'zid_client_secret' => 'zid_client_secret',
        'zid_access_token' => 'zid_access_token',
        'zid_authorization' => 'zid_authorization',
        'zid_refresh_token' => 'zid_refresh_token',
        'flipkart_client_id' => 'flipkart_client_id',
        'flipkart_client_secret' => 'flipkart_client_secret',
        'allegro_client_id' => 'allegro_client_id',
        'allegro_client_secret' => 'allegro_client_secret',
        'allegro_access_token' => 'allegro_access_token',
        'allegro_refresh_token' => 'allegro_refresh_token',
        'allegro_environment' => 'allegro_environment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cart_id' => 'setCartId',
        'store_url' => 'setStoreUrl',
        'bridge_url' => 'setBridgeUrl',
        'store_root' => 'setStoreRoot',
        'store_key' => 'setStoreKey',
        'shared_secret' => 'setSharedSecret',
        'validate_version' => 'setValidateVersion',
        'verify' => 'setVerify',
        'db_tables_prefix' => 'setDbTablesPrefix',
        'user_agent' => 'setUserAgent',
        'ftp_host' => 'setFtpHost',
        'ftp_user' => 'setFtpUser',
        'ftp_password' => 'setFtpPassword',
        'ftp_port' => 'setFtpPort',
        'ftp_store_dir' => 'setFtpStoreDir',
        'api_key_3dcart' => 'setApiKey3dcart',
        'admin_account' => 'setAdminAccount',
        'api_path' => 'setApiPath',
        'api_key_bigcommerce' => 'setApiKeyBigcommerce',
        'client_id' => 'setClientId',
        'access_token' => 'setAccessToken',
        'context' => 'setContext',
        'access_token' => 'setAccessToken',
        'api_key_shopify' => 'setApiKeyShopify',
        'api_password' => 'setApiPassword',
        'access_token_shopify' => 'setAccessTokenShopify',
        'api_key' => 'setApiKey',
        'api_username' => 'setApiUsername',
        'encrypted_password' => 'setEncryptedPassword',
        'login' => 'setLogin',
        'api_user_adnsf' => 'setApiUserAdnsf',
        'api_pass' => 'setApiPass',
        'private_key' => 'setPrivateKey',
        'app_token' => 'setAppToken',
        'etsy_keystring' => 'setEtsyKeystring',
        'etsy_shared_secret' => 'setEtsySharedSecret',
        'token_secret' => 'setTokenSecret',
        'etsy_client_id' => 'setEtsyClientId',
        'etsy_refresh_token' => 'setEtsyRefreshToken',
        'ebay_client_id' => 'setEbayClientId',
        'ebay_client_secret' => 'setEbayClientSecret',
        'ebay_runame' => 'setEbayRuname',
        'ebay_access_token' => 'setEbayAccessToken',
        'ebay_refresh_token' => 'setEbayRefreshToken',
        'ebay_environment' => 'setEbayEnvironment',
        'ebay_site_id' => 'setEbaySiteId',
        'dw_client_id' => 'setDwClientId',
        'dw_api_pass' => 'setDwApiPass',
        'demandware_user_name' => 'setDemandwareUserName',
        'demandware_user_password' => 'setDemandwareUserPassword',
        'store_id' => 'setStoreId',
        'seller_id' => 'setSellerId',
        'environment' => 'setEnvironment',
        'hybris_client_id' => 'setHybrisClientId',
        'hybris_client_secret' => 'setHybrisClientSecret',
        'hybris_username' => 'setHybrisUsername',
        'hybris_password' => 'setHybrisPassword',
        'hybris_websites' => 'setHybrisWebsites',
        'walmart_client_id' => 'setWalmartClientId',
        'walmart_client_secret' => 'setWalmartClientSecret',
        'walmart_environment' => 'setWalmartEnvironment',
        'walmart_channel_type' => 'setWalmartChannelType',
        'walmart_region' => 'setWalmartRegion',
        'lightspeed_api_key' => 'setLightspeedApiKey',
        'lightspeed_api_secret' => 'setLightspeedApiSecret',
        'shoplazza_access_token' => 'setShoplazzaAccessToken',
        'shoplazza_shared_secret' => 'setShoplazzaSharedSecret',
        'shopware_access_key' => 'setShopwareAccessKey',
        'shopware_api_key' => 'setShopwareApiKey',
        'shopware_api_secret' => 'setShopwareApiSecret',
        'commercehq_api_key' => 'setCommercehqApiKey',
        'commercehq_api_password' => 'setCommercehqApiPassword',
        '_3dcart_private_key' => 'set3dcartPrivateKey',
        '_3dcart_access_token' => 'set3dcartAccessToken',
        'wc_consumer_key' => 'setWcConsumerKey',
        'wc_consumer_secret' => 'setWcConsumerSecret',
        'magento_consumer_key' => 'setMagentoConsumerKey',
        'magento_consumer_secret' => 'setMagentoConsumerSecret',
        'magento_access_token' => 'setMagentoAccessToken',
        'magento_token_secret' => 'setMagentoTokenSecret',
        'prestashop_webservice_key' => 'setPrestashopWebserviceKey',
        'wix_app_id' => 'setWixAppId',
        'wix_app_secret_key' => 'setWixAppSecretKey',
        'wix_instance_id' => 'setWixInstanceId',
        'wix_refresh_token' => 'setWixRefreshToken',
        'mercado_libre_app_id' => 'setMercadoLibreAppId',
        'mercado_libre_app_secret_key' => 'setMercadoLibreAppSecretKey',
        'mercado_libre_refresh_token' => 'setMercadoLibreRefreshToken',
        'zid_client_id' => 'setZidClientId',
        'zid_client_secret' => 'setZidClientSecret',
        'zid_access_token' => 'setZidAccessToken',
        'zid_authorization' => 'setZidAuthorization',
        'zid_refresh_token' => 'setZidRefreshToken',
        'flipkart_client_id' => 'setFlipkartClientId',
        'flipkart_client_secret' => 'setFlipkartClientSecret',
        'allegro_client_id' => 'setAllegroClientId',
        'allegro_client_secret' => 'setAllegroClientSecret',
        'allegro_access_token' => 'setAllegroAccessToken',
        'allegro_refresh_token' => 'setAllegroRefreshToken',
        'allegro_environment' => 'setAllegroEnvironment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cart_id' => 'getCartId',
        'store_url' => 'getStoreUrl',
        'bridge_url' => 'getBridgeUrl',
        'store_root' => 'getStoreRoot',
        'store_key' => 'getStoreKey',
        'shared_secret' => 'getSharedSecret',
        'validate_version' => 'getValidateVersion',
        'verify' => 'getVerify',
        'db_tables_prefix' => 'getDbTablesPrefix',
        'user_agent' => 'getUserAgent',
        'ftp_host' => 'getFtpHost',
        'ftp_user' => 'getFtpUser',
        'ftp_password' => 'getFtpPassword',
        'ftp_port' => 'getFtpPort',
        'ftp_store_dir' => 'getFtpStoreDir',
        'api_key_3dcart' => 'getApiKey3dcart',
        'admin_account' => 'getAdminAccount',
        'api_path' => 'getApiPath',
        'api_key_bigcommerce' => 'getApiKeyBigcommerce',
        'client_id' => 'getClientId',
        'access_token' => 'getAccessToken',
        'context' => 'getContext',
        'access_token' => 'getAccessToken',
        'api_key_shopify' => 'getApiKeyShopify',
        'api_password' => 'getApiPassword',
        'access_token_shopify' => 'getAccessTokenShopify',
        'api_key' => 'getApiKey',
        'api_username' => 'getApiUsername',
        'encrypted_password' => 'getEncryptedPassword',
        'login' => 'getLogin',
        'api_user_adnsf' => 'getApiUserAdnsf',
        'api_pass' => 'getApiPass',
        'private_key' => 'getPrivateKey',
        'app_token' => 'getAppToken',
        'etsy_keystring' => 'getEtsyKeystring',
        'etsy_shared_secret' => 'getEtsySharedSecret',
        'token_secret' => 'getTokenSecret',
        'etsy_client_id' => 'getEtsyClientId',
        'etsy_refresh_token' => 'getEtsyRefreshToken',
        'ebay_client_id' => 'getEbayClientId',
        'ebay_client_secret' => 'getEbayClientSecret',
        'ebay_runame' => 'getEbayRuname',
        'ebay_access_token' => 'getEbayAccessToken',
        'ebay_refresh_token' => 'getEbayRefreshToken',
        'ebay_environment' => 'getEbayEnvironment',
        'ebay_site_id' => 'getEbaySiteId',
        'dw_client_id' => 'getDwClientId',
        'dw_api_pass' => 'getDwApiPass',
        'demandware_user_name' => 'getDemandwareUserName',
        'demandware_user_password' => 'getDemandwareUserPassword',
        'store_id' => 'getStoreId',
        'seller_id' => 'getSellerId',
        'environment' => 'getEnvironment',
        'hybris_client_id' => 'getHybrisClientId',
        'hybris_client_secret' => 'getHybrisClientSecret',
        'hybris_username' => 'getHybrisUsername',
        'hybris_password' => 'getHybrisPassword',
        'hybris_websites' => 'getHybrisWebsites',
        'walmart_client_id' => 'getWalmartClientId',
        'walmart_client_secret' => 'getWalmartClientSecret',
        'walmart_environment' => 'getWalmartEnvironment',
        'walmart_channel_type' => 'getWalmartChannelType',
        'walmart_region' => 'getWalmartRegion',
        'lightspeed_api_key' => 'getLightspeedApiKey',
        'lightspeed_api_secret' => 'getLightspeedApiSecret',
        'shoplazza_access_token' => 'getShoplazzaAccessToken',
        'shoplazza_shared_secret' => 'getShoplazzaSharedSecret',
        'shopware_access_key' => 'getShopwareAccessKey',
        'shopware_api_key' => 'getShopwareApiKey',
        'shopware_api_secret' => 'getShopwareApiSecret',
        'commercehq_api_key' => 'getCommercehqApiKey',
        'commercehq_api_password' => 'getCommercehqApiPassword',
        '_3dcart_private_key' => 'get3dcartPrivateKey',
        '_3dcart_access_token' => 'get3dcartAccessToken',
        'wc_consumer_key' => 'getWcConsumerKey',
        'wc_consumer_secret' => 'getWcConsumerSecret',
        'magento_consumer_key' => 'getMagentoConsumerKey',
        'magento_consumer_secret' => 'getMagentoConsumerSecret',
        'magento_access_token' => 'getMagentoAccessToken',
        'magento_token_secret' => 'getMagentoTokenSecret',
        'prestashop_webservice_key' => 'getPrestashopWebserviceKey',
        'wix_app_id' => 'getWixAppId',
        'wix_app_secret_key' => 'getWixAppSecretKey',
        'wix_instance_id' => 'getWixInstanceId',
        'wix_refresh_token' => 'getWixRefreshToken',
        'mercado_libre_app_id' => 'getMercadoLibreAppId',
        'mercado_libre_app_secret_key' => 'getMercadoLibreAppSecretKey',
        'mercado_libre_refresh_token' => 'getMercadoLibreRefreshToken',
        'zid_client_id' => 'getZidClientId',
        'zid_client_secret' => 'getZidClientSecret',
        'zid_access_token' => 'getZidAccessToken',
        'zid_authorization' => 'getZidAuthorization',
        'zid_refresh_token' => 'getZidRefreshToken',
        'flipkart_client_id' => 'getFlipkartClientId',
        'flipkart_client_secret' => 'getFlipkartClientSecret',
        'allegro_client_id' => 'getAllegroClientId',
        'allegro_client_secret' => 'getAllegroClientSecret',
        'allegro_access_token' => 'getAllegroAccessToken',
        'allegro_refresh_token' => 'getAllegroRefreshToken',
        'allegro_environment' => 'getAllegroEnvironment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CART_ID__3_D_CART = '3DCart';
    public const CART_ID__3_D_CART_API = '3DCartApi';
    public const CART_ID_ACE_SHOP = 'AceShop';
    public const CART_ID_AMAZON_SP = 'AmazonSP';
    public const CART_ID_ASP_DOT_NET_STOREFRONT = 'AspDotNetStorefront';
    public const CART_ID_BIGCOMMERCE_API = 'BigcommerceApi';
    public const CART_ID_BOL = 'Bol';
    public const CART_ID_COMMERCE_HQ = 'CommerceHQ';
    public const CART_ID_CRELOADED = 'Creloaded';
    public const CART_ID_CSCART = 'Cscart';
    public const CART_ID_CUBECART = 'Cubecart';
    public const CART_ID_DEMANDWARE = 'Demandware';
    public const CART_ID_E_BAY = 'EBay';
    public const CART_ID_ECWID = 'Ecwid';
    public const CART_ID_ETSY_APIV3 = 'EtsyAPIv3';
    public const CART_ID_FLIPKART = 'Flipkart';
    public const CART_ID_GAMBIO = 'Gambio';
    public const CART_ID_HYBRIS = 'Hybris';
    public const CART_ID_JOO_CART = 'JooCart';
    public const CART_ID_LAZADA = 'Lazada';
    public const CART_ID_LIGHT_SPEED = 'LightSpeed';
    public const CART_ID_MAGENTO1212 = 'Magento1212';
    public const CART_ID_MAGENTO2_API = 'Magento2Api';
    public const CART_ID_MERCADO_LIBRE = 'MercadoLibre';
    public const CART_ID_MIJO_SHOP = 'MijoShop';
    public const CART_ID_MIVA = 'Miva';
    public const CART_ID_NETO = 'Neto';
    public const CART_ID_OPENCART14 = 'Opencart14';
    public const CART_ID_OSCMAX2 = 'Oscmax2';
    public const CART_ID_OSCOMMERCE22MS2 = 'Oscommerce22ms2';
    public const CART_ID_OTTO = 'Otto';
    public const CART_ID_OXID = 'Oxid';
    public const CART_ID_PINNACLE = 'Pinnacle';
    public const CART_ID_PRESTASHOP = 'Prestashop';
    public const CART_ID_PRESTASHOP_API = 'PrestashopApi';
    public const CART_ID_SS_PREMIUM = 'SSPremium';
    public const CART_ID_SALLA = 'Salla';
    public const CART_ID_SHOPIFY = 'Shopify';
    public const CART_ID_SHOPLAZZA = 'Shoplazza';
    public const CART_ID_SHOPLINE = 'Shopline';
    public const CART_ID_SHOPWARE = 'Shopware';
    public const CART_ID_SHOPWARE_API = 'ShopwareApi';
    public const CART_ID_SQUARE = 'Square';
    public const CART_ID_SQUARESPACE = 'Squarespace';
    public const CART_ID_TIENDANUBE = 'Tiendanube';
    public const CART_ID_TIK_TOK_SHOP = 'TikTokShop';
    public const CART_ID_TOMATOCART = 'Tomatocart';
    public const CART_ID_UBERCART = 'Ubercart';
    public const CART_ID_VIRTUEMART = 'Virtuemart';
    public const CART_ID_VOLUSION = 'Volusion';
    public const CART_ID_W_PECOMMERCE = 'WPecommerce';
    public const CART_ID_WALMART = 'Walmart';
    public const CART_ID_WEB_ASYST = 'WebAsyst';
    public const CART_ID_WIX = 'Wix';
    public const CART_ID_WOOCOMMERCE = 'Woocommerce';
    public const CART_ID_WOOCOMMERCE_API = 'WoocommerceApi';
    public const CART_ID_XCART = 'Xcart';
    public const CART_ID_XTCOMMERCE = 'Xtcommerce';
    public const CART_ID_XTCOMMERCE_VEYTON = 'XtcommerceVeyton';
    public const CART_ID_ZENCART137 = 'Zencart137';
    public const CART_ID_ZID = 'Zid';
    public const CART_ID_ZOEY = 'Zoey';
    public const CART_ID_ZOHO = 'Zoho';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCartIdAllowableValues()
    {
        return [
            self::CART_ID__3_D_CART,
            self::CART_ID__3_D_CART_API,
            self::CART_ID_ACE_SHOP,
            self::CART_ID_AMAZON_SP,
            self::CART_ID_ASP_DOT_NET_STOREFRONT,
            self::CART_ID_BIGCOMMERCE_API,
            self::CART_ID_BOL,
            self::CART_ID_COMMERCE_HQ,
            self::CART_ID_CRELOADED,
            self::CART_ID_CSCART,
            self::CART_ID_CUBECART,
            self::CART_ID_DEMANDWARE,
            self::CART_ID_E_BAY,
            self::CART_ID_ECWID,
            self::CART_ID_ETSY_APIV3,
            self::CART_ID_FLIPKART,
            self::CART_ID_GAMBIO,
            self::CART_ID_HYBRIS,
            self::CART_ID_JOO_CART,
            self::CART_ID_LAZADA,
            self::CART_ID_LIGHT_SPEED,
            self::CART_ID_MAGENTO1212,
            self::CART_ID_MAGENTO2_API,
            self::CART_ID_MERCADO_LIBRE,
            self::CART_ID_MIJO_SHOP,
            self::CART_ID_MIVA,
            self::CART_ID_NETO,
            self::CART_ID_OPENCART14,
            self::CART_ID_OSCMAX2,
            self::CART_ID_OSCOMMERCE22MS2,
            self::CART_ID_OTTO,
            self::CART_ID_OXID,
            self::CART_ID_PINNACLE,
            self::CART_ID_PRESTASHOP,
            self::CART_ID_PRESTASHOP_API,
            self::CART_ID_SS_PREMIUM,
            self::CART_ID_SALLA,
            self::CART_ID_SHOPIFY,
            self::CART_ID_SHOPLAZZA,
            self::CART_ID_SHOPLINE,
            self::CART_ID_SHOPWARE,
            self::CART_ID_SHOPWARE_API,
            self::CART_ID_SQUARE,
            self::CART_ID_SQUARESPACE,
            self::CART_ID_TIENDANUBE,
            self::CART_ID_TIK_TOK_SHOP,
            self::CART_ID_TOMATOCART,
            self::CART_ID_UBERCART,
            self::CART_ID_VIRTUEMART,
            self::CART_ID_VOLUSION,
            self::CART_ID_W_PECOMMERCE,
            self::CART_ID_WALMART,
            self::CART_ID_WEB_ASYST,
            self::CART_ID_WIX,
            self::CART_ID_WOOCOMMERCE,
            self::CART_ID_WOOCOMMERCE_API,
            self::CART_ID_XCART,
            self::CART_ID_XTCOMMERCE,
            self::CART_ID_XTCOMMERCE_VEYTON,
            self::CART_ID_ZENCART137,
            self::CART_ID_ZID,
            self::CART_ID_ZOEY,
            self::CART_ID_ZOHO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cart_id', $data ?? [], null);
        $this->setIfExists('store_url', $data ?? [], null);
        $this->setIfExists('bridge_url', $data ?? [], null);
        $this->setIfExists('store_root', $data ?? [], null);
        $this->setIfExists('store_key', $data ?? [], null);
        $this->setIfExists('shared_secret', $data ?? [], null);
        $this->setIfExists('validate_version', $data ?? [], false);
        $this->setIfExists('verify', $data ?? [], true);
        $this->setIfExists('db_tables_prefix', $data ?? [], null);
        $this->setIfExists('user_agent', $data ?? [], null);
        $this->setIfExists('ftp_host', $data ?? [], null);
        $this->setIfExists('ftp_user', $data ?? [], null);
        $this->setIfExists('ftp_password', $data ?? [], null);
        $this->setIfExists('ftp_port', $data ?? [], null);
        $this->setIfExists('ftp_store_dir', $data ?? [], null);
        $this->setIfExists('api_key_3dcart', $data ?? [], null);
        $this->setIfExists('admin_account', $data ?? [], null);
        $this->setIfExists('api_path', $data ?? [], null);
        $this->setIfExists('api_key_bigcommerce', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('access_token', $data ?? [], null);
        $this->setIfExists('context', $data ?? [], null);
        $this->setIfExists('access_token', $data ?? [], null);
        $this->setIfExists('api_key_shopify', $data ?? [], null);
        $this->setIfExists('api_password', $data ?? [], null);
        $this->setIfExists('access_token_shopify', $data ?? [], null);
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('api_username', $data ?? [], null);
        $this->setIfExists('encrypted_password', $data ?? [], null);
        $this->setIfExists('login', $data ?? [], null);
        $this->setIfExists('api_user_adnsf', $data ?? [], null);
        $this->setIfExists('api_pass', $data ?? [], null);
        $this->setIfExists('private_key', $data ?? [], null);
        $this->setIfExists('app_token', $data ?? [], null);
        $this->setIfExists('etsy_keystring', $data ?? [], null);
        $this->setIfExists('etsy_shared_secret', $data ?? [], null);
        $this->setIfExists('token_secret', $data ?? [], null);
        $this->setIfExists('etsy_client_id', $data ?? [], null);
        $this->setIfExists('etsy_refresh_token', $data ?? [], null);
        $this->setIfExists('ebay_client_id', $data ?? [], null);
        $this->setIfExists('ebay_client_secret', $data ?? [], null);
        $this->setIfExists('ebay_runame', $data ?? [], null);
        $this->setIfExists('ebay_access_token', $data ?? [], null);
        $this->setIfExists('ebay_refresh_token', $data ?? [], null);
        $this->setIfExists('ebay_environment', $data ?? [], 'production');
        $this->setIfExists('ebay_site_id', $data ?? [], 0);
        $this->setIfExists('dw_client_id', $data ?? [], null);
        $this->setIfExists('dw_api_pass', $data ?? [], null);
        $this->setIfExists('demandware_user_name', $data ?? [], null);
        $this->setIfExists('demandware_user_password', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('seller_id', $data ?? [], null);
        $this->setIfExists('environment', $data ?? [], 'production');
        $this->setIfExists('hybris_client_id', $data ?? [], null);
        $this->setIfExists('hybris_client_secret', $data ?? [], null);
        $this->setIfExists('hybris_username', $data ?? [], null);
        $this->setIfExists('hybris_password', $data ?? [], null);
        $this->setIfExists('hybris_websites', $data ?? [], null);
        $this->setIfExists('walmart_client_id', $data ?? [], null);
        $this->setIfExists('walmart_client_secret', $data ?? [], null);
        $this->setIfExists('walmart_environment', $data ?? [], 'production');
        $this->setIfExists('walmart_channel_type', $data ?? [], null);
        $this->setIfExists('walmart_region', $data ?? [], 'us');
        $this->setIfExists('lightspeed_api_key', $data ?? [], null);
        $this->setIfExists('lightspeed_api_secret', $data ?? [], null);
        $this->setIfExists('shoplazza_access_token', $data ?? [], null);
        $this->setIfExists('shoplazza_shared_secret', $data ?? [], null);
        $this->setIfExists('shopware_access_key', $data ?? [], null);
        $this->setIfExists('shopware_api_key', $data ?? [], null);
        $this->setIfExists('shopware_api_secret', $data ?? [], null);
        $this->setIfExists('commercehq_api_key', $data ?? [], null);
        $this->setIfExists('commercehq_api_password', $data ?? [], null);
        $this->setIfExists('_3dcart_private_key', $data ?? [], null);
        $this->setIfExists('_3dcart_access_token', $data ?? [], null);
        $this->setIfExists('wc_consumer_key', $data ?? [], null);
        $this->setIfExists('wc_consumer_secret', $data ?? [], null);
        $this->setIfExists('magento_consumer_key', $data ?? [], null);
        $this->setIfExists('magento_consumer_secret', $data ?? [], null);
        $this->setIfExists('magento_access_token', $data ?? [], null);
        $this->setIfExists('magento_token_secret', $data ?? [], null);
        $this->setIfExists('prestashop_webservice_key', $data ?? [], null);
        $this->setIfExists('wix_app_id', $data ?? [], null);
        $this->setIfExists('wix_app_secret_key', $data ?? [], null);
        $this->setIfExists('wix_instance_id', $data ?? [], null);
        $this->setIfExists('wix_refresh_token', $data ?? [], null);
        $this->setIfExists('mercado_libre_app_id', $data ?? [], null);
        $this->setIfExists('mercado_libre_app_secret_key', $data ?? [], null);
        $this->setIfExists('mercado_libre_refresh_token', $data ?? [], null);
        $this->setIfExists('zid_client_id', $data ?? [], null);
        $this->setIfExists('zid_client_secret', $data ?? [], null);
        $this->setIfExists('zid_access_token', $data ?? [], null);
        $this->setIfExists('zid_authorization', $data ?? [], null);
        $this->setIfExists('zid_refresh_token', $data ?? [], null);
        $this->setIfExists('flipkart_client_id', $data ?? [], null);
        $this->setIfExists('flipkart_client_secret', $data ?? [], null);
        $this->setIfExists('allegro_client_id', $data ?? [], null);
        $this->setIfExists('allegro_client_secret', $data ?? [], null);
        $this->setIfExists('allegro_access_token', $data ?? [], null);
        $this->setIfExists('allegro_refresh_token', $data ?? [], null);
        $this->setIfExists('allegro_environment', $data ?? [], 'production');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cart_id'] === null) {
            $invalidProperties[] = "'cart_id' can't be null";
        }
        $allowedValues = $this->getCartIdAllowableValues();
        if (!is_null($this->container['cart_id']) && !in_array($this->container['cart_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cart_id', must be one of '%s'",
                $this->container['cart_id'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['store_id'] === null) {
            $invalidProperties[] = "'store_id' can't be null";
        }
        if (!is_null($this->container['hybris_websites']) && (count($this->container['hybris_websites']) < 1)) {
            $invalidProperties[] = "invalid value for 'hybris_websites', number of items must be greater than or equal to 1.";
        }

        if ($this->container['wix_app_id'] === null) {
            $invalidProperties[] = "'wix_app_id' can't be null";
        }
        if ($this->container['wix_app_secret_key'] === null) {
            $invalidProperties[] = "'wix_app_secret_key' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cart_id
     *
     * @return string
     */
    public function getCartId()
    {
        return $this->container['cart_id'];
    }

    /**
     * Sets cart_id
     *
     * @param string $cart_id Store’s identifier which you can get from cart_list method
     *
     * @return self
     */
    public function setCartId($cart_id)
    {
        if (is_null($cart_id)) {
            throw new \InvalidArgumentException('non-nullable cart_id cannot be null');
        }
        $allowedValues = $this->getCartIdAllowableValues();
        if (!in_array($cart_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cart_id', must be one of '%s'",
                    $cart_id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cart_id'] = $cart_id;

        return $this;
    }

    /**
     * Gets store_url
     *
     * @return string|null
     */
    public function getStoreUrl()
    {
        return $this->container['store_url'];
    }

    /**
     * Sets store_url
     *
     * @param string|null $store_url A web address of a store that you would like to connect to API2Cart
     *
     * @return self
     */
    public function setStoreUrl($store_url)
    {
        if (is_null($store_url)) {
            throw new \InvalidArgumentException('non-nullable store_url cannot be null');
        }
        $this->container['store_url'] = $store_url;

        return $this;
    }

    /**
     * Gets bridge_url
     *
     * @return string|null
     */
    public function getBridgeUrl()
    {
        return $this->container['bridge_url'];
    }

    /**
     * Sets bridge_url
     *
     * @param string|null $bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
     *
     * @return self
     */
    public function setBridgeUrl($bridge_url)
    {
        if (is_null($bridge_url)) {
            throw new \InvalidArgumentException('non-nullable bridge_url cannot be null');
        }
        $this->container['bridge_url'] = $bridge_url;

        return $this;
    }

    /**
     * Gets store_root
     *
     * @return string|null
     */
    public function getStoreRoot()
    {
        return $this->container['store_root'];
    }

    /**
     * Sets store_root
     *
     * @param string|null $store_root Absolute path to the store root directory (used with \"bridge_url\" parameter)
     *
     * @return self
     */
    public function setStoreRoot($store_root)
    {
        if (is_null($store_root)) {
            throw new \InvalidArgumentException('non-nullable store_root cannot be null');
        }
        $this->container['store_root'] = $store_root;

        return $this;
    }

    /**
     * Gets store_key
     *
     * @return string|null
     */
    public function getStoreKey()
    {
        return $this->container['store_key'];
    }

    /**
     * Sets store_key
     *
     * @param string|null $store_key Set this parameter if bridge is already uploaded to store
     *
     * @return self
     */
    public function setStoreKey($store_key)
    {
        if (is_null($store_key)) {
            throw new \InvalidArgumentException('non-nullable store_key cannot be null');
        }
        $this->container['store_key'] = $store_key;

        return $this;
    }

    /**
     * Gets shared_secret
     *
     * @return string|null
     */
    public function getSharedSecret()
    {
        return $this->container['shared_secret'];
    }

    /**
     * Sets shared_secret
     *
     * @param string|null $shared_secret Shared secret
     *
     * @return self
     */
    public function setSharedSecret($shared_secret)
    {
        if (is_null($shared_secret)) {
            throw new \InvalidArgumentException('non-nullable shared_secret cannot be null');
        }
        $this->container['shared_secret'] = $shared_secret;

        return $this;
    }

    /**
     * Gets validate_version
     *
     * @return bool|null
     */
    public function getValidateVersion()
    {
        return $this->container['validate_version'];
    }

    /**
     * Sets validate_version
     *
     * @param bool|null $validate_version Specify if api2cart should validate cart version
     *
     * @return self
     */
    public function setValidateVersion($validate_version)
    {
        if (is_null($validate_version)) {
            throw new \InvalidArgumentException('non-nullable validate_version cannot be null');
        }
        $this->container['validate_version'] = $validate_version;

        return $this;
    }

    /**
     * Gets verify
     *
     * @return bool|null
     */
    public function getVerify()
    {
        return $this->container['verify'];
    }

    /**
     * Sets verify
     *
     * @param bool|null $verify Enables or disables cart's verification
     *
     * @return self
     */
    public function setVerify($verify)
    {
        if (is_null($verify)) {
            throw new \InvalidArgumentException('non-nullable verify cannot be null');
        }
        $this->container['verify'] = $verify;

        return $this;
    }

    /**
     * Gets db_tables_prefix
     *
     * @return string|null
     */
    public function getDbTablesPrefix()
    {
        return $this->container['db_tables_prefix'];
    }

    /**
     * Sets db_tables_prefix
     *
     * @param string|null $db_tables_prefix DB tables prefix
     *
     * @return self
     */
    public function setDbTablesPrefix($db_tables_prefix)
    {
        if (is_null($db_tables_prefix)) {
            throw new \InvalidArgumentException('non-nullable db_tables_prefix cannot be null');
        }
        $this->container['db_tables_prefix'] = $db_tables_prefix;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string|null $user_agent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store's firewall may block specific values.
     *
     * @return self
     */
    public function setUserAgent($user_agent)
    {
        if (is_null($user_agent)) {
            throw new \InvalidArgumentException('non-nullable user_agent cannot be null');
        }
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets ftp_host
     *
     * @return string|null
     */
    public function getFtpHost()
    {
        return $this->container['ftp_host'];
    }

    /**
     * Sets ftp_host
     *
     * @param string|null $ftp_host FTP connection host
     *
     * @return self
     */
    public function setFtpHost($ftp_host)
    {
        if (is_null($ftp_host)) {
            throw new \InvalidArgumentException('non-nullable ftp_host cannot be null');
        }
        $this->container['ftp_host'] = $ftp_host;

        return $this;
    }

    /**
     * Gets ftp_user
     *
     * @return string|null
     */
    public function getFtpUser()
    {
        return $this->container['ftp_user'];
    }

    /**
     * Sets ftp_user
     *
     * @param string|null $ftp_user FTP User
     *
     * @return self
     */
    public function setFtpUser($ftp_user)
    {
        if (is_null($ftp_user)) {
            throw new \InvalidArgumentException('non-nullable ftp_user cannot be null');
        }
        $this->container['ftp_user'] = $ftp_user;

        return $this;
    }

    /**
     * Gets ftp_password
     *
     * @return string|null
     */
    public function getFtpPassword()
    {
        return $this->container['ftp_password'];
    }

    /**
     * Sets ftp_password
     *
     * @param string|null $ftp_password FTP Password
     *
     * @return self
     */
    public function setFtpPassword($ftp_password)
    {
        if (is_null($ftp_password)) {
            throw new \InvalidArgumentException('non-nullable ftp_password cannot be null');
        }
        $this->container['ftp_password'] = $ftp_password;

        return $this;
    }

    /**
     * Gets ftp_port
     *
     * @return int|null
     */
    public function getFtpPort()
    {
        return $this->container['ftp_port'];
    }

    /**
     * Sets ftp_port
     *
     * @param int|null $ftp_port FTP Port
     *
     * @return self
     */
    public function setFtpPort($ftp_port)
    {
        if (is_null($ftp_port)) {
            throw new \InvalidArgumentException('non-nullable ftp_port cannot be null');
        }
        $this->container['ftp_port'] = $ftp_port;

        return $this;
    }

    /**
     * Gets ftp_store_dir
     *
     * @return string|null
     */
    public function getFtpStoreDir()
    {
        return $this->container['ftp_store_dir'];
    }

    /**
     * Sets ftp_store_dir
     *
     * @param string|null $ftp_store_dir FTP Store dir
     *
     * @return self
     */
    public function setFtpStoreDir($ftp_store_dir)
    {
        if (is_null($ftp_store_dir)) {
            throw new \InvalidArgumentException('non-nullable ftp_store_dir cannot be null');
        }
        $this->container['ftp_store_dir'] = $ftp_store_dir;

        return $this;
    }

    /**
     * Gets api_key_3dcart
     *
     * @return string|null
     */
    public function getApiKey3dcart()
    {
        return $this->container['api_key_3dcart'];
    }

    /**
     * Sets api_key_3dcart
     *
     * @param string|null $api_key_3dcart 3DCart API Key
     *
     * @return self
     */
    public function setApiKey3dcart($api_key_3dcart)
    {
        if (is_null($api_key_3dcart)) {
            throw new \InvalidArgumentException('non-nullable api_key_3dcart cannot be null');
        }
        $this->container['api_key_3dcart'] = $api_key_3dcart;

        return $this;
    }

    /**
     * Gets admin_account
     *
     * @return string|null
     */
    public function getAdminAccount()
    {
        return $this->container['admin_account'];
    }

    /**
     * Sets admin_account
     *
     * @param string|null $admin_account It's a BigCommerce account for which API is enabled
     *
     * @return self
     */
    public function setAdminAccount($admin_account)
    {
        if (is_null($admin_account)) {
            throw new \InvalidArgumentException('non-nullable admin_account cannot be null');
        }
        $this->container['admin_account'] = $admin_account;

        return $this;
    }

    /**
     * Gets api_path
     *
     * @return string|null
     */
    public function getApiPath()
    {
        return $this->container['api_path'];
    }

    /**
     * Sets api_path
     *
     * @param string|null $api_path BigCommerce API URL
     *
     * @return self
     */
    public function setApiPath($api_path)
    {
        if (is_null($api_path)) {
            throw new \InvalidArgumentException('non-nullable api_path cannot be null');
        }
        $this->container['api_path'] = $api_path;

        return $this;
    }

    /**
     * Gets api_key_bigcommerce
     *
     * @return string|null
     */
    public function getApiKeyBigcommerce()
    {
        return $this->container['api_key_bigcommerce'];
    }

    /**
     * Sets api_key_bigcommerce
     *
     * @param string|null $api_key_bigcommerce Bigcommerce API Key
     *
     * @return self
     */
    public function setApiKeyBigcommerce($api_key_bigcommerce)
    {
        if (is_null($api_key_bigcommerce)) {
            throw new \InvalidArgumentException('non-nullable api_key_bigcommerce cannot be null');
        }
        $this->container['api_key_bigcommerce'] = $api_key_bigcommerce;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id Client ID of the requesting app
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string|null
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string|null $access_token Access token authorizing the app to access resources on behalf of a user
     *
     * @return self
     */
    public function setAccessToken($access_token)
    {
        if (is_null($access_token)) {
            throw new \InvalidArgumentException('non-nullable access_token cannot be null');
        }
        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets context
     *
     * @return string|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string|null $context API Path section unique to the store
     *
     * @return self
     */
    public function setContext($context)
    {
        if (is_null($context)) {
            throw new \InvalidArgumentException('non-nullable context cannot be null');
        }
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string|null
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string|null $access_token Access token authorizing the app to access resources on behalf of a user
     *
     * @return self
     */
    public function setAccessToken($access_token)
    {
        if (is_null($access_token)) {
            throw new \InvalidArgumentException('non-nullable access_token cannot be null');
        }
        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets api_key_shopify
     *
     * @return string|null
     */
    public function getApiKeyShopify()
    {
        return $this->container['api_key_shopify'];
    }

    /**
     * Sets api_key_shopify
     *
     * @param string|null $api_key_shopify Shopify API Key
     *
     * @return self
     */
    public function setApiKeyShopify($api_key_shopify)
    {
        if (is_null($api_key_shopify)) {
            throw new \InvalidArgumentException('non-nullable api_key_shopify cannot be null');
        }
        $this->container['api_key_shopify'] = $api_key_shopify;

        return $this;
    }

    /**
     * Gets api_password
     *
     * @return string|null
     */
    public function getApiPassword()
    {
        return $this->container['api_password'];
    }

    /**
     * Sets api_password
     *
     * @param string|null $api_password Shopify API Password
     *
     * @return self
     */
    public function setApiPassword($api_password)
    {
        if (is_null($api_password)) {
            throw new \InvalidArgumentException('non-nullable api_password cannot be null');
        }
        $this->container['api_password'] = $api_password;

        return $this;
    }

    /**
     * Gets access_token_shopify
     *
     * @return string|null
     */
    public function getAccessTokenShopify()
    {
        return $this->container['access_token_shopify'];
    }

    /**
     * Sets access_token_shopify
     *
     * @param string|null $access_token_shopify Access token authorizing the app to access resources on behalf of a user
     *
     * @return self
     */
    public function setAccessTokenShopify($access_token_shopify)
    {
        if (is_null($access_token_shopify)) {
            throw new \InvalidArgumentException('non-nullable access_token_shopify cannot be null');
        }
        $this->container['access_token_shopify'] = $access_token_shopify;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string|null $api_key Neto API Key
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets api_username
     *
     * @return string|null
     */
    public function getApiUsername()
    {
        return $this->container['api_username'];
    }

    /**
     * Sets api_username
     *
     * @param string|null $api_username Neto User Name
     *
     * @return self
     */
    public function setApiUsername($api_username)
    {
        if (is_null($api_username)) {
            throw new \InvalidArgumentException('non-nullable api_username cannot be null');
        }
        $this->container['api_username'] = $api_username;

        return $this;
    }

    /**
     * Gets encrypted_password
     *
     * @return string|null
     */
    public function getEncryptedPassword()
    {
        return $this->container['encrypted_password'];
    }

    /**
     * Sets encrypted_password
     *
     * @param string|null $encrypted_password Volusion API Password
     *
     * @return self
     */
    public function setEncryptedPassword($encrypted_password)
    {
        if (is_null($encrypted_password)) {
            throw new \InvalidArgumentException('non-nullable encrypted_password cannot be null');
        }
        $this->container['encrypted_password'] = $encrypted_password;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string|null
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string|null $login It's a Volusion account for which API is enabled
     *
     * @return self
     */
    public function setLogin($login)
    {
        if (is_null($login)) {
            throw new \InvalidArgumentException('non-nullable login cannot be null');
        }
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets api_user_adnsf
     *
     * @return string|null
     */
    public function getApiUserAdnsf()
    {
        return $this->container['api_user_adnsf'];
    }

    /**
     * Sets api_user_adnsf
     *
     * @param string|null $api_user_adnsf It's a AspDotNetStorefront account for which API is available
     *
     * @return self
     */
    public function setApiUserAdnsf($api_user_adnsf)
    {
        if (is_null($api_user_adnsf)) {
            throw new \InvalidArgumentException('non-nullable api_user_adnsf cannot be null');
        }
        $this->container['api_user_adnsf'] = $api_user_adnsf;

        return $this;
    }

    /**
     * Gets api_pass
     *
     * @return string|null
     */
    public function getApiPass()
    {
        return $this->container['api_pass'];
    }

    /**
     * Sets api_pass
     *
     * @param string|null $api_pass AspDotNetStorefront API Password
     *
     * @return self
     */
    public function setApiPass($api_pass)
    {
        if (is_null($api_pass)) {
            throw new \InvalidArgumentException('non-nullable api_pass cannot be null');
        }
        $this->container['api_pass'] = $api_pass;

        return $this;
    }

    /**
     * Gets private_key
     *
     * @return string|null
     */
    public function getPrivateKey()
    {
        return $this->container['private_key'];
    }

    /**
     * Sets private_key
     *
     * @param string|null $private_key 3DCart Application Private Key
     *
     * @return self
     */
    public function setPrivateKey($private_key)
    {
        if (is_null($private_key)) {
            throw new \InvalidArgumentException('non-nullable private_key cannot be null');
        }
        $this->container['private_key'] = $private_key;

        return $this;
    }

    /**
     * Gets app_token
     *
     * @return string|null
     */
    public function getAppToken()
    {
        return $this->container['app_token'];
    }

    /**
     * Sets app_token
     *
     * @param string|null $app_token 3DCart Token from Application
     *
     * @return self
     */
    public function setAppToken($app_token)
    {
        if (is_null($app_token)) {
            throw new \InvalidArgumentException('non-nullable app_token cannot be null');
        }
        $this->container['app_token'] = $app_token;

        return $this;
    }

    /**
     * Gets etsy_keystring
     *
     * @return string|null
     */
    public function getEtsyKeystring()
    {
        return $this->container['etsy_keystring'];
    }

    /**
     * Sets etsy_keystring
     *
     * @param string|null $etsy_keystring Etsy keystring
     *
     * @return self
     */
    public function setEtsyKeystring($etsy_keystring)
    {
        if (is_null($etsy_keystring)) {
            throw new \InvalidArgumentException('non-nullable etsy_keystring cannot be null');
        }
        $this->container['etsy_keystring'] = $etsy_keystring;

        return $this;
    }

    /**
     * Gets etsy_shared_secret
     *
     * @return string|null
     */
    public function getEtsySharedSecret()
    {
        return $this->container['etsy_shared_secret'];
    }

    /**
     * Sets etsy_shared_secret
     *
     * @param string|null $etsy_shared_secret Etsy shared secret
     *
     * @return self
     */
    public function setEtsySharedSecret($etsy_shared_secret)
    {
        if (is_null($etsy_shared_secret)) {
            throw new \InvalidArgumentException('non-nullable etsy_shared_secret cannot be null');
        }
        $this->container['etsy_shared_secret'] = $etsy_shared_secret;

        return $this;
    }

    /**
     * Gets token_secret
     *
     * @return string|null
     */
    public function getTokenSecret()
    {
        return $this->container['token_secret'];
    }

    /**
     * Sets token_secret
     *
     * @param string|null $token_secret Secret token authorizing the app to access resources on behalf of a user
     *
     * @return self
     */
    public function setTokenSecret($token_secret)
    {
        if (is_null($token_secret)) {
            throw new \InvalidArgumentException('non-nullable token_secret cannot be null');
        }
        $this->container['token_secret'] = $token_secret;

        return $this;
    }

    /**
     * Gets etsy_client_id
     *
     * @return string|null
     */
    public function getEtsyClientId()
    {
        return $this->container['etsy_client_id'];
    }

    /**
     * Sets etsy_client_id
     *
     * @param string|null $etsy_client_id Etsy Client Id
     *
     * @return self
     */
    public function setEtsyClientId($etsy_client_id)
    {
        if (is_null($etsy_client_id)) {
            throw new \InvalidArgumentException('non-nullable etsy_client_id cannot be null');
        }
        $this->container['etsy_client_id'] = $etsy_client_id;

        return $this;
    }

    /**
     * Gets etsy_refresh_token
     *
     * @return string|null
     */
    public function getEtsyRefreshToken()
    {
        return $this->container['etsy_refresh_token'];
    }

    /**
     * Sets etsy_refresh_token
     *
     * @param string|null $etsy_refresh_token Etsy Refresh token
     *
     * @return self
     */
    public function setEtsyRefreshToken($etsy_refresh_token)
    {
        if (is_null($etsy_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable etsy_refresh_token cannot be null');
        }
        $this->container['etsy_refresh_token'] = $etsy_refresh_token;

        return $this;
    }

    /**
     * Gets ebay_client_id
     *
     * @return string|null
     */
    public function getEbayClientId()
    {
        return $this->container['ebay_client_id'];
    }

    /**
     * Sets ebay_client_id
     *
     * @param string|null $ebay_client_id Application ID (AppID).
     *
     * @return self
     */
    public function setEbayClientId($ebay_client_id)
    {
        if (is_null($ebay_client_id)) {
            throw new \InvalidArgumentException('non-nullable ebay_client_id cannot be null');
        }
        $this->container['ebay_client_id'] = $ebay_client_id;

        return $this;
    }

    /**
     * Gets ebay_client_secret
     *
     * @return string|null
     */
    public function getEbayClientSecret()
    {
        return $this->container['ebay_client_secret'];
    }

    /**
     * Sets ebay_client_secret
     *
     * @param string|null $ebay_client_secret Shared Secret from eBay application
     *
     * @return self
     */
    public function setEbayClientSecret($ebay_client_secret)
    {
        if (is_null($ebay_client_secret)) {
            throw new \InvalidArgumentException('non-nullable ebay_client_secret cannot be null');
        }
        $this->container['ebay_client_secret'] = $ebay_client_secret;

        return $this;
    }

    /**
     * Gets ebay_runame
     *
     * @return string|null
     */
    public function getEbayRuname()
    {
        return $this->container['ebay_runame'];
    }

    /**
     * Sets ebay_runame
     *
     * @param string|null $ebay_runame The RuName value that eBay assigns to your application.
     *
     * @return self
     */
    public function setEbayRuname($ebay_runame)
    {
        if (is_null($ebay_runame)) {
            throw new \InvalidArgumentException('non-nullable ebay_runame cannot be null');
        }
        $this->container['ebay_runame'] = $ebay_runame;

        return $this;
    }

    /**
     * Gets ebay_access_token
     *
     * @return string|null
     */
    public function getEbayAccessToken()
    {
        return $this->container['ebay_access_token'];
    }

    /**
     * Sets ebay_access_token
     *
     * @param string|null $ebay_access_token Used to authenticate API requests.
     *
     * @return self
     */
    public function setEbayAccessToken($ebay_access_token)
    {
        if (is_null($ebay_access_token)) {
            throw new \InvalidArgumentException('non-nullable ebay_access_token cannot be null');
        }
        $this->container['ebay_access_token'] = $ebay_access_token;

        return $this;
    }

    /**
     * Gets ebay_refresh_token
     *
     * @return string|null
     */
    public function getEbayRefreshToken()
    {
        return $this->container['ebay_refresh_token'];
    }

    /**
     * Sets ebay_refresh_token
     *
     * @param string|null $ebay_refresh_token Used to renew the access token.
     *
     * @return self
     */
    public function setEbayRefreshToken($ebay_refresh_token)
    {
        if (is_null($ebay_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable ebay_refresh_token cannot be null');
        }
        $this->container['ebay_refresh_token'] = $ebay_refresh_token;

        return $this;
    }

    /**
     * Gets ebay_environment
     *
     * @return string|null
     */
    public function getEbayEnvironment()
    {
        return $this->container['ebay_environment'];
    }

    /**
     * Sets ebay_environment
     *
     * @param string|null $ebay_environment eBay environment
     *
     * @return self
     */
    public function setEbayEnvironment($ebay_environment)
    {
        if (is_null($ebay_environment)) {
            throw new \InvalidArgumentException('non-nullable ebay_environment cannot be null');
        }
        $this->container['ebay_environment'] = $ebay_environment;

        return $this;
    }

    /**
     * Gets ebay_site_id
     *
     * @return int|null
     */
    public function getEbaySiteId()
    {
        return $this->container['ebay_site_id'];
    }

    /**
     * Sets ebay_site_id
     *
     * @param int|null $ebay_site_id eBay global ID
     *
     * @return self
     */
    public function setEbaySiteId($ebay_site_id)
    {
        if (is_null($ebay_site_id)) {
            throw new \InvalidArgumentException('non-nullable ebay_site_id cannot be null');
        }
        $this->container['ebay_site_id'] = $ebay_site_id;

        return $this;
    }

    /**
     * Gets dw_client_id
     *
     * @return string|null
     */
    public function getDwClientId()
    {
        return $this->container['dw_client_id'];
    }

    /**
     * Sets dw_client_id
     *
     * @param string|null $dw_client_id Demandware client id
     *
     * @return self
     */
    public function setDwClientId($dw_client_id)
    {
        if (is_null($dw_client_id)) {
            throw new \InvalidArgumentException('non-nullable dw_client_id cannot be null');
        }
        $this->container['dw_client_id'] = $dw_client_id;

        return $this;
    }

    /**
     * Gets dw_api_pass
     *
     * @return string|null
     */
    public function getDwApiPass()
    {
        return $this->container['dw_api_pass'];
    }

    /**
     * Sets dw_api_pass
     *
     * @param string|null $dw_api_pass Demandware api password
     *
     * @return self
     */
    public function setDwApiPass($dw_api_pass)
    {
        if (is_null($dw_api_pass)) {
            throw new \InvalidArgumentException('non-nullable dw_api_pass cannot be null');
        }
        $this->container['dw_api_pass'] = $dw_api_pass;

        return $this;
    }

    /**
     * Gets demandware_user_name
     *
     * @return string|null
     */
    public function getDemandwareUserName()
    {
        return $this->container['demandware_user_name'];
    }

    /**
     * Sets demandware_user_name
     *
     * @param string|null $demandware_user_name Demandware user name
     *
     * @return self
     */
    public function setDemandwareUserName($demandware_user_name)
    {
        if (is_null($demandware_user_name)) {
            throw new \InvalidArgumentException('non-nullable demandware_user_name cannot be null');
        }
        $this->container['demandware_user_name'] = $demandware_user_name;

        return $this;
    }

    /**
     * Gets demandware_user_password
     *
     * @return string|null
     */
    public function getDemandwareUserPassword()
    {
        return $this->container['demandware_user_password'];
    }

    /**
     * Sets demandware_user_password
     *
     * @param string|null $demandware_user_password Demandware user password
     *
     * @return self
     */
    public function setDemandwareUserPassword($demandware_user_password)
    {
        if (is_null($demandware_user_password)) {
            throw new \InvalidArgumentException('non-nullable demandware_user_password cannot be null');
        }
        $this->container['demandware_user_password'] = $demandware_user_password;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string $store_id Store Id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets seller_id
     *
     * @return string|null
     */
    public function getSellerId()
    {
        return $this->container['seller_id'];
    }

    /**
     * Sets seller_id
     *
     * @param string|null $seller_id Seller Id
     *
     * @return self
     */
    public function setSellerId($seller_id)
    {
        if (is_null($seller_id)) {
            throw new \InvalidArgumentException('non-nullable seller_id cannot be null');
        }
        $this->container['seller_id'] = $seller_id;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return string|null
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param string|null $environment 
     *
     * @return self
     */
    public function setEnvironment($environment)
    {
        if (is_null($environment)) {
            throw new \InvalidArgumentException('non-nullable environment cannot be null');
        }
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets hybris_client_id
     *
     * @return string|null
     */
    public function getHybrisClientId()
    {
        return $this->container['hybris_client_id'];
    }

    /**
     * Sets hybris_client_id
     *
     * @param string|null $hybris_client_id Omni Commerce Connector Client ID
     *
     * @return self
     */
    public function setHybrisClientId($hybris_client_id)
    {
        if (is_null($hybris_client_id)) {
            throw new \InvalidArgumentException('non-nullable hybris_client_id cannot be null');
        }
        $this->container['hybris_client_id'] = $hybris_client_id;

        return $this;
    }

    /**
     * Gets hybris_client_secret
     *
     * @return string|null
     */
    public function getHybrisClientSecret()
    {
        return $this->container['hybris_client_secret'];
    }

    /**
     * Sets hybris_client_secret
     *
     * @param string|null $hybris_client_secret Omni Commerce Connector Client Secret
     *
     * @return self
     */
    public function setHybrisClientSecret($hybris_client_secret)
    {
        if (is_null($hybris_client_secret)) {
            throw new \InvalidArgumentException('non-nullable hybris_client_secret cannot be null');
        }
        $this->container['hybris_client_secret'] = $hybris_client_secret;

        return $this;
    }

    /**
     * Gets hybris_username
     *
     * @return string|null
     */
    public function getHybrisUsername()
    {
        return $this->container['hybris_username'];
    }

    /**
     * Sets hybris_username
     *
     * @param string|null $hybris_username User Name
     *
     * @return self
     */
    public function setHybrisUsername($hybris_username)
    {
        if (is_null($hybris_username)) {
            throw new \InvalidArgumentException('non-nullable hybris_username cannot be null');
        }
        $this->container['hybris_username'] = $hybris_username;

        return $this;
    }

    /**
     * Gets hybris_password
     *
     * @return string|null
     */
    public function getHybrisPassword()
    {
        return $this->container['hybris_password'];
    }

    /**
     * Sets hybris_password
     *
     * @param string|null $hybris_password User password
     *
     * @return self
     */
    public function setHybrisPassword($hybris_password)
    {
        if (is_null($hybris_password)) {
            throw new \InvalidArgumentException('non-nullable hybris_password cannot be null');
        }
        $this->container['hybris_password'] = $hybris_password;

        return $this;
    }

    /**
     * Gets hybris_websites
     *
     * @return \OpenAPI\Client\Model\AccountCartAddHybrisWebsitesInner[]|null
     */
    public function getHybrisWebsites()
    {
        return $this->container['hybris_websites'];
    }

    /**
     * Sets hybris_websites
     *
     * @param \OpenAPI\Client\Model\AccountCartAddHybrisWebsitesInner[]|null $hybris_websites Websites to stores mapping data
     *
     * @return self
     */
    public function setHybrisWebsites($hybris_websites)
    {
        if (is_null($hybris_websites)) {
            throw new \InvalidArgumentException('non-nullable hybris_websites cannot be null');
        }


        if ((count($hybris_websites) < 1)) {
            throw new \InvalidArgumentException('invalid length for $hybris_websites when calling CartCreate., number of items must be greater than or equal to 1.');
        }
        $this->container['hybris_websites'] = $hybris_websites;

        return $this;
    }

    /**
     * Gets walmart_client_id
     *
     * @return string|null
     */
    public function getWalmartClientId()
    {
        return $this->container['walmart_client_id'];
    }

    /**
     * Sets walmart_client_id
     *
     * @param string|null $walmart_client_id Walmart client ID. For the region 'ca' use Consumer ID
     *
     * @return self
     */
    public function setWalmartClientId($walmart_client_id)
    {
        if (is_null($walmart_client_id)) {
            throw new \InvalidArgumentException('non-nullable walmart_client_id cannot be null');
        }
        $this->container['walmart_client_id'] = $walmart_client_id;

        return $this;
    }

    /**
     * Gets walmart_client_secret
     *
     * @return string|null
     */
    public function getWalmartClientSecret()
    {
        return $this->container['walmart_client_secret'];
    }

    /**
     * Sets walmart_client_secret
     *
     * @param string|null $walmart_client_secret Walmart client secret. For the region 'ca' use Private Key
     *
     * @return self
     */
    public function setWalmartClientSecret($walmart_client_secret)
    {
        if (is_null($walmart_client_secret)) {
            throw new \InvalidArgumentException('non-nullable walmart_client_secret cannot be null');
        }
        $this->container['walmart_client_secret'] = $walmart_client_secret;

        return $this;
    }

    /**
     * Gets walmart_environment
     *
     * @return string|null
     */
    public function getWalmartEnvironment()
    {
        return $this->container['walmart_environment'];
    }

    /**
     * Sets walmart_environment
     *
     * @param string|null $walmart_environment Walmart environment
     *
     * @return self
     */
    public function setWalmartEnvironment($walmart_environment)
    {
        if (is_null($walmart_environment)) {
            throw new \InvalidArgumentException('non-nullable walmart_environment cannot be null');
        }
        $this->container['walmart_environment'] = $walmart_environment;

        return $this;
    }

    /**
     * Gets walmart_channel_type
     *
     * @return string|null
     */
    public function getWalmartChannelType()
    {
        return $this->container['walmart_channel_type'];
    }

    /**
     * Sets walmart_channel_type
     *
     * @param string|null $walmart_channel_type Walmart WM_CONSUMER.CHANNEL.TYPE header
     *
     * @return self
     */
    public function setWalmartChannelType($walmart_channel_type)
    {
        if (is_null($walmart_channel_type)) {
            throw new \InvalidArgumentException('non-nullable walmart_channel_type cannot be null');
        }
        $this->container['walmart_channel_type'] = $walmart_channel_type;

        return $this;
    }

    /**
     * Gets walmart_region
     *
     * @return string|null
     */
    public function getWalmartRegion()
    {
        return $this->container['walmart_region'];
    }

    /**
     * Sets walmart_region
     *
     * @param string|null $walmart_region Walmart region
     *
     * @return self
     */
    public function setWalmartRegion($walmart_region)
    {
        if (is_null($walmart_region)) {
            throw new \InvalidArgumentException('non-nullable walmart_region cannot be null');
        }
        $this->container['walmart_region'] = $walmart_region;

        return $this;
    }

    /**
     * Gets lightspeed_api_key
     *
     * @return string|null
     */
    public function getLightspeedApiKey()
    {
        return $this->container['lightspeed_api_key'];
    }

    /**
     * Sets lightspeed_api_key
     *
     * @param string|null $lightspeed_api_key LightSpeed api key
     *
     * @return self
     */
    public function setLightspeedApiKey($lightspeed_api_key)
    {
        if (is_null($lightspeed_api_key)) {
            throw new \InvalidArgumentException('non-nullable lightspeed_api_key cannot be null');
        }
        $this->container['lightspeed_api_key'] = $lightspeed_api_key;

        return $this;
    }

    /**
     * Gets lightspeed_api_secret
     *
     * @return string|null
     */
    public function getLightspeedApiSecret()
    {
        return $this->container['lightspeed_api_secret'];
    }

    /**
     * Sets lightspeed_api_secret
     *
     * @param string|null $lightspeed_api_secret LightSpeed api secret
     *
     * @return self
     */
    public function setLightspeedApiSecret($lightspeed_api_secret)
    {
        if (is_null($lightspeed_api_secret)) {
            throw new \InvalidArgumentException('non-nullable lightspeed_api_secret cannot be null');
        }
        $this->container['lightspeed_api_secret'] = $lightspeed_api_secret;

        return $this;
    }

    /**
     * Gets shoplazza_access_token
     *
     * @return string|null
     */
    public function getShoplazzaAccessToken()
    {
        return $this->container['shoplazza_access_token'];
    }

    /**
     * Sets shoplazza_access_token
     *
     * @param string|null $shoplazza_access_token Access token authorizing the app to access resources on behalf of a user
     *
     * @return self
     */
    public function setShoplazzaAccessToken($shoplazza_access_token)
    {
        if (is_null($shoplazza_access_token)) {
            throw new \InvalidArgumentException('non-nullable shoplazza_access_token cannot be null');
        }
        $this->container['shoplazza_access_token'] = $shoplazza_access_token;

        return $this;
    }

    /**
     * Gets shoplazza_shared_secret
     *
     * @return string|null
     */
    public function getShoplazzaSharedSecret()
    {
        return $this->container['shoplazza_shared_secret'];
    }

    /**
     * Sets shoplazza_shared_secret
     *
     * @param string|null $shoplazza_shared_secret Shared secret
     *
     * @return self
     */
    public function setShoplazzaSharedSecret($shoplazza_shared_secret)
    {
        if (is_null($shoplazza_shared_secret)) {
            throw new \InvalidArgumentException('non-nullable shoplazza_shared_secret cannot be null');
        }
        $this->container['shoplazza_shared_secret'] = $shoplazza_shared_secret;

        return $this;
    }

    /**
     * Gets shopware_access_key
     *
     * @return string|null
     */
    public function getShopwareAccessKey()
    {
        return $this->container['shopware_access_key'];
    }

    /**
     * Sets shopware_access_key
     *
     * @param string|null $shopware_access_key Shopware access key
     *
     * @return self
     */
    public function setShopwareAccessKey($shopware_access_key)
    {
        if (is_null($shopware_access_key)) {
            throw new \InvalidArgumentException('non-nullable shopware_access_key cannot be null');
        }
        $this->container['shopware_access_key'] = $shopware_access_key;

        return $this;
    }

    /**
     * Gets shopware_api_key
     *
     * @return string|null
     */
    public function getShopwareApiKey()
    {
        return $this->container['shopware_api_key'];
    }

    /**
     * Sets shopware_api_key
     *
     * @param string|null $shopware_api_key Shopware api key
     *
     * @return self
     */
    public function setShopwareApiKey($shopware_api_key)
    {
        if (is_null($shopware_api_key)) {
            throw new \InvalidArgumentException('non-nullable shopware_api_key cannot be null');
        }
        $this->container['shopware_api_key'] = $shopware_api_key;

        return $this;
    }

    /**
     * Gets shopware_api_secret
     *
     * @return string|null
     */
    public function getShopwareApiSecret()
    {
        return $this->container['shopware_api_secret'];
    }

    /**
     * Sets shopware_api_secret
     *
     * @param string|null $shopware_api_secret Shopware client secret access key
     *
     * @return self
     */
    public function setShopwareApiSecret($shopware_api_secret)
    {
        if (is_null($shopware_api_secret)) {
            throw new \InvalidArgumentException('non-nullable shopware_api_secret cannot be null');
        }
        $this->container['shopware_api_secret'] = $shopware_api_secret;

        return $this;
    }

    /**
     * Gets commercehq_api_key
     *
     * @return string|null
     */
    public function getCommercehqApiKey()
    {
        return $this->container['commercehq_api_key'];
    }

    /**
     * Sets commercehq_api_key
     *
     * @param string|null $commercehq_api_key CommerceHQ api key
     *
     * @return self
     */
    public function setCommercehqApiKey($commercehq_api_key)
    {
        if (is_null($commercehq_api_key)) {
            throw new \InvalidArgumentException('non-nullable commercehq_api_key cannot be null');
        }
        $this->container['commercehq_api_key'] = $commercehq_api_key;

        return $this;
    }

    /**
     * Gets commercehq_api_password
     *
     * @return string|null
     */
    public function getCommercehqApiPassword()
    {
        return $this->container['commercehq_api_password'];
    }

    /**
     * Sets commercehq_api_password
     *
     * @param string|null $commercehq_api_password CommerceHQ api password
     *
     * @return self
     */
    public function setCommercehqApiPassword($commercehq_api_password)
    {
        if (is_null($commercehq_api_password)) {
            throw new \InvalidArgumentException('non-nullable commercehq_api_password cannot be null');
        }
        $this->container['commercehq_api_password'] = $commercehq_api_password;

        return $this;
    }

    /**
     * Gets _3dcart_private_key
     *
     * @return string|null
     */
    public function get3dcartPrivateKey()
    {
        return $this->container['_3dcart_private_key'];
    }

    /**
     * Sets _3dcart_private_key
     *
     * @param string|null $_3dcart_private_key 3DCart Private Key
     *
     * @return self
     */
    public function set3dcartPrivateKey($_3dcart_private_key)
    {
        if (is_null($_3dcart_private_key)) {
            throw new \InvalidArgumentException('non-nullable _3dcart_private_key cannot be null');
        }
        $this->container['_3dcart_private_key'] = $_3dcart_private_key;

        return $this;
    }

    /**
     * Gets _3dcart_access_token
     *
     * @return string|null
     */
    public function get3dcartAccessToken()
    {
        return $this->container['_3dcart_access_token'];
    }

    /**
     * Sets _3dcart_access_token
     *
     * @param string|null $_3dcart_access_token 3DCart Token
     *
     * @return self
     */
    public function set3dcartAccessToken($_3dcart_access_token)
    {
        if (is_null($_3dcart_access_token)) {
            throw new \InvalidArgumentException('non-nullable _3dcart_access_token cannot be null');
        }
        $this->container['_3dcart_access_token'] = $_3dcart_access_token;

        return $this;
    }

    /**
     * Gets wc_consumer_key
     *
     * @return string|null
     */
    public function getWcConsumerKey()
    {
        return $this->container['wc_consumer_key'];
    }

    /**
     * Sets wc_consumer_key
     *
     * @param string|null $wc_consumer_key Woocommerce consumer key
     *
     * @return self
     */
    public function setWcConsumerKey($wc_consumer_key)
    {
        if (is_null($wc_consumer_key)) {
            throw new \InvalidArgumentException('non-nullable wc_consumer_key cannot be null');
        }
        $this->container['wc_consumer_key'] = $wc_consumer_key;

        return $this;
    }

    /**
     * Gets wc_consumer_secret
     *
     * @return string|null
     */
    public function getWcConsumerSecret()
    {
        return $this->container['wc_consumer_secret'];
    }

    /**
     * Sets wc_consumer_secret
     *
     * @param string|null $wc_consumer_secret Woocommerce consumer secret
     *
     * @return self
     */
    public function setWcConsumerSecret($wc_consumer_secret)
    {
        if (is_null($wc_consumer_secret)) {
            throw new \InvalidArgumentException('non-nullable wc_consumer_secret cannot be null');
        }
        $this->container['wc_consumer_secret'] = $wc_consumer_secret;

        return $this;
    }

    /**
     * Gets magento_consumer_key
     *
     * @return string|null
     */
    public function getMagentoConsumerKey()
    {
        return $this->container['magento_consumer_key'];
    }

    /**
     * Sets magento_consumer_key
     *
     * @param string|null $magento_consumer_key Magento Consumer Key
     *
     * @return self
     */
    public function setMagentoConsumerKey($magento_consumer_key)
    {
        if (is_null($magento_consumer_key)) {
            throw new \InvalidArgumentException('non-nullable magento_consumer_key cannot be null');
        }
        $this->container['magento_consumer_key'] = $magento_consumer_key;

        return $this;
    }

    /**
     * Gets magento_consumer_secret
     *
     * @return string|null
     */
    public function getMagentoConsumerSecret()
    {
        return $this->container['magento_consumer_secret'];
    }

    /**
     * Sets magento_consumer_secret
     *
     * @param string|null $magento_consumer_secret Magento Consumer Secret
     *
     * @return self
     */
    public function setMagentoConsumerSecret($magento_consumer_secret)
    {
        if (is_null($magento_consumer_secret)) {
            throw new \InvalidArgumentException('non-nullable magento_consumer_secret cannot be null');
        }
        $this->container['magento_consumer_secret'] = $magento_consumer_secret;

        return $this;
    }

    /**
     * Gets magento_access_token
     *
     * @return string|null
     */
    public function getMagentoAccessToken()
    {
        return $this->container['magento_access_token'];
    }

    /**
     * Sets magento_access_token
     *
     * @param string|null $magento_access_token Magento Access Token
     *
     * @return self
     */
    public function setMagentoAccessToken($magento_access_token)
    {
        if (is_null($magento_access_token)) {
            throw new \InvalidArgumentException('non-nullable magento_access_token cannot be null');
        }
        $this->container['magento_access_token'] = $magento_access_token;

        return $this;
    }

    /**
     * Gets magento_token_secret
     *
     * @return string|null
     */
    public function getMagentoTokenSecret()
    {
        return $this->container['magento_token_secret'];
    }

    /**
     * Sets magento_token_secret
     *
     * @param string|null $magento_token_secret Magento Token Secret
     *
     * @return self
     */
    public function setMagentoTokenSecret($magento_token_secret)
    {
        if (is_null($magento_token_secret)) {
            throw new \InvalidArgumentException('non-nullable magento_token_secret cannot be null');
        }
        $this->container['magento_token_secret'] = $magento_token_secret;

        return $this;
    }

    /**
     * Gets prestashop_webservice_key
     *
     * @return string|null
     */
    public function getPrestashopWebserviceKey()
    {
        return $this->container['prestashop_webservice_key'];
    }

    /**
     * Sets prestashop_webservice_key
     *
     * @param string|null $prestashop_webservice_key Prestashop webservice key
     *
     * @return self
     */
    public function setPrestashopWebserviceKey($prestashop_webservice_key)
    {
        if (is_null($prestashop_webservice_key)) {
            throw new \InvalidArgumentException('non-nullable prestashop_webservice_key cannot be null');
        }
        $this->container['prestashop_webservice_key'] = $prestashop_webservice_key;

        return $this;
    }

    /**
     * Gets wix_app_id
     *
     * @return string
     */
    public function getWixAppId()
    {
        return $this->container['wix_app_id'];
    }

    /**
     * Sets wix_app_id
     *
     * @param string $wix_app_id Wix App ID
     *
     * @return self
     */
    public function setWixAppId($wix_app_id)
    {
        if (is_null($wix_app_id)) {
            throw new \InvalidArgumentException('non-nullable wix_app_id cannot be null');
        }
        $this->container['wix_app_id'] = $wix_app_id;

        return $this;
    }

    /**
     * Gets wix_app_secret_key
     *
     * @return string
     */
    public function getWixAppSecretKey()
    {
        return $this->container['wix_app_secret_key'];
    }

    /**
     * Sets wix_app_secret_key
     *
     * @param string $wix_app_secret_key Wix App Secret Key
     *
     * @return self
     */
    public function setWixAppSecretKey($wix_app_secret_key)
    {
        if (is_null($wix_app_secret_key)) {
            throw new \InvalidArgumentException('non-nullable wix_app_secret_key cannot be null');
        }
        $this->container['wix_app_secret_key'] = $wix_app_secret_key;

        return $this;
    }

    /**
     * Gets wix_instance_id
     *
     * @return string|null
     */
    public function getWixInstanceId()
    {
        return $this->container['wix_instance_id'];
    }

    /**
     * Sets wix_instance_id
     *
     * @param string|null $wix_instance_id Wix Instance ID
     *
     * @return self
     */
    public function setWixInstanceId($wix_instance_id)
    {
        if (is_null($wix_instance_id)) {
            throw new \InvalidArgumentException('non-nullable wix_instance_id cannot be null');
        }
        $this->container['wix_instance_id'] = $wix_instance_id;

        return $this;
    }

    /**
     * Gets wix_refresh_token
     *
     * @return string|null
     */
    public function getWixRefreshToken()
    {
        return $this->container['wix_refresh_token'];
    }

    /**
     * Sets wix_refresh_token
     *
     * @param string|null $wix_refresh_token Wix refresh token
     *
     * @return self
     */
    public function setWixRefreshToken($wix_refresh_token)
    {
        if (is_null($wix_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable wix_refresh_token cannot be null');
        }
        $this->container['wix_refresh_token'] = $wix_refresh_token;

        return $this;
    }

    /**
     * Gets mercado_libre_app_id
     *
     * @return string|null
     */
    public function getMercadoLibreAppId()
    {
        return $this->container['mercado_libre_app_id'];
    }

    /**
     * Sets mercado_libre_app_id
     *
     * @param string|null $mercado_libre_app_id Mercado Libre App ID
     *
     * @return self
     */
    public function setMercadoLibreAppId($mercado_libre_app_id)
    {
        if (is_null($mercado_libre_app_id)) {
            throw new \InvalidArgumentException('non-nullable mercado_libre_app_id cannot be null');
        }
        $this->container['mercado_libre_app_id'] = $mercado_libre_app_id;

        return $this;
    }

    /**
     * Gets mercado_libre_app_secret_key
     *
     * @return string|null
     */
    public function getMercadoLibreAppSecretKey()
    {
        return $this->container['mercado_libre_app_secret_key'];
    }

    /**
     * Sets mercado_libre_app_secret_key
     *
     * @param string|null $mercado_libre_app_secret_key Mercado Libre App Secret Key
     *
     * @return self
     */
    public function setMercadoLibreAppSecretKey($mercado_libre_app_secret_key)
    {
        if (is_null($mercado_libre_app_secret_key)) {
            throw new \InvalidArgumentException('non-nullable mercado_libre_app_secret_key cannot be null');
        }
        $this->container['mercado_libre_app_secret_key'] = $mercado_libre_app_secret_key;

        return $this;
    }

    /**
     * Gets mercado_libre_refresh_token
     *
     * @return string|null
     */
    public function getMercadoLibreRefreshToken()
    {
        return $this->container['mercado_libre_refresh_token'];
    }

    /**
     * Sets mercado_libre_refresh_token
     *
     * @param string|null $mercado_libre_refresh_token Mercado Libre Refresh Token
     *
     * @return self
     */
    public function setMercadoLibreRefreshToken($mercado_libre_refresh_token)
    {
        if (is_null($mercado_libre_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable mercado_libre_refresh_token cannot be null');
        }
        $this->container['mercado_libre_refresh_token'] = $mercado_libre_refresh_token;

        return $this;
    }

    /**
     * Gets zid_client_id
     *
     * @return int|null
     */
    public function getZidClientId()
    {
        return $this->container['zid_client_id'];
    }

    /**
     * Sets zid_client_id
     *
     * @param int|null $zid_client_id Zid Client ID
     *
     * @return self
     */
    public function setZidClientId($zid_client_id)
    {
        if (is_null($zid_client_id)) {
            throw new \InvalidArgumentException('non-nullable zid_client_id cannot be null');
        }
        $this->container['zid_client_id'] = $zid_client_id;

        return $this;
    }

    /**
     * Gets zid_client_secret
     *
     * @return string|null
     */
    public function getZidClientSecret()
    {
        return $this->container['zid_client_secret'];
    }

    /**
     * Sets zid_client_secret
     *
     * @param string|null $zid_client_secret Zid Client Secret
     *
     * @return self
     */
    public function setZidClientSecret($zid_client_secret)
    {
        if (is_null($zid_client_secret)) {
            throw new \InvalidArgumentException('non-nullable zid_client_secret cannot be null');
        }
        $this->container['zid_client_secret'] = $zid_client_secret;

        return $this;
    }

    /**
     * Gets zid_access_token
     *
     * @return string|null
     */
    public function getZidAccessToken()
    {
        return $this->container['zid_access_token'];
    }

    /**
     * Sets zid_access_token
     *
     * @param string|null $zid_access_token Zid Access Token
     *
     * @return self
     */
    public function setZidAccessToken($zid_access_token)
    {
        if (is_null($zid_access_token)) {
            throw new \InvalidArgumentException('non-nullable zid_access_token cannot be null');
        }
        $this->container['zid_access_token'] = $zid_access_token;

        return $this;
    }

    /**
     * Gets zid_authorization
     *
     * @return string|null
     */
    public function getZidAuthorization()
    {
        return $this->container['zid_authorization'];
    }

    /**
     * Sets zid_authorization
     *
     * @param string|null $zid_authorization Zid Authorization
     *
     * @return self
     */
    public function setZidAuthorization($zid_authorization)
    {
        if (is_null($zid_authorization)) {
            throw new \InvalidArgumentException('non-nullable zid_authorization cannot be null');
        }
        $this->container['zid_authorization'] = $zid_authorization;

        return $this;
    }

    /**
     * Gets zid_refresh_token
     *
     * @return string|null
     */
    public function getZidRefreshToken()
    {
        return $this->container['zid_refresh_token'];
    }

    /**
     * Sets zid_refresh_token
     *
     * @param string|null $zid_refresh_token Zid refresh token
     *
     * @return self
     */
    public function setZidRefreshToken($zid_refresh_token)
    {
        if (is_null($zid_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable zid_refresh_token cannot be null');
        }
        $this->container['zid_refresh_token'] = $zid_refresh_token;

        return $this;
    }

    /**
     * Gets flipkart_client_id
     *
     * @return string|null
     */
    public function getFlipkartClientId()
    {
        return $this->container['flipkart_client_id'];
    }

    /**
     * Sets flipkart_client_id
     *
     * @param string|null $flipkart_client_id Flipkart Client ID
     *
     * @return self
     */
    public function setFlipkartClientId($flipkart_client_id)
    {
        if (is_null($flipkart_client_id)) {
            throw new \InvalidArgumentException('non-nullable flipkart_client_id cannot be null');
        }
        $this->container['flipkart_client_id'] = $flipkart_client_id;

        return $this;
    }

    /**
     * Gets flipkart_client_secret
     *
     * @return string|null
     */
    public function getFlipkartClientSecret()
    {
        return $this->container['flipkart_client_secret'];
    }

    /**
     * Sets flipkart_client_secret
     *
     * @param string|null $flipkart_client_secret Flipkart Client Secret
     *
     * @return self
     */
    public function setFlipkartClientSecret($flipkart_client_secret)
    {
        if (is_null($flipkart_client_secret)) {
            throw new \InvalidArgumentException('non-nullable flipkart_client_secret cannot be null');
        }
        $this->container['flipkart_client_secret'] = $flipkart_client_secret;

        return $this;
    }

    /**
     * Gets allegro_client_id
     *
     * @return string|null
     */
    public function getAllegroClientId()
    {
        return $this->container['allegro_client_id'];
    }

    /**
     * Sets allegro_client_id
     *
     * @param string|null $allegro_client_id Allegro Client ID
     *
     * @return self
     */
    public function setAllegroClientId($allegro_client_id)
    {
        if (is_null($allegro_client_id)) {
            throw new \InvalidArgumentException('non-nullable allegro_client_id cannot be null');
        }
        $this->container['allegro_client_id'] = $allegro_client_id;

        return $this;
    }

    /**
     * Gets allegro_client_secret
     *
     * @return string|null
     */
    public function getAllegroClientSecret()
    {
        return $this->container['allegro_client_secret'];
    }

    /**
     * Sets allegro_client_secret
     *
     * @param string|null $allegro_client_secret Allegro Client Secret
     *
     * @return self
     */
    public function setAllegroClientSecret($allegro_client_secret)
    {
        if (is_null($allegro_client_secret)) {
            throw new \InvalidArgumentException('non-nullable allegro_client_secret cannot be null');
        }
        $this->container['allegro_client_secret'] = $allegro_client_secret;

        return $this;
    }

    /**
     * Gets allegro_access_token
     *
     * @return string|null
     */
    public function getAllegroAccessToken()
    {
        return $this->container['allegro_access_token'];
    }

    /**
     * Sets allegro_access_token
     *
     * @param string|null $allegro_access_token Allegro Access Token
     *
     * @return self
     */
    public function setAllegroAccessToken($allegro_access_token)
    {
        if (is_null($allegro_access_token)) {
            throw new \InvalidArgumentException('non-nullable allegro_access_token cannot be null');
        }
        $this->container['allegro_access_token'] = $allegro_access_token;

        return $this;
    }

    /**
     * Gets allegro_refresh_token
     *
     * @return string|null
     */
    public function getAllegroRefreshToken()
    {
        return $this->container['allegro_refresh_token'];
    }

    /**
     * Sets allegro_refresh_token
     *
     * @param string|null $allegro_refresh_token Allegro Refresh Token
     *
     * @return self
     */
    public function setAllegroRefreshToken($allegro_refresh_token)
    {
        if (is_null($allegro_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable allegro_refresh_token cannot be null');
        }
        $this->container['allegro_refresh_token'] = $allegro_refresh_token;

        return $this;
    }

    /**
     * Gets allegro_environment
     *
     * @return string|null
     */
    public function getAllegroEnvironment()
    {
        return $this->container['allegro_environment'];
    }

    /**
     * Sets allegro_environment
     *
     * @param string|null $allegro_environment Allegro Environment
     *
     * @return self
     */
    public function setAllegroEnvironment($allegro_environment)
    {
        if (is_null($allegro_environment)) {
            throw new \InvalidArgumentException('non-nullable allegro_environment cannot be null');
        }
        $this->container['allegro_environment'] = $allegro_environment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


