<?php
/**
 * CartStoreInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CartStoreInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CartStoreInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cart_StoreInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'store_id' => 'string',
        'name' => 'string',
        'language' => 'string',
        'store_languages' => '\OpenAPI\Client\Model\Language[]',
        'currency' => '\OpenAPI\Client\Model\Currency',
        'store_currencies' => '\OpenAPI\Client\Model\Currency[]',
        'timezone' => 'string',
        'country' => 'string',
        'root_category_id' => 'string',
        'multi_store_url' => 'string',
        'active' => 'bool',
        'weight_unit' => 'string',
        'dimension_unit' => 'string',
        'prices_include_tax' => 'bool',
        'carrier_info' => '\OpenAPI\Client\Model\Carrier[]',
        'store_owner_info' => '\OpenAPI\Client\Model\Info',
        'default_warehouse_id' => 'string',
        'channels' => '\OpenAPI\Client\Model\CartChannel[]',
        'additional_fields' => 'object',
        'custom_fields' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'store_id' => null,
        'name' => null,
        'language' => null,
        'store_languages' => null,
        'currency' => null,
        'store_currencies' => null,
        'timezone' => null,
        'country' => null,
        'root_category_id' => null,
        'multi_store_url' => null,
        'active' => null,
        'weight_unit' => null,
        'dimension_unit' => null,
        'prices_include_tax' => null,
        'carrier_info' => null,
        'store_owner_info' => null,
        'default_warehouse_id' => null,
        'channels' => null,
        'additional_fields' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'store_id' => false,
        'name' => true,
        'language' => true,
        'store_languages' => false,
        'currency' => false,
        'store_currencies' => false,
        'timezone' => true,
        'country' => true,
        'root_category_id' => true,
        'multi_store_url' => true,
        'active' => true,
        'weight_unit' => true,
        'dimension_unit' => true,
        'prices_include_tax' => true,
        'carrier_info' => false,
        'store_owner_info' => true,
        'default_warehouse_id' => true,
        'channels' => false,
        'additional_fields' => true,
        'custom_fields' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store_id' => 'store_id',
        'name' => 'name',
        'language' => 'language',
        'store_languages' => 'store_languages',
        'currency' => 'currency',
        'store_currencies' => 'store_currencies',
        'timezone' => 'timezone',
        'country' => 'country',
        'root_category_id' => 'root_category_id',
        'multi_store_url' => 'multi_store_url',
        'active' => 'active',
        'weight_unit' => 'weight_unit',
        'dimension_unit' => 'dimension_unit',
        'prices_include_tax' => 'prices_include_tax',
        'carrier_info' => 'carrier_info',
        'store_owner_info' => 'store_owner_info',
        'default_warehouse_id' => 'default_warehouse_id',
        'channels' => 'channels',
        'additional_fields' => 'additional_fields',
        'custom_fields' => 'custom_fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store_id' => 'setStoreId',
        'name' => 'setName',
        'language' => 'setLanguage',
        'store_languages' => 'setStoreLanguages',
        'currency' => 'setCurrency',
        'store_currencies' => 'setStoreCurrencies',
        'timezone' => 'setTimezone',
        'country' => 'setCountry',
        'root_category_id' => 'setRootCategoryId',
        'multi_store_url' => 'setMultiStoreUrl',
        'active' => 'setActive',
        'weight_unit' => 'setWeightUnit',
        'dimension_unit' => 'setDimensionUnit',
        'prices_include_tax' => 'setPricesIncludeTax',
        'carrier_info' => 'setCarrierInfo',
        'store_owner_info' => 'setStoreOwnerInfo',
        'default_warehouse_id' => 'setDefaultWarehouseId',
        'channels' => 'setChannels',
        'additional_fields' => 'setAdditionalFields',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store_id' => 'getStoreId',
        'name' => 'getName',
        'language' => 'getLanguage',
        'store_languages' => 'getStoreLanguages',
        'currency' => 'getCurrency',
        'store_currencies' => 'getStoreCurrencies',
        'timezone' => 'getTimezone',
        'country' => 'getCountry',
        'root_category_id' => 'getRootCategoryId',
        'multi_store_url' => 'getMultiStoreUrl',
        'active' => 'getActive',
        'weight_unit' => 'getWeightUnit',
        'dimension_unit' => 'getDimensionUnit',
        'prices_include_tax' => 'getPricesIncludeTax',
        'carrier_info' => 'getCarrierInfo',
        'store_owner_info' => 'getStoreOwnerInfo',
        'default_warehouse_id' => 'getDefaultWarehouseId',
        'channels' => 'getChannels',
        'additional_fields' => 'getAdditionalFields',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('store_languages', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('store_currencies', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('root_category_id', $data ?? [], null);
        $this->setIfExists('multi_store_url', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('dimension_unit', $data ?? [], null);
        $this->setIfExists('prices_include_tax', $data ?? [], null);
        $this->setIfExists('carrier_info', $data ?? [], null);
        $this->setIfExists('store_owner_info', $data ?? [], null);
        $this->setIfExists('default_warehouse_id', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('additional_fields', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id store_id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets store_languages
     *
     * @return \OpenAPI\Client\Model\Language[]|null
     */
    public function getStoreLanguages()
    {
        return $this->container['store_languages'];
    }

    /**
     * Sets store_languages
     *
     * @param \OpenAPI\Client\Model\Language[]|null $store_languages store_languages
     *
     * @return self
     */
    public function setStoreLanguages($store_languages)
    {
        if (is_null($store_languages)) {
            throw new \InvalidArgumentException('non-nullable store_languages cannot be null');
        }
        $this->container['store_languages'] = $store_languages;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\Currency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\Currency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets store_currencies
     *
     * @return \OpenAPI\Client\Model\Currency[]|null
     */
    public function getStoreCurrencies()
    {
        return $this->container['store_currencies'];
    }

    /**
     * Sets store_currencies
     *
     * @param \OpenAPI\Client\Model\Currency[]|null $store_currencies store_currencies
     *
     * @return self
     */
    public function setStoreCurrencies($store_currencies)
    {
        if (is_null($store_currencies)) {
            throw new \InvalidArgumentException('non-nullable store_currencies cannot be null');
        }
        $this->container['store_currencies'] = $store_currencies;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            array_push($this->openAPINullablesSetToNull, 'timezone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timezone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets root_category_id
     *
     * @return string|null
     */
    public function getRootCategoryId()
    {
        return $this->container['root_category_id'];
    }

    /**
     * Sets root_category_id
     *
     * @param string|null $root_category_id root_category_id
     *
     * @return self
     */
    public function setRootCategoryId($root_category_id)
    {
        if (is_null($root_category_id)) {
            array_push($this->openAPINullablesSetToNull, 'root_category_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('root_category_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['root_category_id'] = $root_category_id;

        return $this;
    }

    /**
     * Gets multi_store_url
     *
     * @return string|null
     */
    public function getMultiStoreUrl()
    {
        return $this->container['multi_store_url'];
    }

    /**
     * Sets multi_store_url
     *
     * @param string|null $multi_store_url multi_store_url
     *
     * @return self
     */
    public function setMultiStoreUrl($multi_store_url)
    {
        if (is_null($multi_store_url)) {
            array_push($this->openAPINullablesSetToNull, 'multi_store_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('multi_store_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['multi_store_url'] = $multi_store_url;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            array_push($this->openAPINullablesSetToNull, 'active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string|null $weight_unit weight_unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            array_push($this->openAPINullablesSetToNull, 'weight_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets dimension_unit
     *
     * @return string|null
     */
    public function getDimensionUnit()
    {
        return $this->container['dimension_unit'];
    }

    /**
     * Sets dimension_unit
     *
     * @param string|null $dimension_unit dimension_unit
     *
     * @return self
     */
    public function setDimensionUnit($dimension_unit)
    {
        if (is_null($dimension_unit)) {
            array_push($this->openAPINullablesSetToNull, 'dimension_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dimension_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dimension_unit'] = $dimension_unit;

        return $this;
    }

    /**
     * Gets prices_include_tax
     *
     * @return bool|null
     */
    public function getPricesIncludeTax()
    {
        return $this->container['prices_include_tax'];
    }

    /**
     * Sets prices_include_tax
     *
     * @param bool|null $prices_include_tax prices_include_tax
     *
     * @return self
     */
    public function setPricesIncludeTax($prices_include_tax)
    {
        if (is_null($prices_include_tax)) {
            array_push($this->openAPINullablesSetToNull, 'prices_include_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prices_include_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prices_include_tax'] = $prices_include_tax;

        return $this;
    }

    /**
     * Gets carrier_info
     *
     * @return \OpenAPI\Client\Model\Carrier[]|null
     */
    public function getCarrierInfo()
    {
        return $this->container['carrier_info'];
    }

    /**
     * Sets carrier_info
     *
     * @param \OpenAPI\Client\Model\Carrier[]|null $carrier_info carrier_info
     *
     * @return self
     */
    public function setCarrierInfo($carrier_info)
    {
        if (is_null($carrier_info)) {
            throw new \InvalidArgumentException('non-nullable carrier_info cannot be null');
        }
        $this->container['carrier_info'] = $carrier_info;

        return $this;
    }

    /**
     * Gets store_owner_info
     *
     * @return \OpenAPI\Client\Model\Info|null
     */
    public function getStoreOwnerInfo()
    {
        return $this->container['store_owner_info'];
    }

    /**
     * Sets store_owner_info
     *
     * @param \OpenAPI\Client\Model\Info|null $store_owner_info store_owner_info
     *
     * @return self
     */
    public function setStoreOwnerInfo($store_owner_info)
    {
        if (is_null($store_owner_info)) {
            array_push($this->openAPINullablesSetToNull, 'store_owner_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('store_owner_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['store_owner_info'] = $store_owner_info;

        return $this;
    }

    /**
     * Gets default_warehouse_id
     *
     * @return string|null
     */
    public function getDefaultWarehouseId()
    {
        return $this->container['default_warehouse_id'];
    }

    /**
     * Sets default_warehouse_id
     *
     * @param string|null $default_warehouse_id default_warehouse_id
     *
     * @return self
     */
    public function setDefaultWarehouseId($default_warehouse_id)
    {
        if (is_null($default_warehouse_id)) {
            array_push($this->openAPINullablesSetToNull, 'default_warehouse_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_warehouse_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_warehouse_id'] = $default_warehouse_id;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \OpenAPI\Client\Model\CartChannel[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \OpenAPI\Client\Model\CartChannel[]|null $channels channels
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets additional_fields
     *
     * @return object|null
     */
    public function getAdditionalFields()
    {
        return $this->container['additional_fields'];
    }

    /**
     * Sets additional_fields
     *
     * @param object|null $additional_fields additional_fields
     *
     * @return self
     */
    public function setAdditionalFields($additional_fields)
    {
        if (is_null($additional_fields)) {
            array_push($this->openAPINullablesSetToNull, 'additional_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_fields'] = $additional_fields;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            array_push($this->openAPINullablesSetToNull, 'custom_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


