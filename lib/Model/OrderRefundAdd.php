<?php
/**
 * OrderRefundAdd
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderRefundAdd Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderRefundAdd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderRefundAdd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'string',
        'items' => '\OpenAPI\Client\Model\OrderRefundAddItemsInner[]',
        'total_price' => 'float',
        'shipping_price' => 'float',
        'fee_price' => 'float',
        'message' => 'string',
        'item_restock' => 'bool',
        'send_notifications' => 'bool',
        'date' => 'string',
        'is_online' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_id' => null,
        'items' => null,
        'total_price' => null,
        'shipping_price' => null,
        'fee_price' => null,
        'message' => null,
        'item_restock' => null,
        'send_notifications' => null,
        'date' => null,
        'is_online' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_id' => false,
        'items' => false,
        'total_price' => false,
        'shipping_price' => false,
        'fee_price' => false,
        'message' => false,
        'item_restock' => false,
        'send_notifications' => false,
        'date' => false,
        'is_online' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
        'items' => 'items',
        'total_price' => 'total_price',
        'shipping_price' => 'shipping_price',
        'fee_price' => 'fee_price',
        'message' => 'message',
        'item_restock' => 'item_restock',
        'send_notifications' => 'send_notifications',
        'date' => 'date',
        'is_online' => 'is_online'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'items' => 'setItems',
        'total_price' => 'setTotalPrice',
        'shipping_price' => 'setShippingPrice',
        'fee_price' => 'setFeePrice',
        'message' => 'setMessage',
        'item_restock' => 'setItemRestock',
        'send_notifications' => 'setSendNotifications',
        'date' => 'setDate',
        'is_online' => 'setIsOnline'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'items' => 'getItems',
        'total_price' => 'getTotalPrice',
        'shipping_price' => 'getShippingPrice',
        'fee_price' => 'getFeePrice',
        'message' => 'getMessage',
        'item_restock' => 'getItemRestock',
        'send_notifications' => 'getSendNotifications',
        'date' => 'getDate',
        'is_online' => 'getIsOnline'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('shipping_price', $data ?? [], null);
        $this->setIfExists('fee_price', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('item_restock', $data ?? [], false);
        $this->setIfExists('send_notifications', $data ?? [], false);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('is_online', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Defines the order for which the refund will be created.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\OrderRefundAddItemsInner[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\OrderRefundAddItemsInner[]|null $items Defines items in the order that will be refunded
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float|null $total_price Defines order refund amount.
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets shipping_price
     *
     * @return float|null
     */
    public function getShippingPrice()
    {
        return $this->container['shipping_price'];
    }

    /**
     * Sets shipping_price
     *
     * @param float|null $shipping_price Defines refund shipping amount.
     *
     * @return self
     */
    public function setShippingPrice($shipping_price)
    {
        if (is_null($shipping_price)) {
            throw new \InvalidArgumentException('non-nullable shipping_price cannot be null');
        }
        $this->container['shipping_price'] = $shipping_price;

        return $this;
    }

    /**
     * Gets fee_price
     *
     * @return float|null
     */
    public function getFeePrice()
    {
        return $this->container['fee_price'];
    }

    /**
     * Sets fee_price
     *
     * @param float|null $fee_price Specifies refund's fee price
     *
     * @return self
     */
    public function setFeePrice($fee_price)
    {
        if (is_null($fee_price)) {
            throw new \InvalidArgumentException('non-nullable fee_price cannot be null');
        }
        $this->container['fee_price'] = $fee_price;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message Refund reason, or some else message which assigned to refund.
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets item_restock
     *
     * @return bool|null
     */
    public function getItemRestock()
    {
        return $this->container['item_restock'];
    }

    /**
     * Sets item_restock
     *
     * @param bool|null $item_restock Boolean, whether or not to add the line items back to the store inventory.
     *
     * @return self
     */
    public function setItemRestock($item_restock)
    {
        if (is_null($item_restock)) {
            throw new \InvalidArgumentException('non-nullable item_restock cannot be null');
        }
        $this->container['item_restock'] = $item_restock;

        return $this;
    }

    /**
     * Gets send_notifications
     *
     * @return bool|null
     */
    public function getSendNotifications()
    {
        return $this->container['send_notifications'];
    }

    /**
     * Sets send_notifications
     *
     * @param bool|null $send_notifications Send notifications to customer after refund was created
     *
     * @return self
     */
    public function setSendNotifications($send_notifications)
    {
        if (is_null($send_notifications)) {
            throw new \InvalidArgumentException('non-nullable send_notifications cannot be null');
        }
        $this->container['send_notifications'] = $send_notifications;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date Specifies an order creation date in format Y-m-d H:i:s
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets is_online
     *
     * @return bool|null
     */
    public function getIsOnline()
    {
        return $this->container['is_online'];
    }

    /**
     * Sets is_online
     *
     * @param bool|null $is_online Indicates whether refund type is online
     *
     * @return self
     */
    public function setIsOnline($is_online)
    {
        if (is_null($is_online)) {
            throw new \InvalidArgumentException('non-nullable is_online cannot be null');
        }
        $this->container['is_online'] = $is_online;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


