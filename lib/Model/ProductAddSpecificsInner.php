<?php
/**
 * ProductAddSpecificsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductAddSpecificsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductAddSpecificsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductAdd_specifics_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'value' => 'string',
        'values' => 'string[]',
        'used_for_variations' => 'bool',
        'scale_id' => 'int',
        'food_details' => '\OpenAPI\Client\Model\ProductAddSpecificsInnerFoodDetails',
        'group_products_details' => '\OpenAPI\Client\Model\ProductAddSpecificsInnerGroupProductsDetailsInner[]',
        'booking_details' => '\OpenAPI\Client\Model\ProductAddSpecificsInnerBookingDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'value' => null,
        'values' => null,
        'used_for_variations' => null,
        'scale_id' => null,
        'food_details' => null,
        'group_products_details' => null,
        'booking_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'value' => false,
        'values' => false,
        'used_for_variations' => false,
        'scale_id' => true,
        'food_details' => false,
        'group_products_details' => false,
        'booking_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'value' => 'value',
        'values' => 'values',
        'used_for_variations' => 'used_for_variations',
        'scale_id' => 'scale_id',
        'food_details' => 'food_details',
        'group_products_details' => 'group_products_details',
        'booking_details' => 'booking_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'value' => 'setValue',
        'values' => 'setValues',
        'used_for_variations' => 'setUsedForVariations',
        'scale_id' => 'setScaleId',
        'food_details' => 'setFoodDetails',
        'group_products_details' => 'setGroupProductsDetails',
        'booking_details' => 'setBookingDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'value' => 'getValue',
        'values' => 'getValues',
        'used_for_variations' => 'getUsedForVariations',
        'scale_id' => 'getScaleId',
        'food_details' => 'getFoodDetails',
        'group_products_details' => 'getGroupProductsDetails',
        'booking_details' => 'getBookingDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('values', $data ?? [], null);
        $this->setIfExists('used_for_variations', $data ?? [], false);
        $this->setIfExists('scale_id', $data ?? [], null);
        $this->setIfExists('food_details', $data ?? [], null);
        $this->setIfExists('group_products_details', $data ?? [], null);
        $this->setIfExists('booking_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['values']) && (count($this->container['values']) < 1)) {
            $invalidProperties[] = "invalid value for 'values', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['group_products_details']) && (count($this->container['group_products_details']) < 1)) {
            $invalidProperties[] = "invalid value for 'group_products_details', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets values
     *
     * @return string[]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param string[]|null $values values
     *
     * @return self
     */
    public function setValues($values)
    {
        if (is_null($values)) {
            throw new \InvalidArgumentException('non-nullable values cannot be null');
        }


        if ((count($values) < 1)) {
            throw new \InvalidArgumentException('invalid length for $values when calling ProductAddSpecificsInner., number of items must be greater than or equal to 1.');
        }
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets used_for_variations
     *
     * @return bool|null
     */
    public function getUsedForVariations()
    {
        return $this->container['used_for_variations'];
    }

    /**
     * Sets used_for_variations
     *
     * @param bool|null $used_for_variations used_for_variations
     *
     * @return self
     */
    public function setUsedForVariations($used_for_variations)
    {
        if (is_null($used_for_variations)) {
            throw new \InvalidArgumentException('non-nullable used_for_variations cannot be null');
        }
        $this->container['used_for_variations'] = $used_for_variations;

        return $this;
    }

    /**
     * Gets scale_id
     *
     * @return int|null
     */
    public function getScaleId()
    {
        return $this->container['scale_id'];
    }

    /**
     * Sets scale_id
     *
     * @param int|null $scale_id scale_id
     *
     * @return self
     */
    public function setScaleId($scale_id)
    {
        if (is_null($scale_id)) {
            array_push($this->openAPINullablesSetToNull, 'scale_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scale_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scale_id'] = $scale_id;

        return $this;
    }

    /**
     * Gets food_details
     *
     * @return \OpenAPI\Client\Model\ProductAddSpecificsInnerFoodDetails|null
     */
    public function getFoodDetails()
    {
        return $this->container['food_details'];
    }

    /**
     * Sets food_details
     *
     * @param \OpenAPI\Client\Model\ProductAddSpecificsInnerFoodDetails|null $food_details food_details
     *
     * @return self
     */
    public function setFoodDetails($food_details)
    {
        if (is_null($food_details)) {
            throw new \InvalidArgumentException('non-nullable food_details cannot be null');
        }
        $this->container['food_details'] = $food_details;

        return $this;
    }

    /**
     * Gets group_products_details
     *
     * @return \OpenAPI\Client\Model\ProductAddSpecificsInnerGroupProductsDetailsInner[]|null
     */
    public function getGroupProductsDetails()
    {
        return $this->container['group_products_details'];
    }

    /**
     * Sets group_products_details
     *
     * @param \OpenAPI\Client\Model\ProductAddSpecificsInnerGroupProductsDetailsInner[]|null $group_products_details group_products_details
     *
     * @return self
     */
    public function setGroupProductsDetails($group_products_details)
    {
        if (is_null($group_products_details)) {
            throw new \InvalidArgumentException('non-nullable group_products_details cannot be null');
        }


        if ((count($group_products_details) < 1)) {
            throw new \InvalidArgumentException('invalid length for $group_products_details when calling ProductAddSpecificsInner., number of items must be greater than or equal to 1.');
        }
        $this->container['group_products_details'] = $group_products_details;

        return $this;
    }

    /**
     * Gets booking_details
     *
     * @return \OpenAPI\Client\Model\ProductAddSpecificsInnerBookingDetails|null
     */
    public function getBookingDetails()
    {
        return $this->container['booking_details'];
    }

    /**
     * Sets booking_details
     *
     * @param \OpenAPI\Client\Model\ProductAddSpecificsInnerBookingDetails|null $booking_details booking_details
     *
     * @return self
     */
    public function setBookingDetails($booking_details)
    {
        if (is_null($booking_details)) {
            throw new \InvalidArgumentException('non-nullable booking_details cannot be null');
        }
        $this->container['booking_details'] = $booking_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


