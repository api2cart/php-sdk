<?php
/**
 * OrderAddOrderItemInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderAddOrderItemInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderAddOrderItemInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderAdd_order_item_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_item_id' => 'string',
        'order_item_name' => 'string',
        'order_item_model' => 'string',
        'order_item_price' => 'float',
        'order_item_quantity' => 'int',
        'order_item_weight' => 'float',
        'order_item_variant_id' => 'string',
        'order_item_tax' => 'float',
        'order_item_tax_class' => 'string',
        'order_item_price_includes_tax' => 'bool',
        'order_item_parent' => 'int',
        'order_item_parent_option_name' => 'string',
        'order_item_allow_refund_items_separately' => 'bool',
        'order_item_allow_ship_items_separately' => 'bool',
        'order_item_option' => '\OpenAPI\Client\Model\OrderAddOrderItemInnerOrderItemOptionInner[]',
        'order_item_property' => '\OpenAPI\Client\Model\OrderAddOrderItemInnerOrderItemPropertyInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_item_id' => null,
        'order_item_name' => null,
        'order_item_model' => null,
        'order_item_price' => null,
        'order_item_quantity' => null,
        'order_item_weight' => null,
        'order_item_variant_id' => null,
        'order_item_tax' => null,
        'order_item_tax_class' => null,
        'order_item_price_includes_tax' => null,
        'order_item_parent' => null,
        'order_item_parent_option_name' => null,
        'order_item_allow_refund_items_separately' => null,
        'order_item_allow_ship_items_separately' => null,
        'order_item_option' => null,
        'order_item_property' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_item_id' => false,
        'order_item_name' => false,
        'order_item_model' => false,
        'order_item_price' => false,
        'order_item_quantity' => false,
        'order_item_weight' => false,
        'order_item_variant_id' => false,
        'order_item_tax' => false,
        'order_item_tax_class' => false,
        'order_item_price_includes_tax' => false,
        'order_item_parent' => false,
        'order_item_parent_option_name' => false,
        'order_item_allow_refund_items_separately' => false,
        'order_item_allow_ship_items_separately' => false,
        'order_item_option' => false,
        'order_item_property' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_item_id' => 'order_item_id',
        'order_item_name' => 'order_item_name',
        'order_item_model' => 'order_item_model',
        'order_item_price' => 'order_item_price',
        'order_item_quantity' => 'order_item_quantity',
        'order_item_weight' => 'order_item_weight',
        'order_item_variant_id' => 'order_item_variant_id',
        'order_item_tax' => 'order_item_tax',
        'order_item_tax_class' => 'order_item_tax_class',
        'order_item_price_includes_tax' => 'order_item_price_includes_tax',
        'order_item_parent' => 'order_item_parent',
        'order_item_parent_option_name' => 'order_item_parent_option_name',
        'order_item_allow_refund_items_separately' => 'order_item_allow_refund_items_separately',
        'order_item_allow_ship_items_separately' => 'order_item_allow_ship_items_separately',
        'order_item_option' => 'order_item_option',
        'order_item_property' => 'order_item_property'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_item_id' => 'setOrderItemId',
        'order_item_name' => 'setOrderItemName',
        'order_item_model' => 'setOrderItemModel',
        'order_item_price' => 'setOrderItemPrice',
        'order_item_quantity' => 'setOrderItemQuantity',
        'order_item_weight' => 'setOrderItemWeight',
        'order_item_variant_id' => 'setOrderItemVariantId',
        'order_item_tax' => 'setOrderItemTax',
        'order_item_tax_class' => 'setOrderItemTaxClass',
        'order_item_price_includes_tax' => 'setOrderItemPriceIncludesTax',
        'order_item_parent' => 'setOrderItemParent',
        'order_item_parent_option_name' => 'setOrderItemParentOptionName',
        'order_item_allow_refund_items_separately' => 'setOrderItemAllowRefundItemsSeparately',
        'order_item_allow_ship_items_separately' => 'setOrderItemAllowShipItemsSeparately',
        'order_item_option' => 'setOrderItemOption',
        'order_item_property' => 'setOrderItemProperty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_item_id' => 'getOrderItemId',
        'order_item_name' => 'getOrderItemName',
        'order_item_model' => 'getOrderItemModel',
        'order_item_price' => 'getOrderItemPrice',
        'order_item_quantity' => 'getOrderItemQuantity',
        'order_item_weight' => 'getOrderItemWeight',
        'order_item_variant_id' => 'getOrderItemVariantId',
        'order_item_tax' => 'getOrderItemTax',
        'order_item_tax_class' => 'getOrderItemTaxClass',
        'order_item_price_includes_tax' => 'getOrderItemPriceIncludesTax',
        'order_item_parent' => 'getOrderItemParent',
        'order_item_parent_option_name' => 'getOrderItemParentOptionName',
        'order_item_allow_refund_items_separately' => 'getOrderItemAllowRefundItemsSeparately',
        'order_item_allow_ship_items_separately' => 'getOrderItemAllowShipItemsSeparately',
        'order_item_option' => 'getOrderItemOption',
        'order_item_property' => 'getOrderItemProperty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('order_item_id', $data ?? [], null);
        $this->setIfExists('order_item_name', $data ?? [], null);
        $this->setIfExists('order_item_model', $data ?? [], null);
        $this->setIfExists('order_item_price', $data ?? [], null);
        $this->setIfExists('order_item_quantity', $data ?? [], null);
        $this->setIfExists('order_item_weight', $data ?? [], null);
        $this->setIfExists('order_item_variant_id', $data ?? [], null);
        $this->setIfExists('order_item_tax', $data ?? [], 0);
        $this->setIfExists('order_item_tax_class', $data ?? [], null);
        $this->setIfExists('order_item_price_includes_tax', $data ?? [], false);
        $this->setIfExists('order_item_parent', $data ?? [], null);
        $this->setIfExists('order_item_parent_option_name', $data ?? [], null);
        $this->setIfExists('order_item_allow_refund_items_separately', $data ?? [], null);
        $this->setIfExists('order_item_allow_ship_items_separately', $data ?? [], null);
        $this->setIfExists('order_item_option', $data ?? [], null);
        $this->setIfExists('order_item_property', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_item_id'] === null) {
            $invalidProperties[] = "'order_item_id' can't be null";
        }
        if ($this->container['order_item_name'] === null) {
            $invalidProperties[] = "'order_item_name' can't be null";
        }
        if ($this->container['order_item_price'] === null) {
            $invalidProperties[] = "'order_item_price' can't be null";
        }
        if ($this->container['order_item_quantity'] === null) {
            $invalidProperties[] = "'order_item_quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_item_id
     *
     * @return string
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param string $order_item_id Defines orders specified by order item id
     *
     * @return self
     */
    public function setOrderItemId($order_item_id)
    {
        if (is_null($order_item_id)) {
            throw new \InvalidArgumentException('non-nullable order_item_id cannot be null');
        }
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets order_item_name
     *
     * @return string
     */
    public function getOrderItemName()
    {
        return $this->container['order_item_name'];
    }

    /**
     * Sets order_item_name
     *
     * @param string $order_item_name Defines orders specified by order item name
     *
     * @return self
     */
    public function setOrderItemName($order_item_name)
    {
        if (is_null($order_item_name)) {
            throw new \InvalidArgumentException('non-nullable order_item_name cannot be null');
        }
        $this->container['order_item_name'] = $order_item_name;

        return $this;
    }

    /**
     * Gets order_item_model
     *
     * @return string|null
     */
    public function getOrderItemModel()
    {
        return $this->container['order_item_model'];
    }

    /**
     * Sets order_item_model
     *
     * @param string|null $order_item_model Defines orders specified by order item model
     *
     * @return self
     */
    public function setOrderItemModel($order_item_model)
    {
        if (is_null($order_item_model)) {
            throw new \InvalidArgumentException('non-nullable order_item_model cannot be null');
        }
        $this->container['order_item_model'] = $order_item_model;

        return $this;
    }

    /**
     * Gets order_item_price
     *
     * @return float
     */
    public function getOrderItemPrice()
    {
        return $this->container['order_item_price'];
    }

    /**
     * Sets order_item_price
     *
     * @param float $order_item_price Defines orders specified by order item price
     *
     * @return self
     */
    public function setOrderItemPrice($order_item_price)
    {
        if (is_null($order_item_price)) {
            throw new \InvalidArgumentException('non-nullable order_item_price cannot be null');
        }
        $this->container['order_item_price'] = $order_item_price;

        return $this;
    }

    /**
     * Gets order_item_quantity
     *
     * @return int
     */
    public function getOrderItemQuantity()
    {
        return $this->container['order_item_quantity'];
    }

    /**
     * Sets order_item_quantity
     *
     * @param int $order_item_quantity Defines orders specified by order item quantity
     *
     * @return self
     */
    public function setOrderItemQuantity($order_item_quantity)
    {
        if (is_null($order_item_quantity)) {
            throw new \InvalidArgumentException('non-nullable order_item_quantity cannot be null');
        }
        $this->container['order_item_quantity'] = $order_item_quantity;

        return $this;
    }

    /**
     * Gets order_item_weight
     *
     * @return float|null
     */
    public function getOrderItemWeight()
    {
        return $this->container['order_item_weight'];
    }

    /**
     * Sets order_item_weight
     *
     * @param float|null $order_item_weight Defines orders specified by order item weight
     *
     * @return self
     */
    public function setOrderItemWeight($order_item_weight)
    {
        if (is_null($order_item_weight)) {
            throw new \InvalidArgumentException('non-nullable order_item_weight cannot be null');
        }
        $this->container['order_item_weight'] = $order_item_weight;

        return $this;
    }

    /**
     * Gets order_item_variant_id
     *
     * @return string|null
     */
    public function getOrderItemVariantId()
    {
        return $this->container['order_item_variant_id'];
    }

    /**
     * Sets order_item_variant_id
     *
     * @param string|null $order_item_variant_id Ordered product variant. Where x is order item ID
     *
     * @return self
     */
    public function setOrderItemVariantId($order_item_variant_id)
    {
        if (is_null($order_item_variant_id)) {
            throw new \InvalidArgumentException('non-nullable order_item_variant_id cannot be null');
        }
        $this->container['order_item_variant_id'] = $order_item_variant_id;

        return $this;
    }

    /**
     * Gets order_item_tax
     *
     * @return float|null
     */
    public function getOrderItemTax()
    {
        return $this->container['order_item_tax'];
    }

    /**
     * Sets order_item_tax
     *
     * @param float|null $order_item_tax Percentage of tax for product order
     *
     * @return self
     */
    public function setOrderItemTax($order_item_tax)
    {
        if (is_null($order_item_tax)) {
            throw new \InvalidArgumentException('non-nullable order_item_tax cannot be null');
        }
        $this->container['order_item_tax'] = $order_item_tax;

        return $this;
    }

    /**
     * Gets order_item_tax_class
     *
     * @return string|null
     */
    public function getOrderItemTaxClass()
    {
        return $this->container['order_item_tax_class'];
    }

    /**
     * Sets order_item_tax_class
     *
     * @param string|null $order_item_tax_class Id of the tax class of product.
     *
     * @return self
     */
    public function setOrderItemTaxClass($order_item_tax_class)
    {
        if (is_null($order_item_tax_class)) {
            throw new \InvalidArgumentException('non-nullable order_item_tax_class cannot be null');
        }
        $this->container['order_item_tax_class'] = $order_item_tax_class;

        return $this;
    }

    /**
     * Gets order_item_price_includes_tax
     *
     * @return bool|null
     */
    public function getOrderItemPriceIncludesTax()
    {
        return $this->container['order_item_price_includes_tax'];
    }

    /**
     * Sets order_item_price_includes_tax
     *
     * @param bool|null $order_item_price_includes_tax Defines if item price includes tax
     *
     * @return self
     */
    public function setOrderItemPriceIncludesTax($order_item_price_includes_tax)
    {
        if (is_null($order_item_price_includes_tax)) {
            throw new \InvalidArgumentException('non-nullable order_item_price_includes_tax cannot be null');
        }
        $this->container['order_item_price_includes_tax'] = $order_item_price_includes_tax;

        return $this;
    }

    /**
     * Gets order_item_parent
     *
     * @return int|null
     */
    public function getOrderItemParent()
    {
        return $this->container['order_item_parent'];
    }

    /**
     * Sets order_item_parent
     *
     * @param int|null $order_item_parent Index of the parent grouped/bundle product
     *
     * @return self
     */
    public function setOrderItemParent($order_item_parent)
    {
        if (is_null($order_item_parent)) {
            throw new \InvalidArgumentException('non-nullable order_item_parent cannot be null');
        }
        $this->container['order_item_parent'] = $order_item_parent;

        return $this;
    }

    /**
     * Gets order_item_parent_option_name
     *
     * @return string|null
     */
    public function getOrderItemParentOptionName()
    {
        return $this->container['order_item_parent_option_name'];
    }

    /**
     * Sets order_item_parent_option_name
     *
     * @param string|null $order_item_parent_option_name Option name of the parent grouped/bundle product
     *
     * @return self
     */
    public function setOrderItemParentOptionName($order_item_parent_option_name)
    {
        if (is_null($order_item_parent_option_name)) {
            throw new \InvalidArgumentException('non-nullable order_item_parent_option_name cannot be null');
        }
        $this->container['order_item_parent_option_name'] = $order_item_parent_option_name;

        return $this;
    }

    /**
     * Gets order_item_allow_refund_items_separately
     *
     * @return bool|null
     */
    public function getOrderItemAllowRefundItemsSeparately()
    {
        return $this->container['order_item_allow_refund_items_separately'];
    }

    /**
     * Sets order_item_allow_refund_items_separately
     *
     * @param bool|null $order_item_allow_refund_items_separately Indicates whether subitems of the grouped/bundle product can be refunded separately
     *
     * @return self
     */
    public function setOrderItemAllowRefundItemsSeparately($order_item_allow_refund_items_separately)
    {
        if (is_null($order_item_allow_refund_items_separately)) {
            throw new \InvalidArgumentException('non-nullable order_item_allow_refund_items_separately cannot be null');
        }
        $this->container['order_item_allow_refund_items_separately'] = $order_item_allow_refund_items_separately;

        return $this;
    }

    /**
     * Gets order_item_allow_ship_items_separately
     *
     * @return bool|null
     */
    public function getOrderItemAllowShipItemsSeparately()
    {
        return $this->container['order_item_allow_ship_items_separately'];
    }

    /**
     * Sets order_item_allow_ship_items_separately
     *
     * @param bool|null $order_item_allow_ship_items_separately Indicates whether subitems of the grouped/bundle product can be shipped separately
     *
     * @return self
     */
    public function setOrderItemAllowShipItemsSeparately($order_item_allow_ship_items_separately)
    {
        if (is_null($order_item_allow_ship_items_separately)) {
            throw new \InvalidArgumentException('non-nullable order_item_allow_ship_items_separately cannot be null');
        }
        $this->container['order_item_allow_ship_items_separately'] = $order_item_allow_ship_items_separately;

        return $this;
    }

    /**
     * Gets order_item_option
     *
     * @return \OpenAPI\Client\Model\OrderAddOrderItemInnerOrderItemOptionInner[]|null
     */
    public function getOrderItemOption()
    {
        return $this->container['order_item_option'];
    }

    /**
     * Sets order_item_option
     *
     * @param \OpenAPI\Client\Model\OrderAddOrderItemInnerOrderItemOptionInner[]|null $order_item_option order_item_option
     *
     * @return self
     */
    public function setOrderItemOption($order_item_option)
    {
        if (is_null($order_item_option)) {
            throw new \InvalidArgumentException('non-nullable order_item_option cannot be null');
        }
        $this->container['order_item_option'] = $order_item_option;

        return $this;
    }

    /**
     * Gets order_item_property
     *
     * @return \OpenAPI\Client\Model\OrderAddOrderItemInnerOrderItemPropertyInner[]|null
     */
    public function getOrderItemProperty()
    {
        return $this->container['order_item_property'];
    }

    /**
     * Sets order_item_property
     *
     * @param \OpenAPI\Client\Model\OrderAddOrderItemInnerOrderItemPropertyInner[]|null $order_item_property order_item_property
     *
     * @return self
     */
    public function setOrderItemProperty($order_item_property)
    {
        if (is_null($order_item_property)) {
            throw new \InvalidArgumentException('non-nullable order_item_property cannot be null');
        }
        $this->container['order_item_property'] = $order_item_property;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


