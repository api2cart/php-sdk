<?php
/**
 * OrderPreestimateShippingList
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderPreestimateShippingList Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderPreestimateShippingList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderPreestimateShippingList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'store_id' => 'string',
        'warehouse_id' => 'string',
        'customer_email' => 'string',
        'customer_id' => 'string',
        'shipp_address_1' => 'string',
        'shipp_city' => 'string',
        'shipp_postcode' => 'string',
        'shipp_state' => 'string',
        'shipp_country' => 'string',
        'params' => 'string',
        'exclude' => 'string',
        'order_item' => '\OpenAPI\Client\Model\OrderPreestimateShippingListOrderItemInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'store_id' => null,
        'warehouse_id' => null,
        'customer_email' => null,
        'customer_id' => null,
        'shipp_address_1' => null,
        'shipp_city' => null,
        'shipp_postcode' => null,
        'shipp_state' => null,
        'shipp_country' => null,
        'params' => null,
        'exclude' => null,
        'order_item' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'store_id' => false,
        'warehouse_id' => false,
        'customer_email' => false,
        'customer_id' => false,
        'shipp_address_1' => false,
        'shipp_city' => false,
        'shipp_postcode' => false,
        'shipp_state' => false,
        'shipp_country' => false,
        'params' => false,
        'exclude' => false,
        'order_item' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store_id' => 'store_id',
        'warehouse_id' => 'warehouse_id',
        'customer_email' => 'customer_email',
        'customer_id' => 'customer_id',
        'shipp_address_1' => 'shipp_address_1',
        'shipp_city' => 'shipp_city',
        'shipp_postcode' => 'shipp_postcode',
        'shipp_state' => 'shipp_state',
        'shipp_country' => 'shipp_country',
        'params' => 'params',
        'exclude' => 'exclude',
        'order_item' => 'order_item'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store_id' => 'setStoreId',
        'warehouse_id' => 'setWarehouseId',
        'customer_email' => 'setCustomerEmail',
        'customer_id' => 'setCustomerId',
        'shipp_address_1' => 'setShippAddress1',
        'shipp_city' => 'setShippCity',
        'shipp_postcode' => 'setShippPostcode',
        'shipp_state' => 'setShippState',
        'shipp_country' => 'setShippCountry',
        'params' => 'setParams',
        'exclude' => 'setExclude',
        'order_item' => 'setOrderItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store_id' => 'getStoreId',
        'warehouse_id' => 'getWarehouseId',
        'customer_email' => 'getCustomerEmail',
        'customer_id' => 'getCustomerId',
        'shipp_address_1' => 'getShippAddress1',
        'shipp_city' => 'getShippCity',
        'shipp_postcode' => 'getShippPostcode',
        'shipp_state' => 'getShippState',
        'shipp_country' => 'getShippCountry',
        'params' => 'getParams',
        'exclude' => 'getExclude',
        'order_item' => 'getOrderItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('customer_email', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('shipp_address_1', $data ?? [], null);
        $this->setIfExists('shipp_city', $data ?? [], null);
        $this->setIfExists('shipp_postcode', $data ?? [], null);
        $this->setIfExists('shipp_state', $data ?? [], null);
        $this->setIfExists('shipp_country', $data ?? [], null);
        $this->setIfExists('params', $data ?? [], 'force_all');
        $this->setIfExists('exclude', $data ?? [], null);
        $this->setIfExists('order_item', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipp_country'] === null) {
            $invalidProperties[] = "'shipp_country' can't be null";
        }
        if ($this->container['order_item'] === null) {
            $invalidProperties[] = "'order_item' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id Store Id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string|null
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string|null $customer_email Retrieves orders specified by customer email
     *
     * @return self
     */
    public function setCustomerEmail($customer_email)
    {
        if (is_null($customer_email)) {
            throw new \InvalidArgumentException('non-nullable customer_email cannot be null');
        }
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Retrieves orders specified by customer id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets shipp_address_1
     *
     * @return string|null
     */
    public function getShippAddress1()
    {
        return $this->container['shipp_address_1'];
    }

    /**
     * Sets shipp_address_1
     *
     * @param string|null $shipp_address_1 Specifies first shipping address
     *
     * @return self
     */
    public function setShippAddress1($shipp_address_1)
    {
        if (is_null($shipp_address_1)) {
            throw new \InvalidArgumentException('non-nullable shipp_address_1 cannot be null');
        }
        $this->container['shipp_address_1'] = $shipp_address_1;

        return $this;
    }

    /**
     * Gets shipp_city
     *
     * @return string|null
     */
    public function getShippCity()
    {
        return $this->container['shipp_city'];
    }

    /**
     * Sets shipp_city
     *
     * @param string|null $shipp_city Specifies shipping city
     *
     * @return self
     */
    public function setShippCity($shipp_city)
    {
        if (is_null($shipp_city)) {
            throw new \InvalidArgumentException('non-nullable shipp_city cannot be null');
        }
        $this->container['shipp_city'] = $shipp_city;

        return $this;
    }

    /**
     * Gets shipp_postcode
     *
     * @return string|null
     */
    public function getShippPostcode()
    {
        return $this->container['shipp_postcode'];
    }

    /**
     * Sets shipp_postcode
     *
     * @param string|null $shipp_postcode Specifies shipping postcode
     *
     * @return self
     */
    public function setShippPostcode($shipp_postcode)
    {
        if (is_null($shipp_postcode)) {
            throw new \InvalidArgumentException('non-nullable shipp_postcode cannot be null');
        }
        $this->container['shipp_postcode'] = $shipp_postcode;

        return $this;
    }

    /**
     * Gets shipp_state
     *
     * @return string|null
     */
    public function getShippState()
    {
        return $this->container['shipp_state'];
    }

    /**
     * Sets shipp_state
     *
     * @param string|null $shipp_state Specifies shipping state code
     *
     * @return self
     */
    public function setShippState($shipp_state)
    {
        if (is_null($shipp_state)) {
            throw new \InvalidArgumentException('non-nullable shipp_state cannot be null');
        }
        $this->container['shipp_state'] = $shipp_state;

        return $this;
    }

    /**
     * Gets shipp_country
     *
     * @return string
     */
    public function getShippCountry()
    {
        return $this->container['shipp_country'];
    }

    /**
     * Sets shipp_country
     *
     * @param string $shipp_country Specifies shipping country code
     *
     * @return self
     */
    public function setShippCountry($shipp_country)
    {
        if (is_null($shipp_country)) {
            throw new \InvalidArgumentException('non-nullable shipp_country cannot be null');
        }
        $this->container['shipp_country'] = $shipp_country;

        return $this;
    }

    /**
     * Gets params
     *
     * @return string|null
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param string|null $params Set this parameter in order to choose which entity fields you want to retrieve
     *
     * @return self
     */
    public function setParams($params)
    {
        if (is_null($params)) {
            throw new \InvalidArgumentException('non-nullable params cannot be null');
        }
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets exclude
     *
     * @return string|null
     */
    public function getExclude()
    {
        return $this->container['exclude'];
    }

    /**
     * Sets exclude
     *
     * @param string|null $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     *
     * @return self
     */
    public function setExclude($exclude)
    {
        if (is_null($exclude)) {
            throw new \InvalidArgumentException('non-nullable exclude cannot be null');
        }
        $this->container['exclude'] = $exclude;

        return $this;
    }

    /**
     * Gets order_item
     *
     * @return \OpenAPI\Client\Model\OrderPreestimateShippingListOrderItemInner[]
     */
    public function getOrderItem()
    {
        return $this->container['order_item'];
    }

    /**
     * Sets order_item
     *
     * @param \OpenAPI\Client\Model\OrderPreestimateShippingListOrderItemInner[] $order_item order_item
     *
     * @return self
     */
    public function setOrderItem($order_item)
    {
        if (is_null($order_item)) {
            throw new \InvalidArgumentException('non-nullable order_item cannot be null');
        }
        $this->container['order_item'] = $order_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


