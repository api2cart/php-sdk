<?php
/**
 * ProductAdd
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductAdd Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductAdd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductAdd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'model' => 'string',
        'sku' => 'string',
        'description' => 'string',
        'price' => 'float',
        'old_price' => 'float',
        'special_price' => 'float',
        'cost_price' => 'float',
        'fixed_cost_shipping_price' => 'float',
        'sprice_create' => 'string',
        'sprice_modified' => 'string',
        'sprice_expire' => 'string',
        'tier_prices' => '\OpenAPI\Client\Model\ProductAddTierPricesInner[]',
        'group_prices' => '\OpenAPI\Client\Model\ProductAddGroupPricesInner[]',
        'available_for_view' => 'bool',
        'available_for_sale' => 'bool',
        'weight' => 'float',
        'width' => 'float',
        'height' => 'float',
        'length' => 'float',
        'weight_unit' => 'string',
        'dimensions_unit' => 'string',
        'short_description' => 'string',
        'warehouse_id' => 'string',
        'backorder_status' => 'string',
        'quantity' => 'float',
        'downloadable' => 'bool',
        'wholesale_price' => 'float',
        'created_at' => 'string',
        'manufacturer' => 'string',
        'manufacturer_id' => 'string',
        'categories_ids' => 'string',
        'related_products_ids' => 'string',
        'up_sell_products_ids' => 'string',
        'cross_sell_products_ids' => 'string',
        'tax_class_id' => 'string',
        'type' => 'string',
        'meta_title' => 'string',
        'meta_keywords' => 'string',
        'meta_description' => 'string',
        'url' => 'string',
        'lang_id' => 'string',
        'stores_ids' => 'string',
        'category_id' => 'string',
        'viewed_count' => 'int',
        'ordered_count' => 'int',
        'attribute_set_name' => 'string',
        'attribute_name' => 'string',
        'shipping_template_id' => 'int',
        'production_partner_ids' => 'string',
        'condition' => 'string',
        'listing_duration' => 'string',
        'listing_type' => 'string',
        'payment_methods' => 'string[]',
        'return_accepted' => 'bool',
        'shipping_details' => '\OpenAPI\Client\Model\ProductAddShippingDetailsInner[]',
        'paypal_email' => 'string',
        'seller_profiles' => '\OpenAPI\Client\Model\ProductAddSellerProfiles',
        'package_details' => '\OpenAPI\Client\Model\ProductAddPackageDetails',
        'best_offer' => '\OpenAPI\Client\Model\ProductAddBestOffer',
        'sales_tax' => '\OpenAPI\Client\Model\ProductAddSalesTax',
        'barcode' => 'string',
        'upc' => 'string',
        'ean' => 'string',
        'isbn' => 'string',
        'specifics' => '\OpenAPI\Client\Model\ProductAddSpecificsInner[]',
        'image_url' => 'string',
        'image_name' => 'string',
        'reserve_price' => 'float',
        'buyitnow_price' => 'float',
        'condition_description' => 'string',
        'auction_confidentiality_level' => 'string',
        'avail_from' => 'string',
        'tags' => 'string',
        'clear_cache' => 'bool',
        'asin' => 'string',
        'gtin' => 'string',
        'mpn' => 'string',
        'taxable' => 'bool',
        'visible' => 'string',
        'status' => 'string',
        'seo_url' => 'string',
        'product_class' => 'string',
        'product_type' => 'string',
        'marketplace_item_properties' => 'string',
        'manage_stock' => 'bool',
        'harmonized_system_code' => 'string',
        'country_of_origin' => 'string',
        'files' => '\OpenAPI\Client\Model\ProductAddFilesInner[]',
        'search_keywords' => 'string',
        'store_id' => 'string',
        'brand_name' => 'string',
        'is_virtual' => 'bool',
        'is_free_shipping' => 'bool',
        'in_stock' => 'bool',
        'delivery_code' => 'string',
        'product_reference' => 'string',
        'delivery_type' => 'string',
        'delivery_time' => 'int',
        'size_chart' => '\OpenAPI\Client\Model\ProductAddSizeChart',
        'certifications' => '\OpenAPI\Client\Model\ProductAddCertificationsInner[]',
        'delivery_option_ids' => 'string',
        'manufacturer_info' => '\OpenAPI\Client\Model\ProductAddManufacturerInfo',
        'when_made' => 'string',
        'is_supply' => 'bool',
        'materials' => 'string[]',
        'auto_renew' => 'bool',
        'allow_display_condition' => 'bool',
        'min_order_quantity' => 'float',
        'max_order_quantity' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'model' => null,
        'sku' => null,
        'description' => null,
        'price' => null,
        'old_price' => null,
        'special_price' => null,
        'cost_price' => null,
        'fixed_cost_shipping_price' => null,
        'sprice_create' => null,
        'sprice_modified' => null,
        'sprice_expire' => null,
        'tier_prices' => null,
        'group_prices' => null,
        'available_for_view' => null,
        'available_for_sale' => null,
        'weight' => null,
        'width' => null,
        'height' => null,
        'length' => null,
        'weight_unit' => null,
        'dimensions_unit' => null,
        'short_description' => null,
        'warehouse_id' => null,
        'backorder_status' => null,
        'quantity' => null,
        'downloadable' => null,
        'wholesale_price' => null,
        'created_at' => null,
        'manufacturer' => null,
        'manufacturer_id' => null,
        'categories_ids' => null,
        'related_products_ids' => null,
        'up_sell_products_ids' => null,
        'cross_sell_products_ids' => null,
        'tax_class_id' => null,
        'type' => null,
        'meta_title' => null,
        'meta_keywords' => null,
        'meta_description' => null,
        'url' => null,
        'lang_id' => null,
        'stores_ids' => null,
        'category_id' => null,
        'viewed_count' => null,
        'ordered_count' => null,
        'attribute_set_name' => null,
        'attribute_name' => null,
        'shipping_template_id' => null,
        'production_partner_ids' => null,
        'condition' => null,
        'listing_duration' => null,
        'listing_type' => null,
        'payment_methods' => null,
        'return_accepted' => null,
        'shipping_details' => null,
        'paypal_email' => null,
        'seller_profiles' => null,
        'package_details' => null,
        'best_offer' => null,
        'sales_tax' => null,
        'barcode' => null,
        'upc' => null,
        'ean' => null,
        'isbn' => null,
        'specifics' => null,
        'image_url' => null,
        'image_name' => null,
        'reserve_price' => null,
        'buyitnow_price' => null,
        'condition_description' => null,
        'auction_confidentiality_level' => null,
        'avail_from' => null,
        'tags' => null,
        'clear_cache' => null,
        'asin' => null,
        'gtin' => null,
        'mpn' => null,
        'taxable' => null,
        'visible' => null,
        'status' => null,
        'seo_url' => null,
        'product_class' => null,
        'product_type' => null,
        'marketplace_item_properties' => null,
        'manage_stock' => null,
        'harmonized_system_code' => null,
        'country_of_origin' => null,
        'files' => null,
        'search_keywords' => null,
        'store_id' => null,
        'brand_name' => null,
        'is_virtual' => null,
        'is_free_shipping' => null,
        'in_stock' => null,
        'delivery_code' => null,
        'product_reference' => null,
        'delivery_type' => null,
        'delivery_time' => null,
        'size_chart' => null,
        'certifications' => null,
        'delivery_option_ids' => null,
        'manufacturer_info' => null,
        'when_made' => null,
        'is_supply' => null,
        'materials' => null,
        'auto_renew' => null,
        'allow_display_condition' => null,
        'min_order_quantity' => null,
        'max_order_quantity' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'model' => false,
        'sku' => false,
        'description' => false,
        'price' => false,
        'old_price' => false,
        'special_price' => false,
        'cost_price' => false,
        'fixed_cost_shipping_price' => false,
        'sprice_create' => false,
        'sprice_modified' => false,
        'sprice_expire' => false,
        'tier_prices' => false,
        'group_prices' => false,
        'available_for_view' => false,
        'available_for_sale' => false,
        'weight' => false,
        'width' => false,
        'height' => false,
        'length' => false,
        'weight_unit' => false,
        'dimensions_unit' => false,
        'short_description' => false,
        'warehouse_id' => false,
        'backorder_status' => false,
        'quantity' => false,
        'downloadable' => false,
        'wholesale_price' => false,
        'created_at' => false,
        'manufacturer' => false,
        'manufacturer_id' => false,
        'categories_ids' => false,
        'related_products_ids' => false,
        'up_sell_products_ids' => false,
        'cross_sell_products_ids' => false,
        'tax_class_id' => false,
        'type' => false,
        'meta_title' => false,
        'meta_keywords' => false,
        'meta_description' => false,
        'url' => false,
        'lang_id' => false,
        'stores_ids' => false,
        'category_id' => false,
        'viewed_count' => false,
        'ordered_count' => false,
        'attribute_set_name' => false,
        'attribute_name' => false,
        'shipping_template_id' => false,
        'production_partner_ids' => false,
        'condition' => false,
        'listing_duration' => false,
        'listing_type' => false,
        'payment_methods' => false,
        'return_accepted' => false,
        'shipping_details' => false,
        'paypal_email' => false,
        'seller_profiles' => false,
        'package_details' => false,
        'best_offer' => false,
        'sales_tax' => false,
        'barcode' => false,
        'upc' => false,
        'ean' => false,
        'isbn' => false,
        'specifics' => false,
        'image_url' => false,
        'image_name' => false,
        'reserve_price' => false,
        'buyitnow_price' => false,
        'condition_description' => false,
        'auction_confidentiality_level' => false,
        'avail_from' => false,
        'tags' => false,
        'clear_cache' => false,
        'asin' => false,
        'gtin' => false,
        'mpn' => false,
        'taxable' => false,
        'visible' => false,
        'status' => false,
        'seo_url' => false,
        'product_class' => false,
        'product_type' => false,
        'marketplace_item_properties' => false,
        'manage_stock' => false,
        'harmonized_system_code' => false,
        'country_of_origin' => false,
        'files' => false,
        'search_keywords' => false,
        'store_id' => false,
        'brand_name' => false,
        'is_virtual' => false,
        'is_free_shipping' => false,
        'in_stock' => false,
        'delivery_code' => false,
        'product_reference' => false,
        'delivery_type' => false,
        'delivery_time' => false,
        'size_chart' => false,
        'certifications' => false,
        'delivery_option_ids' => false,
        'manufacturer_info' => false,
        'when_made' => false,
        'is_supply' => false,
        'materials' => false,
        'auto_renew' => false,
        'allow_display_condition' => false,
        'min_order_quantity' => false,
        'max_order_quantity' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'model' => 'model',
        'sku' => 'sku',
        'description' => 'description',
        'price' => 'price',
        'old_price' => 'old_price',
        'special_price' => 'special_price',
        'cost_price' => 'cost_price',
        'fixed_cost_shipping_price' => 'fixed_cost_shipping_price',
        'sprice_create' => 'sprice_create',
        'sprice_modified' => 'sprice_modified',
        'sprice_expire' => 'sprice_expire',
        'tier_prices' => 'tier_prices',
        'group_prices' => 'group_prices',
        'available_for_view' => 'available_for_view',
        'available_for_sale' => 'available_for_sale',
        'weight' => 'weight',
        'width' => 'width',
        'height' => 'height',
        'length' => 'length',
        'weight_unit' => 'weight_unit',
        'dimensions_unit' => 'dimensions_unit',
        'short_description' => 'short_description',
        'warehouse_id' => 'warehouse_id',
        'backorder_status' => 'backorder_status',
        'quantity' => 'quantity',
        'downloadable' => 'downloadable',
        'wholesale_price' => 'wholesale_price',
        'created_at' => 'created_at',
        'manufacturer' => 'manufacturer',
        'manufacturer_id' => 'manufacturer_id',
        'categories_ids' => 'categories_ids',
        'related_products_ids' => 'related_products_ids',
        'up_sell_products_ids' => 'up_sell_products_ids',
        'cross_sell_products_ids' => 'cross_sell_products_ids',
        'tax_class_id' => 'tax_class_id',
        'type' => 'type',
        'meta_title' => 'meta_title',
        'meta_keywords' => 'meta_keywords',
        'meta_description' => 'meta_description',
        'url' => 'url',
        'lang_id' => 'lang_id',
        'stores_ids' => 'stores_ids',
        'category_id' => 'category_id',
        'viewed_count' => 'viewed_count',
        'ordered_count' => 'ordered_count',
        'attribute_set_name' => 'attribute_set_name',
        'attribute_name' => 'attribute_name',
        'shipping_template_id' => 'shipping_template_id',
        'production_partner_ids' => 'production_partner_ids',
        'condition' => 'condition',
        'listing_duration' => 'listing_duration',
        'listing_type' => 'listing_type',
        'payment_methods' => 'payment_methods',
        'return_accepted' => 'return_accepted',
        'shipping_details' => 'shipping_details',
        'paypal_email' => 'paypal_email',
        'seller_profiles' => 'seller_profiles',
        'package_details' => 'package_details',
        'best_offer' => 'best_offer',
        'sales_tax' => 'sales_tax',
        'barcode' => 'barcode',
        'upc' => 'upc',
        'ean' => 'ean',
        'isbn' => 'isbn',
        'specifics' => 'specifics',
        'image_url' => 'image_url',
        'image_name' => 'image_name',
        'reserve_price' => 'reserve_price',
        'buyitnow_price' => 'buyitnow_price',
        'condition_description' => 'condition_description',
        'auction_confidentiality_level' => 'auction_confidentiality_level',
        'avail_from' => 'avail_from',
        'tags' => 'tags',
        'clear_cache' => 'clear_cache',
        'asin' => 'asin',
        'gtin' => 'gtin',
        'mpn' => 'mpn',
        'taxable' => 'taxable',
        'visible' => 'visible',
        'status' => 'status',
        'seo_url' => 'seo_url',
        'product_class' => 'product_class',
        'product_type' => 'product_type',
        'marketplace_item_properties' => 'marketplace_item_properties',
        'manage_stock' => 'manage_stock',
        'harmonized_system_code' => 'harmonized_system_code',
        'country_of_origin' => 'country_of_origin',
        'files' => 'files',
        'search_keywords' => 'search_keywords',
        'store_id' => 'store_id',
        'brand_name' => 'brand_name',
        'is_virtual' => 'is_virtual',
        'is_free_shipping' => 'is_free_shipping',
        'in_stock' => 'in_stock',
        'delivery_code' => 'delivery_code',
        'product_reference' => 'product_reference',
        'delivery_type' => 'delivery_type',
        'delivery_time' => 'delivery_time',
        'size_chart' => 'size_chart',
        'certifications' => 'certifications',
        'delivery_option_ids' => 'delivery_option_ids',
        'manufacturer_info' => 'manufacturer_info',
        'when_made' => 'when_made',
        'is_supply' => 'is_supply',
        'materials' => 'materials',
        'auto_renew' => 'auto_renew',
        'allow_display_condition' => 'allow_display_condition',
        'min_order_quantity' => 'min_order_quantity',
        'max_order_quantity' => 'max_order_quantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'model' => 'setModel',
        'sku' => 'setSku',
        'description' => 'setDescription',
        'price' => 'setPrice',
        'old_price' => 'setOldPrice',
        'special_price' => 'setSpecialPrice',
        'cost_price' => 'setCostPrice',
        'fixed_cost_shipping_price' => 'setFixedCostShippingPrice',
        'sprice_create' => 'setSpriceCreate',
        'sprice_modified' => 'setSpriceModified',
        'sprice_expire' => 'setSpriceExpire',
        'tier_prices' => 'setTierPrices',
        'group_prices' => 'setGroupPrices',
        'available_for_view' => 'setAvailableForView',
        'available_for_sale' => 'setAvailableForSale',
        'weight' => 'setWeight',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'length' => 'setLength',
        'weight_unit' => 'setWeightUnit',
        'dimensions_unit' => 'setDimensionsUnit',
        'short_description' => 'setShortDescription',
        'warehouse_id' => 'setWarehouseId',
        'backorder_status' => 'setBackorderStatus',
        'quantity' => 'setQuantity',
        'downloadable' => 'setDownloadable',
        'wholesale_price' => 'setWholesalePrice',
        'created_at' => 'setCreatedAt',
        'manufacturer' => 'setManufacturer',
        'manufacturer_id' => 'setManufacturerId',
        'categories_ids' => 'setCategoriesIds',
        'related_products_ids' => 'setRelatedProductsIds',
        'up_sell_products_ids' => 'setUpSellProductsIds',
        'cross_sell_products_ids' => 'setCrossSellProductsIds',
        'tax_class_id' => 'setTaxClassId',
        'type' => 'setType',
        'meta_title' => 'setMetaTitle',
        'meta_keywords' => 'setMetaKeywords',
        'meta_description' => 'setMetaDescription',
        'url' => 'setUrl',
        'lang_id' => 'setLangId',
        'stores_ids' => 'setStoresIds',
        'category_id' => 'setCategoryId',
        'viewed_count' => 'setViewedCount',
        'ordered_count' => 'setOrderedCount',
        'attribute_set_name' => 'setAttributeSetName',
        'attribute_name' => 'setAttributeName',
        'shipping_template_id' => 'setShippingTemplateId',
        'production_partner_ids' => 'setProductionPartnerIds',
        'condition' => 'setCondition',
        'listing_duration' => 'setListingDuration',
        'listing_type' => 'setListingType',
        'payment_methods' => 'setPaymentMethods',
        'return_accepted' => 'setReturnAccepted',
        'shipping_details' => 'setShippingDetails',
        'paypal_email' => 'setPaypalEmail',
        'seller_profiles' => 'setSellerProfiles',
        'package_details' => 'setPackageDetails',
        'best_offer' => 'setBestOffer',
        'sales_tax' => 'setSalesTax',
        'barcode' => 'setBarcode',
        'upc' => 'setUpc',
        'ean' => 'setEan',
        'isbn' => 'setIsbn',
        'specifics' => 'setSpecifics',
        'image_url' => 'setImageUrl',
        'image_name' => 'setImageName',
        'reserve_price' => 'setReservePrice',
        'buyitnow_price' => 'setBuyitnowPrice',
        'condition_description' => 'setConditionDescription',
        'auction_confidentiality_level' => 'setAuctionConfidentialityLevel',
        'avail_from' => 'setAvailFrom',
        'tags' => 'setTags',
        'clear_cache' => 'setClearCache',
        'asin' => 'setAsin',
        'gtin' => 'setGtin',
        'mpn' => 'setMpn',
        'taxable' => 'setTaxable',
        'visible' => 'setVisible',
        'status' => 'setStatus',
        'seo_url' => 'setSeoUrl',
        'product_class' => 'setProductClass',
        'product_type' => 'setProductType',
        'marketplace_item_properties' => 'setMarketplaceItemProperties',
        'manage_stock' => 'setManageStock',
        'harmonized_system_code' => 'setHarmonizedSystemCode',
        'country_of_origin' => 'setCountryOfOrigin',
        'files' => 'setFiles',
        'search_keywords' => 'setSearchKeywords',
        'store_id' => 'setStoreId',
        'brand_name' => 'setBrandName',
        'is_virtual' => 'setIsVirtual',
        'is_free_shipping' => 'setIsFreeShipping',
        'in_stock' => 'setInStock',
        'delivery_code' => 'setDeliveryCode',
        'product_reference' => 'setProductReference',
        'delivery_type' => 'setDeliveryType',
        'delivery_time' => 'setDeliveryTime',
        'size_chart' => 'setSizeChart',
        'certifications' => 'setCertifications',
        'delivery_option_ids' => 'setDeliveryOptionIds',
        'manufacturer_info' => 'setManufacturerInfo',
        'when_made' => 'setWhenMade',
        'is_supply' => 'setIsSupply',
        'materials' => 'setMaterials',
        'auto_renew' => 'setAutoRenew',
        'allow_display_condition' => 'setAllowDisplayCondition',
        'min_order_quantity' => 'setMinOrderQuantity',
        'max_order_quantity' => 'setMaxOrderQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'model' => 'getModel',
        'sku' => 'getSku',
        'description' => 'getDescription',
        'price' => 'getPrice',
        'old_price' => 'getOldPrice',
        'special_price' => 'getSpecialPrice',
        'cost_price' => 'getCostPrice',
        'fixed_cost_shipping_price' => 'getFixedCostShippingPrice',
        'sprice_create' => 'getSpriceCreate',
        'sprice_modified' => 'getSpriceModified',
        'sprice_expire' => 'getSpriceExpire',
        'tier_prices' => 'getTierPrices',
        'group_prices' => 'getGroupPrices',
        'available_for_view' => 'getAvailableForView',
        'available_for_sale' => 'getAvailableForSale',
        'weight' => 'getWeight',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'length' => 'getLength',
        'weight_unit' => 'getWeightUnit',
        'dimensions_unit' => 'getDimensionsUnit',
        'short_description' => 'getShortDescription',
        'warehouse_id' => 'getWarehouseId',
        'backorder_status' => 'getBackorderStatus',
        'quantity' => 'getQuantity',
        'downloadable' => 'getDownloadable',
        'wholesale_price' => 'getWholesalePrice',
        'created_at' => 'getCreatedAt',
        'manufacturer' => 'getManufacturer',
        'manufacturer_id' => 'getManufacturerId',
        'categories_ids' => 'getCategoriesIds',
        'related_products_ids' => 'getRelatedProductsIds',
        'up_sell_products_ids' => 'getUpSellProductsIds',
        'cross_sell_products_ids' => 'getCrossSellProductsIds',
        'tax_class_id' => 'getTaxClassId',
        'type' => 'getType',
        'meta_title' => 'getMetaTitle',
        'meta_keywords' => 'getMetaKeywords',
        'meta_description' => 'getMetaDescription',
        'url' => 'getUrl',
        'lang_id' => 'getLangId',
        'stores_ids' => 'getStoresIds',
        'category_id' => 'getCategoryId',
        'viewed_count' => 'getViewedCount',
        'ordered_count' => 'getOrderedCount',
        'attribute_set_name' => 'getAttributeSetName',
        'attribute_name' => 'getAttributeName',
        'shipping_template_id' => 'getShippingTemplateId',
        'production_partner_ids' => 'getProductionPartnerIds',
        'condition' => 'getCondition',
        'listing_duration' => 'getListingDuration',
        'listing_type' => 'getListingType',
        'payment_methods' => 'getPaymentMethods',
        'return_accepted' => 'getReturnAccepted',
        'shipping_details' => 'getShippingDetails',
        'paypal_email' => 'getPaypalEmail',
        'seller_profiles' => 'getSellerProfiles',
        'package_details' => 'getPackageDetails',
        'best_offer' => 'getBestOffer',
        'sales_tax' => 'getSalesTax',
        'barcode' => 'getBarcode',
        'upc' => 'getUpc',
        'ean' => 'getEan',
        'isbn' => 'getIsbn',
        'specifics' => 'getSpecifics',
        'image_url' => 'getImageUrl',
        'image_name' => 'getImageName',
        'reserve_price' => 'getReservePrice',
        'buyitnow_price' => 'getBuyitnowPrice',
        'condition_description' => 'getConditionDescription',
        'auction_confidentiality_level' => 'getAuctionConfidentialityLevel',
        'avail_from' => 'getAvailFrom',
        'tags' => 'getTags',
        'clear_cache' => 'getClearCache',
        'asin' => 'getAsin',
        'gtin' => 'getGtin',
        'mpn' => 'getMpn',
        'taxable' => 'getTaxable',
        'visible' => 'getVisible',
        'status' => 'getStatus',
        'seo_url' => 'getSeoUrl',
        'product_class' => 'getProductClass',
        'product_type' => 'getProductType',
        'marketplace_item_properties' => 'getMarketplaceItemProperties',
        'manage_stock' => 'getManageStock',
        'harmonized_system_code' => 'getHarmonizedSystemCode',
        'country_of_origin' => 'getCountryOfOrigin',
        'files' => 'getFiles',
        'search_keywords' => 'getSearchKeywords',
        'store_id' => 'getStoreId',
        'brand_name' => 'getBrandName',
        'is_virtual' => 'getIsVirtual',
        'is_free_shipping' => 'getIsFreeShipping',
        'in_stock' => 'getInStock',
        'delivery_code' => 'getDeliveryCode',
        'product_reference' => 'getProductReference',
        'delivery_type' => 'getDeliveryType',
        'delivery_time' => 'getDeliveryTime',
        'size_chart' => 'getSizeChart',
        'certifications' => 'getCertifications',
        'delivery_option_ids' => 'getDeliveryOptionIds',
        'manufacturer_info' => 'getManufacturerInfo',
        'when_made' => 'getWhenMade',
        'is_supply' => 'getIsSupply',
        'materials' => 'getMaterials',
        'auto_renew' => 'getAutoRenew',
        'allow_display_condition' => 'getAllowDisplayCondition',
        'min_order_quantity' => 'getMinOrderQuantity',
        'max_order_quantity' => 'getMaxOrderQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('old_price', $data ?? [], null);
        $this->setIfExists('special_price', $data ?? [], null);
        $this->setIfExists('cost_price', $data ?? [], null);
        $this->setIfExists('fixed_cost_shipping_price', $data ?? [], null);
        $this->setIfExists('sprice_create', $data ?? [], null);
        $this->setIfExists('sprice_modified', $data ?? [], null);
        $this->setIfExists('sprice_expire', $data ?? [], null);
        $this->setIfExists('tier_prices', $data ?? [], null);
        $this->setIfExists('group_prices', $data ?? [], null);
        $this->setIfExists('available_for_view', $data ?? [], true);
        $this->setIfExists('available_for_sale', $data ?? [], true);
        $this->setIfExists('weight', $data ?? [], 0);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('dimensions_unit', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('backorder_status', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], 0);
        $this->setIfExists('downloadable', $data ?? [], false);
        $this->setIfExists('wholesale_price', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('manufacturer_id', $data ?? [], null);
        $this->setIfExists('categories_ids', $data ?? [], null);
        $this->setIfExists('related_products_ids', $data ?? [], null);
        $this->setIfExists('up_sell_products_ids', $data ?? [], null);
        $this->setIfExists('cross_sell_products_ids', $data ?? [], null);
        $this->setIfExists('tax_class_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'simple');
        $this->setIfExists('meta_title', $data ?? [], null);
        $this->setIfExists('meta_keywords', $data ?? [], null);
        $this->setIfExists('meta_description', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('lang_id', $data ?? [], null);
        $this->setIfExists('stores_ids', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('viewed_count', $data ?? [], 0);
        $this->setIfExists('ordered_count', $data ?? [], 0);
        $this->setIfExists('attribute_set_name', $data ?? [], 'Default');
        $this->setIfExists('attribute_name', $data ?? [], null);
        $this->setIfExists('shipping_template_id', $data ?? [], 0);
        $this->setIfExists('production_partner_ids', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('listing_duration', $data ?? [], null);
        $this->setIfExists('listing_type', $data ?? [], 'FixedPrice');
        $this->setIfExists('payment_methods', $data ?? [], null);
        $this->setIfExists('return_accepted', $data ?? [], null);
        $this->setIfExists('shipping_details', $data ?? [], null);
        $this->setIfExists('paypal_email', $data ?? [], null);
        $this->setIfExists('seller_profiles', $data ?? [], null);
        $this->setIfExists('package_details', $data ?? [], null);
        $this->setIfExists('best_offer', $data ?? [], null);
        $this->setIfExists('sales_tax', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('upc', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('isbn', $data ?? [], null);
        $this->setIfExists('specifics', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('image_name', $data ?? [], null);
        $this->setIfExists('reserve_price', $data ?? [], null);
        $this->setIfExists('buyitnow_price', $data ?? [], null);
        $this->setIfExists('condition_description', $data ?? [], null);
        $this->setIfExists('auction_confidentiality_level', $data ?? [], null);
        $this->setIfExists('avail_from', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('clear_cache', $data ?? [], true);
        $this->setIfExists('asin', $data ?? [], null);
        $this->setIfExists('gtin', $data ?? [], null);
        $this->setIfExists('mpn', $data ?? [], null);
        $this->setIfExists('taxable', $data ?? [], true);
        $this->setIfExists('visible', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('seo_url', $data ?? [], null);
        $this->setIfExists('product_class', $data ?? [], null);
        $this->setIfExists('product_type', $data ?? [], null);
        $this->setIfExists('marketplace_item_properties', $data ?? [], null);
        $this->setIfExists('manage_stock', $data ?? [], null);
        $this->setIfExists('harmonized_system_code', $data ?? [], null);
        $this->setIfExists('country_of_origin', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('search_keywords', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('brand_name', $data ?? [], null);
        $this->setIfExists('is_virtual', $data ?? [], false);
        $this->setIfExists('is_free_shipping', $data ?? [], null);
        $this->setIfExists('in_stock', $data ?? [], null);
        $this->setIfExists('delivery_code', $data ?? [], null);
        $this->setIfExists('product_reference', $data ?? [], null);
        $this->setIfExists('delivery_type', $data ?? [], null);
        $this->setIfExists('delivery_time', $data ?? [], null);
        $this->setIfExists('size_chart', $data ?? [], null);
        $this->setIfExists('certifications', $data ?? [], null);
        $this->setIfExists('delivery_option_ids', $data ?? [], null);
        $this->setIfExists('manufacturer_info', $data ?? [], null);
        $this->setIfExists('when_made', $data ?? [], 'made_to_order');
        $this->setIfExists('is_supply', $data ?? [], true);
        $this->setIfExists('materials', $data ?? [], null);
        $this->setIfExists('auto_renew', $data ?? [], false);
        $this->setIfExists('allow_display_condition', $data ?? [], null);
        $this->setIfExists('min_order_quantity', $data ?? [], null);
        $this->setIfExists('max_order_quantity', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Defines product's name that has to be added
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model Defines product's model that has to be added
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Defines product's sku that has to be added
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Defines product's description that has to be added
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price Defines product's price that has to be added
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets old_price
     *
     * @return float|null
     */
    public function getOldPrice()
    {
        return $this->container['old_price'];
    }

    /**
     * Sets old_price
     *
     * @param float|null $old_price Defines product's old price
     *
     * @return self
     */
    public function setOldPrice($old_price)
    {
        if (is_null($old_price)) {
            throw new \InvalidArgumentException('non-nullable old_price cannot be null');
        }
        $this->container['old_price'] = $old_price;

        return $this;
    }

    /**
     * Gets special_price
     *
     * @return float|null
     */
    public function getSpecialPrice()
    {
        return $this->container['special_price'];
    }

    /**
     * Sets special_price
     *
     * @param float|null $special_price Defines product's model that has to be added
     *
     * @return self
     */
    public function setSpecialPrice($special_price)
    {
        if (is_null($special_price)) {
            throw new \InvalidArgumentException('non-nullable special_price cannot be null');
        }
        $this->container['special_price'] = $special_price;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return float|null
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param float|null $cost_price Defines new product's cost price
     *
     * @return self
     */
    public function setCostPrice($cost_price)
    {
        if (is_null($cost_price)) {
            throw new \InvalidArgumentException('non-nullable cost_price cannot be null');
        }
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets fixed_cost_shipping_price
     *
     * @return float|null
     */
    public function getFixedCostShippingPrice()
    {
        return $this->container['fixed_cost_shipping_price'];
    }

    /**
     * Sets fixed_cost_shipping_price
     *
     * @param float|null $fixed_cost_shipping_price Specifies product's fixed cost shipping price
     *
     * @return self
     */
    public function setFixedCostShippingPrice($fixed_cost_shipping_price)
    {
        if (is_null($fixed_cost_shipping_price)) {
            throw new \InvalidArgumentException('non-nullable fixed_cost_shipping_price cannot be null');
        }
        $this->container['fixed_cost_shipping_price'] = $fixed_cost_shipping_price;

        return $this;
    }

    /**
     * Gets sprice_create
     *
     * @return string|null
     */
    public function getSpriceCreate()
    {
        return $this->container['sprice_create'];
    }

    /**
     * Sets sprice_create
     *
     * @param string|null $sprice_create Defines the date of special price creation
     *
     * @return self
     */
    public function setSpriceCreate($sprice_create)
    {
        if (is_null($sprice_create)) {
            throw new \InvalidArgumentException('non-nullable sprice_create cannot be null');
        }
        $this->container['sprice_create'] = $sprice_create;

        return $this;
    }

    /**
     * Gets sprice_modified
     *
     * @return string|null
     */
    public function getSpriceModified()
    {
        return $this->container['sprice_modified'];
    }

    /**
     * Sets sprice_modified
     *
     * @param string|null $sprice_modified Defines the date of special price modification
     *
     * @return self
     */
    public function setSpriceModified($sprice_modified)
    {
        if (is_null($sprice_modified)) {
            throw new \InvalidArgumentException('non-nullable sprice_modified cannot be null');
        }
        $this->container['sprice_modified'] = $sprice_modified;

        return $this;
    }

    /**
     * Gets sprice_expire
     *
     * @return string|null
     */
    public function getSpriceExpire()
    {
        return $this->container['sprice_expire'];
    }

    /**
     * Sets sprice_expire
     *
     * @param string|null $sprice_expire Defines the term of special price offer duration
     *
     * @return self
     */
    public function setSpriceExpire($sprice_expire)
    {
        if (is_null($sprice_expire)) {
            throw new \InvalidArgumentException('non-nullable sprice_expire cannot be null');
        }
        $this->container['sprice_expire'] = $sprice_expire;

        return $this;
    }

    /**
     * Gets tier_prices
     *
     * @return \OpenAPI\Client\Model\ProductAddTierPricesInner[]|null
     */
    public function getTierPrices()
    {
        return $this->container['tier_prices'];
    }

    /**
     * Sets tier_prices
     *
     * @param \OpenAPI\Client\Model\ProductAddTierPricesInner[]|null $tier_prices Defines product's tier prices
     *
     * @return self
     */
    public function setTierPrices($tier_prices)
    {
        if (is_null($tier_prices)) {
            throw new \InvalidArgumentException('non-nullable tier_prices cannot be null');
        }
        $this->container['tier_prices'] = $tier_prices;

        return $this;
    }

    /**
     * Gets group_prices
     *
     * @return \OpenAPI\Client\Model\ProductAddGroupPricesInner[]|null
     */
    public function getGroupPrices()
    {
        return $this->container['group_prices'];
    }

    /**
     * Sets group_prices
     *
     * @param \OpenAPI\Client\Model\ProductAddGroupPricesInner[]|null $group_prices Defines product's group prices
     *
     * @return self
     */
    public function setGroupPrices($group_prices)
    {
        if (is_null($group_prices)) {
            throw new \InvalidArgumentException('non-nullable group_prices cannot be null');
        }
        $this->container['group_prices'] = $group_prices;

        return $this;
    }

    /**
     * Gets available_for_view
     *
     * @return bool|null
     */
    public function getAvailableForView()
    {
        return $this->container['available_for_view'];
    }

    /**
     * Sets available_for_view
     *
     * @param bool|null $available_for_view Specifies the set of visible/invisible products for users
     *
     * @return self
     */
    public function setAvailableForView($available_for_view)
    {
        if (is_null($available_for_view)) {
            throw new \InvalidArgumentException('non-nullable available_for_view cannot be null');
        }
        $this->container['available_for_view'] = $available_for_view;

        return $this;
    }

    /**
     * Gets available_for_sale
     *
     * @return bool|null
     */
    public function getAvailableForSale()
    {
        return $this->container['available_for_sale'];
    }

    /**
     * Sets available_for_sale
     *
     * @param bool|null $available_for_sale Specifies the set of visible/invisible products for sale
     *
     * @return self
     */
    public function setAvailableForSale($available_for_sale)
    {
        if (is_null($available_for_sale)) {
            throw new \InvalidArgumentException('non-nullable available_for_sale cannot be null');
        }
        $this->container['available_for_sale'] = $available_for_sale;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight Weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width Defines product's width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float|null $height Defines product's height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float|null $length Defines product's length
     *
     * @return self
     */
    public function setLength($length)
    {
        if (is_null($length)) {
            throw new \InvalidArgumentException('non-nullable length cannot be null');
        }
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string|null $weight_unit Weight Unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_unit cannot be null');
        }
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets dimensions_unit
     *
     * @return string|null
     */
    public function getDimensionsUnit()
    {
        return $this->container['dimensions_unit'];
    }

    /**
     * Sets dimensions_unit
     *
     * @param string|null $dimensions_unit Weight Unit
     *
     * @return self
     */
    public function setDimensionsUnit($dimensions_unit)
    {
        if (is_null($dimensions_unit)) {
            throw new \InvalidArgumentException('non-nullable dimensions_unit cannot be null');
        }
        $this->container['dimensions_unit'] = $dimensions_unit;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description Defines short description
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if (is_null($short_description)) {
            throw new \InvalidArgumentException('non-nullable short_description cannot be null');
        }
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets backorder_status
     *
     * @return string|null
     */
    public function getBackorderStatus()
    {
        return $this->container['backorder_status'];
    }

    /**
     * Sets backorder_status
     *
     * @param string|null $backorder_status Set backorder status
     *
     * @return self
     */
    public function setBackorderStatus($backorder_status)
    {
        if (is_null($backorder_status)) {
            throw new \InvalidArgumentException('non-nullable backorder_status cannot be null');
        }
        $this->container['backorder_status'] = $backorder_status;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity Defines product's quantity that has to be added
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets downloadable
     *
     * @return bool|null
     */
    public function getDownloadable()
    {
        return $this->container['downloadable'];
    }

    /**
     * Sets downloadable
     *
     * @param bool|null $downloadable Defines whether the product is downloadable
     *
     * @return self
     */
    public function setDownloadable($downloadable)
    {
        if (is_null($downloadable)) {
            throw new \InvalidArgumentException('non-nullable downloadable cannot be null');
        }
        $this->container['downloadable'] = $downloadable;

        return $this;
    }

    /**
     * Gets wholesale_price
     *
     * @return float|null
     */
    public function getWholesalePrice()
    {
        return $this->container['wholesale_price'];
    }

    /**
     * Sets wholesale_price
     *
     * @param float|null $wholesale_price Defines product's sale price
     *
     * @return self
     */
    public function setWholesalePrice($wholesale_price)
    {
        if (is_null($wholesale_price)) {
            throw new \InvalidArgumentException('non-nullable wholesale_price cannot be null');
        }
        $this->container['wholesale_price'] = $wholesale_price;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Defines the date of entity creation
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string|null
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string|null $manufacturer Defines product's manufacturer
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {
        if (is_null($manufacturer)) {
            throw new \InvalidArgumentException('non-nullable manufacturer cannot be null');
        }
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets manufacturer_id
     *
     * @return string|null
     */
    public function getManufacturerId()
    {
        return $this->container['manufacturer_id'];
    }

    /**
     * Sets manufacturer_id
     *
     * @param string|null $manufacturer_id Defines product's manufacturer by manufacturer_id
     *
     * @return self
     */
    public function setManufacturerId($manufacturer_id)
    {
        if (is_null($manufacturer_id)) {
            throw new \InvalidArgumentException('non-nullable manufacturer_id cannot be null');
        }
        $this->container['manufacturer_id'] = $manufacturer_id;

        return $this;
    }

    /**
     * Gets categories_ids
     *
     * @return string|null
     */
    public function getCategoriesIds()
    {
        return $this->container['categories_ids'];
    }

    /**
     * Sets categories_ids
     *
     * @param string|null $categories_ids Defines product add that is specified by comma-separated categories id
     *
     * @return self
     */
    public function setCategoriesIds($categories_ids)
    {
        if (is_null($categories_ids)) {
            throw new \InvalidArgumentException('non-nullable categories_ids cannot be null');
        }
        $this->container['categories_ids'] = $categories_ids;

        return $this;
    }

    /**
     * Gets related_products_ids
     *
     * @return string|null
     */
    public function getRelatedProductsIds()
    {
        return $this->container['related_products_ids'];
    }

    /**
     * Sets related_products_ids
     *
     * @param string|null $related_products_ids Defines product's related products ids that has to be added
     *
     * @return self
     */
    public function setRelatedProductsIds($related_products_ids)
    {
        if (is_null($related_products_ids)) {
            throw new \InvalidArgumentException('non-nullable related_products_ids cannot be null');
        }
        $this->container['related_products_ids'] = $related_products_ids;

        return $this;
    }

    /**
     * Gets up_sell_products_ids
     *
     * @return string|null
     */
    public function getUpSellProductsIds()
    {
        return $this->container['up_sell_products_ids'];
    }

    /**
     * Sets up_sell_products_ids
     *
     * @param string|null $up_sell_products_ids Defines product's up-sell products ids that has to be added
     *
     * @return self
     */
    public function setUpSellProductsIds($up_sell_products_ids)
    {
        if (is_null($up_sell_products_ids)) {
            throw new \InvalidArgumentException('non-nullable up_sell_products_ids cannot be null');
        }
        $this->container['up_sell_products_ids'] = $up_sell_products_ids;

        return $this;
    }

    /**
     * Gets cross_sell_products_ids
     *
     * @return string|null
     */
    public function getCrossSellProductsIds()
    {
        return $this->container['cross_sell_products_ids'];
    }

    /**
     * Sets cross_sell_products_ids
     *
     * @param string|null $cross_sell_products_ids Defines product's cross-sell products ids that has to be added
     *
     * @return self
     */
    public function setCrossSellProductsIds($cross_sell_products_ids)
    {
        if (is_null($cross_sell_products_ids)) {
            throw new \InvalidArgumentException('non-nullable cross_sell_products_ids cannot be null');
        }
        $this->container['cross_sell_products_ids'] = $cross_sell_products_ids;

        return $this;
    }

    /**
     * Gets tax_class_id
     *
     * @return string|null
     */
    public function getTaxClassId()
    {
        return $this->container['tax_class_id'];
    }

    /**
     * Sets tax_class_id
     *
     * @param string|null $tax_class_id Defines tax classes where entity has to be added
     *
     * @return self
     */
    public function setTaxClassId($tax_class_id)
    {
        if (is_null($tax_class_id)) {
            throw new \InvalidArgumentException('non-nullable tax_class_id cannot be null');
        }
        $this->container['tax_class_id'] = $tax_class_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Defines product's type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets meta_title
     *
     * @return string|null
     */
    public function getMetaTitle()
    {
        return $this->container['meta_title'];
    }

    /**
     * Sets meta_title
     *
     * @param string|null $meta_title Defines unique meta title for each entity
     *
     * @return self
     */
    public function setMetaTitle($meta_title)
    {
        if (is_null($meta_title)) {
            throw new \InvalidArgumentException('non-nullable meta_title cannot be null');
        }
        $this->container['meta_title'] = $meta_title;

        return $this;
    }

    /**
     * Gets meta_keywords
     *
     * @return string|null
     */
    public function getMetaKeywords()
    {
        return $this->container['meta_keywords'];
    }

    /**
     * Sets meta_keywords
     *
     * @param string|null $meta_keywords Defines unique meta keywords for each entity
     *
     * @return self
     */
    public function setMetaKeywords($meta_keywords)
    {
        if (is_null($meta_keywords)) {
            throw new \InvalidArgumentException('non-nullable meta_keywords cannot be null');
        }
        $this->container['meta_keywords'] = $meta_keywords;

        return $this;
    }

    /**
     * Gets meta_description
     *
     * @return string|null
     */
    public function getMetaDescription()
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     *
     * @param string|null $meta_description Defines unique meta description of a entity
     *
     * @return self
     */
    public function setMetaDescription($meta_description)
    {
        if (is_null($meta_description)) {
            throw new \InvalidArgumentException('non-nullable meta_description cannot be null');
        }
        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Defines unique product's URL
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets lang_id
     *
     * @return string|null
     */
    public function getLangId()
    {
        return $this->container['lang_id'];
    }

    /**
     * Sets lang_id
     *
     * @param string|null $lang_id Language id
     *
     * @return self
     */
    public function setLangId($lang_id)
    {
        if (is_null($lang_id)) {
            throw new \InvalidArgumentException('non-nullable lang_id cannot be null');
        }
        $this->container['lang_id'] = $lang_id;

        return $this;
    }

    /**
     * Gets stores_ids
     *
     * @return string|null
     */
    public function getStoresIds()
    {
        return $this->container['stores_ids'];
    }

    /**
     * Sets stores_ids
     *
     * @param string|null $stores_ids Assign product to the stores that is specified by comma-separated stores' id
     *
     * @return self
     */
    public function setStoresIds($stores_ids)
    {
        if (is_null($stores_ids)) {
            throw new \InvalidArgumentException('non-nullable stores_ids cannot be null');
        }
        $this->container['stores_ids'] = $stores_ids;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id Defines product add that is specified by category id
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            throw new \InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets viewed_count
     *
     * @return int|null
     */
    public function getViewedCount()
    {
        return $this->container['viewed_count'];
    }

    /**
     * Sets viewed_count
     *
     * @param int|null $viewed_count Specifies the number of product's reviews
     *
     * @return self
     */
    public function setViewedCount($viewed_count)
    {
        if (is_null($viewed_count)) {
            throw new \InvalidArgumentException('non-nullable viewed_count cannot be null');
        }
        $this->container['viewed_count'] = $viewed_count;

        return $this;
    }

    /**
     * Gets ordered_count
     *
     * @return int|null
     */
    public function getOrderedCount()
    {
        return $this->container['ordered_count'];
    }

    /**
     * Sets ordered_count
     *
     * @param int|null $ordered_count Defines how many times the product was ordered
     *
     * @return self
     */
    public function setOrderedCount($ordered_count)
    {
        if (is_null($ordered_count)) {
            throw new \InvalidArgumentException('non-nullable ordered_count cannot be null');
        }
        $this->container['ordered_count'] = $ordered_count;

        return $this;
    }

    /**
     * Gets attribute_set_name
     *
     * @return string|null
     */
    public function getAttributeSetName()
    {
        return $this->container['attribute_set_name'];
    }

    /**
     * Sets attribute_set_name
     *
     * @param string|null $attribute_set_name Defines product’s attribute set name in Magento
     *
     * @return self
     */
    public function setAttributeSetName($attribute_set_name)
    {
        if (is_null($attribute_set_name)) {
            throw new \InvalidArgumentException('non-nullable attribute_set_name cannot be null');
        }
        $this->container['attribute_set_name'] = $attribute_set_name;

        return $this;
    }

    /**
     * Gets attribute_name
     *
     * @return string|null
     */
    public function getAttributeName()
    {
        return $this->container['attribute_name'];
    }

    /**
     * Sets attribute_name
     *
     * @param string|null $attribute_name Defines product’s attribute name separated with a comma in Magento
     *
     * @return self
     */
    public function setAttributeName($attribute_name)
    {
        if (is_null($attribute_name)) {
            throw new \InvalidArgumentException('non-nullable attribute_name cannot be null');
        }
        $this->container['attribute_name'] = $attribute_name;

        return $this;
    }

    /**
     * Gets shipping_template_id
     *
     * @return int|null
     */
    public function getShippingTemplateId()
    {
        return $this->container['shipping_template_id'];
    }

    /**
     * Sets shipping_template_id
     *
     * @param int|null $shipping_template_id The numeric ID of the shipping template associated with the products in Etsy. You can find possible values in the \"cart.info\" API method response, in the field shipping_zones[]->id.
     *
     * @return self
     */
    public function setShippingTemplateId($shipping_template_id)
    {
        if (is_null($shipping_template_id)) {
            throw new \InvalidArgumentException('non-nullable shipping_template_id cannot be null');
        }
        $this->container['shipping_template_id'] = $shipping_template_id;

        return $this;
    }

    /**
     * Gets production_partner_ids
     *
     * @return string|null
     */
    public function getProductionPartnerIds()
    {
        return $this->container['production_partner_ids'];
    }

    /**
     * Sets production_partner_ids
     *
     * @param string|null $production_partner_ids Defines product's production partner ids that has to be added
     *
     * @return self
     */
    public function setProductionPartnerIds($production_partner_ids)
    {
        if (is_null($production_partner_ids)) {
            throw new \InvalidArgumentException('non-nullable production_partner_ids cannot be null');
        }
        $this->container['production_partner_ids'] = $production_partner_ids;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition The human-readable label for the condition (e.g., \"New\").
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets listing_duration
     *
     * @return string|null
     */
    public function getListingDuration()
    {
        return $this->container['listing_duration'];
    }

    /**
     * Sets listing_duration
     *
     * @param string|null $listing_duration Describes the number of days the seller wants the listing to be active. Look at cart.info method response for allowed values.
     *
     * @return self
     */
    public function setListingDuration($listing_duration)
    {
        if (is_null($listing_duration)) {
            throw new \InvalidArgumentException('non-nullable listing_duration cannot be null');
        }
        $this->container['listing_duration'] = $listing_duration;

        return $this;
    }

    /**
     * Gets listing_type
     *
     * @return string|null
     */
    public function getListingType()
    {
        return $this->container['listing_type'];
    }

    /**
     * Sets listing_type
     *
     * @param string|null $listing_type Indicates the selling format of the marketplace listing.
     *
     * @return self
     */
    public function setListingType($listing_type)
    {
        if (is_null($listing_type)) {
            throw new \InvalidArgumentException('non-nullable listing_type cannot be null');
        }
        $this->container['listing_type'] = $listing_type;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return string[]|null
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param string[]|null $payment_methods Identifies the payment method (such as PayPal) that the seller will accept when the buyer pays for the item. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">payment_methods[0] = string</br>payment_methods[1] = string</br></code></div></div>
     *
     * @return self
     */
    public function setPaymentMethods($payment_methods)
    {
        if (is_null($payment_methods)) {
            throw new \InvalidArgumentException('non-nullable payment_methods cannot be null');
        }
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets return_accepted
     *
     * @return bool|null
     */
    public function getReturnAccepted()
    {
        return $this->container['return_accepted'];
    }

    /**
     * Sets return_accepted
     *
     * @param bool|null $return_accepted Indicates whether the seller allows the buyer to return the item.
     *
     * @return self
     */
    public function setReturnAccepted($return_accepted)
    {
        if (is_null($return_accepted)) {
            throw new \InvalidArgumentException('non-nullable return_accepted cannot be null');
        }
        $this->container['return_accepted'] = $return_accepted;

        return $this;
    }

    /**
     * Gets shipping_details
     *
     * @return \OpenAPI\Client\Model\ProductAddShippingDetailsInner[]|null
     */
    public function getShippingDetails()
    {
        return $this->container['shipping_details'];
    }

    /**
     * Sets shipping_details
     *
     * @param \OpenAPI\Client\Model\ProductAddShippingDetailsInner[]|null $shipping_details The shipping details, including flat and calculated shipping costs and shipping insurance costs. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">shipping_details[0][<b>shipping_type</b>] = string </br>shipping_details[0][<b>shipping_service</b>] = string</br>shipping_details[0][<b>shipping_cost</b>] = decimal</br>shipping_details[1][<b>shipping_type</b>] = string </br>shipping_details[1][<b>shipping_service</b>] = string</br>shipping_details[1][<b>shipping_cost</b>] = decimal</br></code></div></div>
     *
     * @return self
     */
    public function setShippingDetails($shipping_details)
    {
        if (is_null($shipping_details)) {
            throw new \InvalidArgumentException('non-nullable shipping_details cannot be null');
        }
        $this->container['shipping_details'] = $shipping_details;

        return $this;
    }

    /**
     * Gets paypal_email
     *
     * @return string|null
     */
    public function getPaypalEmail()
    {
        return $this->container['paypal_email'];
    }

    /**
     * Sets paypal_email
     *
     * @param string|null $paypal_email Valid PayPal email address for the PayPal account that the seller will use if they offer PayPal as a payment method for the listing.
     *
     * @return self
     */
    public function setPaypalEmail($paypal_email)
    {
        if (is_null($paypal_email)) {
            throw new \InvalidArgumentException('non-nullable paypal_email cannot be null');
        }
        $this->container['paypal_email'] = $paypal_email;

        return $this;
    }

    /**
     * Gets seller_profiles
     *
     * @return \OpenAPI\Client\Model\ProductAddSellerProfiles|null
     */
    public function getSellerProfiles()
    {
        return $this->container['seller_profiles'];
    }

    /**
     * Sets seller_profiles
     *
     * @param \OpenAPI\Client\Model\ProductAddSellerProfiles|null $seller_profiles seller_profiles
     *
     * @return self
     */
    public function setSellerProfiles($seller_profiles)
    {
        if (is_null($seller_profiles)) {
            throw new \InvalidArgumentException('non-nullable seller_profiles cannot be null');
        }
        $this->container['seller_profiles'] = $seller_profiles;

        return $this;
    }

    /**
     * Gets package_details
     *
     * @return \OpenAPI\Client\Model\ProductAddPackageDetails|null
     */
    public function getPackageDetails()
    {
        return $this->container['package_details'];
    }

    /**
     * Sets package_details
     *
     * @param \OpenAPI\Client\Model\ProductAddPackageDetails|null $package_details package_details
     *
     * @return self
     */
    public function setPackageDetails($package_details)
    {
        if (is_null($package_details)) {
            throw new \InvalidArgumentException('non-nullable package_details cannot be null');
        }
        $this->container['package_details'] = $package_details;

        return $this;
    }

    /**
     * Gets best_offer
     *
     * @return \OpenAPI\Client\Model\ProductAddBestOffer|null
     */
    public function getBestOffer()
    {
        return $this->container['best_offer'];
    }

    /**
     * Sets best_offer
     *
     * @param \OpenAPI\Client\Model\ProductAddBestOffer|null $best_offer best_offer
     *
     * @return self
     */
    public function setBestOffer($best_offer)
    {
        if (is_null($best_offer)) {
            throw new \InvalidArgumentException('non-nullable best_offer cannot be null');
        }
        $this->container['best_offer'] = $best_offer;

        return $this;
    }

    /**
     * Gets sales_tax
     *
     * @return \OpenAPI\Client\Model\ProductAddSalesTax|null
     */
    public function getSalesTax()
    {
        return $this->container['sales_tax'];
    }

    /**
     * Sets sales_tax
     *
     * @param \OpenAPI\Client\Model\ProductAddSalesTax|null $sales_tax sales_tax
     *
     * @return self
     */
    public function setSalesTax($sales_tax)
    {
        if (is_null($sales_tax)) {
            throw new \InvalidArgumentException('non-nullable sales_tax cannot be null');
        }
        $this->container['sales_tax'] = $sales_tax;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode A barcode is a unique code composed of numbers used as a product identifier.
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string|null
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string|null $upc Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
     *
     * @return self
     */
    public function setUpc($upc)
    {
        if (is_null($upc)) {
            throw new \InvalidArgumentException('non-nullable upc cannot be null');
        }
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            throw new \InvalidArgumentException('non-nullable ean cannot be null');
        }
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets isbn
     *
     * @return string|null
     */
    public function getIsbn()
    {
        return $this->container['isbn'];
    }

    /**
     * Sets isbn
     *
     * @param string|null $isbn International Standard Book Number. An ISBN is a unique identifier for books.
     *
     * @return self
     */
    public function setIsbn($isbn)
    {
        if (is_null($isbn)) {
            throw new \InvalidArgumentException('non-nullable isbn cannot be null');
        }
        $this->container['isbn'] = $isbn;

        return $this;
    }

    /**
     * Gets specifics
     *
     * @return \OpenAPI\Client\Model\ProductAddSpecificsInner[]|null
     */
    public function getSpecifics()
    {
        return $this->container['specifics'];
    }

    /**
     * Sets specifics
     *
     * @param \OpenAPI\Client\Model\ProductAddSpecificsInner[]|null $specifics An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         The list of possible specifications can be obtained using the category.info method (additional_fields->product_specifics).         <b>The structure of the parameter is different for specific platforms.</b>
     *
     * @return self
     */
    public function setSpecifics($specifics)
    {
        if (is_null($specifics)) {
            throw new \InvalidArgumentException('non-nullable specifics cannot be null');
        }
        $this->container['specifics'] = $specifics;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url Image Url
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        if (is_null($image_url)) {
            throw new \InvalidArgumentException('non-nullable image_url cannot be null');
        }
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets image_name
     *
     * @return string|null
     */
    public function getImageName()
    {
        return $this->container['image_name'];
    }

    /**
     * Sets image_name
     *
     * @param string|null $image_name Defines image's name
     *
     * @return self
     */
    public function setImageName($image_name)
    {
        if (is_null($image_name)) {
            throw new \InvalidArgumentException('non-nullable image_name cannot be null');
        }
        $this->container['image_name'] = $image_name;

        return $this;
    }

    /**
     * Gets reserve_price
     *
     * @return float|null
     */
    public function getReservePrice()
    {
        return $this->container['reserve_price'];
    }

    /**
     * Sets reserve_price
     *
     * @param float|null $reserve_price Defines reserve price value
     *
     * @return self
     */
    public function setReservePrice($reserve_price)
    {
        if (is_null($reserve_price)) {
            throw new \InvalidArgumentException('non-nullable reserve_price cannot be null');
        }
        $this->container['reserve_price'] = $reserve_price;

        return $this;
    }

    /**
     * Gets buyitnow_price
     *
     * @return float|null
     */
    public function getBuyitnowPrice()
    {
        return $this->container['buyitnow_price'];
    }

    /**
     * Sets buyitnow_price
     *
     * @param float|null $buyitnow_price Defines buy it now value
     *
     * @return self
     */
    public function setBuyitnowPrice($buyitnow_price)
    {
        if (is_null($buyitnow_price)) {
            throw new \InvalidArgumentException('non-nullable buyitnow_price cannot be null');
        }
        $this->container['buyitnow_price'] = $buyitnow_price;

        return $this;
    }

    /**
     * Gets condition_description
     *
     * @return string|null
     */
    public function getConditionDescription()
    {
        return $this->container['condition_description'];
    }

    /**
     * Sets condition_description
     *
     * @param string|null $condition_description Detailed description of the product condition.
     *
     * @return self
     */
    public function setConditionDescription($condition_description)
    {
        if (is_null($condition_description)) {
            throw new \InvalidArgumentException('non-nullable condition_description cannot be null');
        }
        $this->container['condition_description'] = $condition_description;

        return $this;
    }

    /**
     * Gets auction_confidentiality_level
     *
     * @return string|null
     */
    public function getAuctionConfidentialityLevel()
    {
        return $this->container['auction_confidentiality_level'];
    }

    /**
     * Sets auction_confidentiality_level
     *
     * @param string|null $auction_confidentiality_level This allows buyers to remain anonymous when the bid or buy an item.
     *
     * @return self
     */
    public function setAuctionConfidentialityLevel($auction_confidentiality_level)
    {
        if (is_null($auction_confidentiality_level)) {
            throw new \InvalidArgumentException('non-nullable auction_confidentiality_level cannot be null');
        }
        $this->container['auction_confidentiality_level'] = $auction_confidentiality_level;

        return $this;
    }

    /**
     * Gets avail_from
     *
     * @return string|null
     */
    public function getAvailFrom()
    {
        return $this->container['avail_from'];
    }

    /**
     * Sets avail_from
     *
     * @param string|null $avail_from Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.
     *
     * @return self
     */
    public function setAvailFrom($avail_from)
    {
        if (is_null($avail_from)) {
            throw new \InvalidArgumentException('non-nullable avail_from cannot be null');
        }
        $this->container['avail_from'] = $avail_from;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags Product tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets clear_cache
     *
     * @return bool|null
     */
    public function getClearCache()
    {
        return $this->container['clear_cache'];
    }

    /**
     * Sets clear_cache
     *
     * @param bool|null $clear_cache Is cache clear required
     *
     * @return self
     */
    public function setClearCache($clear_cache)
    {
        if (is_null($clear_cache)) {
            throw new \InvalidArgumentException('non-nullable clear_cache cannot be null');
        }
        $this->container['clear_cache'] = $clear_cache;

        return $this;
    }

    /**
     * Gets asin
     *
     * @return string|null
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     *
     * @param string|null $asin Amazon Standard Identification Number.
     *
     * @return self
     */
    public function setAsin($asin)
    {
        if (is_null($asin)) {
            throw new \InvalidArgumentException('non-nullable asin cannot be null');
        }
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin Global Trade Item Number. An GTIN is an identifier for trade items.
     *
     * @return self
     */
    public function setGtin($gtin)
    {
        if (is_null($gtin)) {
            throw new \InvalidArgumentException('non-nullable gtin cannot be null');
        }
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string|null
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string|null $mpn Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.
     *
     * @return self
     */
    public function setMpn($mpn)
    {
        if (is_null($mpn)) {
            throw new \InvalidArgumentException('non-nullable mpn cannot be null');
        }
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return bool|null
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param bool|null $taxable Specifies whether a tax is charged
     *
     * @return self
     */
    public function setTaxable($taxable)
    {
        if (is_null($taxable)) {
            throw new \InvalidArgumentException('non-nullable taxable cannot be null');
        }
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return string|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param string|null $visible Set visibility status
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Defines product's status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets seo_url
     *
     * @return string|null
     */
    public function getSeoUrl()
    {
        return $this->container['seo_url'];
    }

    /**
     * Sets seo_url
     *
     * @param string|null $seo_url Defines unique URL for SEO
     *
     * @return self
     */
    public function setSeoUrl($seo_url)
    {
        if (is_null($seo_url)) {
            throw new \InvalidArgumentException('non-nullable seo_url cannot be null');
        }
        $this->container['seo_url'] = $seo_url;

        return $this;
    }

    /**
     * Gets product_class
     *
     * @return string|null
     */
    public function getProductClass()
    {
        return $this->container['product_class'];
    }

    /**
     * Sets product_class
     *
     * @param string|null $product_class A categorization for the product
     *
     * @return self
     */
    public function setProductClass($product_class)
    {
        if (is_null($product_class)) {
            throw new \InvalidArgumentException('non-nullable product_class cannot be null');
        }
        $this->container['product_class'] = $product_class;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string|null $product_type A categorization for the product
     *
     * @return self
     */
    public function setProductType($product_type)
    {
        if (is_null($product_type)) {
            throw new \InvalidArgumentException('non-nullable product_type cannot be null');
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets marketplace_item_properties
     *
     * @return string|null
     */
    public function getMarketplaceItemProperties()
    {
        return $this->container['marketplace_item_properties'];
    }

    /**
     * Sets marketplace_item_properties
     *
     * @param string|null $marketplace_item_properties String containing the JSON representation of the supplied data
     *
     * @return self
     */
    public function setMarketplaceItemProperties($marketplace_item_properties)
    {
        if (is_null($marketplace_item_properties)) {
            throw new \InvalidArgumentException('non-nullable marketplace_item_properties cannot be null');
        }
        $this->container['marketplace_item_properties'] = $marketplace_item_properties;

        return $this;
    }

    /**
     * Gets manage_stock
     *
     * @return bool|null
     */
    public function getManageStock()
    {
        return $this->container['manage_stock'];
    }

    /**
     * Sets manage_stock
     *
     * @param bool|null $manage_stock Defines inventory tracking for product
     *
     * @return self
     */
    public function setManageStock($manage_stock)
    {
        if (is_null($manage_stock)) {
            throw new \InvalidArgumentException('non-nullable manage_stock cannot be null');
        }
        $this->container['manage_stock'] = $manage_stock;

        return $this;
    }

    /**
     * Gets harmonized_system_code
     *
     * @return string|null
     */
    public function getHarmonizedSystemCode()
    {
        return $this->container['harmonized_system_code'];
    }

    /**
     * Sets harmonized_system_code
     *
     * @param string|null $harmonized_system_code Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes
     *
     * @return self
     */
    public function setHarmonizedSystemCode($harmonized_system_code)
    {
        if (is_null($harmonized_system_code)) {
            throw new \InvalidArgumentException('non-nullable harmonized_system_code cannot be null');
        }
        $this->container['harmonized_system_code'] = $harmonized_system_code;

        return $this;
    }

    /**
     * Gets country_of_origin
     *
     * @return string|null
     */
    public function getCountryOfOrigin()
    {
        return $this->container['country_of_origin'];
    }

    /**
     * Sets country_of_origin
     *
     * @param string|null $country_of_origin The country where the inventory item was made
     *
     * @return self
     */
    public function setCountryOfOrigin($country_of_origin)
    {
        if (is_null($country_of_origin)) {
            throw new \InvalidArgumentException('non-nullable country_of_origin cannot be null');
        }
        $this->container['country_of_origin'] = $country_of_origin;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \OpenAPI\Client\Model\ProductAddFilesInner[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \OpenAPI\Client\Model\ProductAddFilesInner[]|null $files File Url
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets search_keywords
     *
     * @return string|null
     */
    public function getSearchKeywords()
    {
        return $this->container['search_keywords'];
    }

    /**
     * Sets search_keywords
     *
     * @param string|null $search_keywords Defines unique search keywords
     *
     * @return self
     */
    public function setSearchKeywords($search_keywords)
    {
        if (is_null($search_keywords)) {
            throw new \InvalidArgumentException('non-nullable search_keywords cannot be null');
        }
        $this->container['search_keywords'] = $search_keywords;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id Store Id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string|null
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string|null $brand_name Defines product brand name
     *
     * @return self
     */
    public function setBrandName($brand_name)
    {
        if (is_null($brand_name)) {
            throw new \InvalidArgumentException('non-nullable brand_name cannot be null');
        }
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets is_virtual
     *
     * @return bool|null
     */
    public function getIsVirtual()
    {
        return $this->container['is_virtual'];
    }

    /**
     * Sets is_virtual
     *
     * @param bool|null $is_virtual Defines whether the product is virtual
     *
     * @return self
     */
    public function setIsVirtual($is_virtual)
    {
        if (is_null($is_virtual)) {
            throw new \InvalidArgumentException('non-nullable is_virtual cannot be null');
        }
        $this->container['is_virtual'] = $is_virtual;

        return $this;
    }

    /**
     * Gets is_free_shipping
     *
     * @return bool|null
     */
    public function getIsFreeShipping()
    {
        return $this->container['is_free_shipping'];
    }

    /**
     * Sets is_free_shipping
     *
     * @param bool|null $is_free_shipping Specifies product's free shipping flag that has to be added
     *
     * @return self
     */
    public function setIsFreeShipping($is_free_shipping)
    {
        if (is_null($is_free_shipping)) {
            throw new \InvalidArgumentException('non-nullable is_free_shipping cannot be null');
        }
        $this->container['is_free_shipping'] = $is_free_shipping;

        return $this;
    }

    /**
     * Gets in_stock
     *
     * @return bool|null
     */
    public function getInStock()
    {
        return $this->container['in_stock'];
    }

    /**
     * Sets in_stock
     *
     * @param bool|null $in_stock Set stock status
     *
     * @return self
     */
    public function setInStock($in_stock)
    {
        if (is_null($in_stock)) {
            throw new \InvalidArgumentException('non-nullable in_stock cannot be null');
        }
        $this->container['in_stock'] = $in_stock;

        return $this;
    }

    /**
     * Gets delivery_code
     *
     * @return string|null
     */
    public function getDeliveryCode()
    {
        return $this->container['delivery_code'];
    }

    /**
     * Sets delivery_code
     *
     * @param string|null $delivery_code The delivery promise that applies to offer
     *
     * @return self
     */
    public function setDeliveryCode($delivery_code)
    {
        if (is_null($delivery_code)) {
            throw new \InvalidArgumentException('non-nullable delivery_code cannot be null');
        }
        $this->container['delivery_code'] = $delivery_code;

        return $this;
    }

    /**
     * Gets product_reference
     *
     * @return string|null
     */
    public function getProductReference()
    {
        return $this->container['product_reference'];
    }

    /**
     * Sets product_reference
     *
     * @param string|null $product_reference Groups all variations, that you want to combine into one product.
     *
     * @return self
     */
    public function setProductReference($product_reference)
    {
        if (is_null($product_reference)) {
            throw new \InvalidArgumentException('non-nullable product_reference cannot be null');
        }
        $this->container['product_reference'] = $product_reference;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string|null
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string|null $delivery_type Defines the type of the delivery.
     *
     * @return self
     */
    public function setDeliveryType($delivery_type)
    {
        if (is_null($delivery_type)) {
            throw new \InvalidArgumentException('non-nullable delivery_type cannot be null');
        }
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return int|null
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param int|null $delivery_time Defines delivery time in days.
     *
     * @return self
     */
    public function setDeliveryTime($delivery_time)
    {
        if (is_null($delivery_time)) {
            throw new \InvalidArgumentException('non-nullable delivery_time cannot be null');
        }
        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets size_chart
     *
     * @return \OpenAPI\Client\Model\ProductAddSizeChart|null
     */
    public function getSizeChart()
    {
        return $this->container['size_chart'];
    }

    /**
     * Sets size_chart
     *
     * @param \OpenAPI\Client\Model\ProductAddSizeChart|null $size_chart size_chart
     *
     * @return self
     */
    public function setSizeChart($size_chart)
    {
        if (is_null($size_chart)) {
            throw new \InvalidArgumentException('non-nullable size_chart cannot be null');
        }
        $this->container['size_chart'] = $size_chart;

        return $this;
    }

    /**
     * Gets certifications
     *
     * @return \OpenAPI\Client\Model\ProductAddCertificationsInner[]|null
     */
    public function getCertifications()
    {
        return $this->container['certifications'];
    }

    /**
     * Sets certifications
     *
     * @param \OpenAPI\Client\Model\ProductAddCertificationsInner[]|null $certifications An array of product certifications. The list of possible certifications can be obtained using the \"<i>category.info</i>\" method (<i>additional_fields->rules->product_certifications</i>).
     *
     * @return self
     */
    public function setCertifications($certifications)
    {
        if (is_null($certifications)) {
            throw new \InvalidArgumentException('non-nullable certifications cannot be null');
        }
        $this->container['certifications'] = $certifications;

        return $this;
    }

    /**
     * Gets delivery_option_ids
     *
     * @return string|null
     */
    public function getDeliveryOptionIds()
    {
        return $this->container['delivery_option_ids'];
    }

    /**
     * Sets delivery_option_ids
     *
     * @param string|null $delivery_option_ids Defines delivery options for product by ids.
     *
     * @return self
     */
    public function setDeliveryOptionIds($delivery_option_ids)
    {
        if (is_null($delivery_option_ids)) {
            throw new \InvalidArgumentException('non-nullable delivery_option_ids cannot be null');
        }
        $this->container['delivery_option_ids'] = $delivery_option_ids;

        return $this;
    }

    /**
     * Gets manufacturer_info
     *
     * @return \OpenAPI\Client\Model\ProductAddManufacturerInfo|null
     */
    public function getManufacturerInfo()
    {
        return $this->container['manufacturer_info'];
    }

    /**
     * Sets manufacturer_info
     *
     * @param \OpenAPI\Client\Model\ProductAddManufacturerInfo|null $manufacturer_info manufacturer_info
     *
     * @return self
     */
    public function setManufacturerInfo($manufacturer_info)
    {
        if (is_null($manufacturer_info)) {
            throw new \InvalidArgumentException('non-nullable manufacturer_info cannot be null');
        }
        $this->container['manufacturer_info'] = $manufacturer_info;

        return $this;
    }

    /**
     * Gets when_made
     *
     * @return string|null
     */
    public function getWhenMade()
    {
        return $this->container['when_made'];
    }

    /**
     * Sets when_made
     *
     * @param string|null $when_made An enumerated string for the era in which the maker made the product.
     *
     * @return self
     */
    public function setWhenMade($when_made)
    {
        if (is_null($when_made)) {
            throw new \InvalidArgumentException('non-nullable when_made cannot be null');
        }
        $this->container['when_made'] = $when_made;

        return $this;
    }

    /**
     * Gets is_supply
     *
     * @return bool|null
     */
    public function getIsSupply()
    {
        return $this->container['is_supply'];
    }

    /**
     * Sets is_supply
     *
     * @param bool|null $is_supply If true, it indicates the product as a supply, otherwise it indicates that it is a finished product.
     *
     * @return self
     */
    public function setIsSupply($is_supply)
    {
        if (is_null($is_supply)) {
            throw new \InvalidArgumentException('non-nullable is_supply cannot be null');
        }
        $this->container['is_supply'] = $is_supply;

        return $this;
    }

    /**
     * Gets materials
     *
     * @return string[]|null
     */
    public function getMaterials()
    {
        return $this->container['materials'];
    }

    /**
     * Sets materials
     *
     * @param string[]|null $materials A list of material strings for materials used in the product.
     *
     * @return self
     */
    public function setMaterials($materials)
    {
        if (is_null($materials)) {
            throw new \InvalidArgumentException('non-nullable materials cannot be null');
        }
        $this->container['materials'] = $materials;

        return $this;
    }

    /**
     * Gets auto_renew
     *
     * @return bool|null
     */
    public function getAutoRenew()
    {
        return $this->container['auto_renew'];
    }

    /**
     * Sets auto_renew
     *
     * @param bool|null $auto_renew When true, automatically renews a listing upon its expiration.
     *
     * @return self
     */
    public function setAutoRenew($auto_renew)
    {
        if (is_null($auto_renew)) {
            throw new \InvalidArgumentException('non-nullable auto_renew cannot be null');
        }
        $this->container['auto_renew'] = $auto_renew;

        return $this;
    }

    /**
     * Gets allow_display_condition
     *
     * @return bool|null
     */
    public function getAllowDisplayCondition()
    {
        return $this->container['allow_display_condition'];
    }

    /**
     * Sets allow_display_condition
     *
     * @param bool|null $allow_display_condition Flag used to determine whether the product condition is shown to the customer on the product page.
     *
     * @return self
     */
    public function setAllowDisplayCondition($allow_display_condition)
    {
        if (is_null($allow_display_condition)) {
            throw new \InvalidArgumentException('non-nullable allow_display_condition cannot be null');
        }
        $this->container['allow_display_condition'] = $allow_display_condition;

        return $this;
    }

    /**
     * Gets min_order_quantity
     *
     * @return float|null
     */
    public function getMinOrderQuantity()
    {
        return $this->container['min_order_quantity'];
    }

    /**
     * Sets min_order_quantity
     *
     * @param float|null $min_order_quantity The minimum quantity an order must contain, to be eligible to purchase this product.
     *
     * @return self
     */
    public function setMinOrderQuantity($min_order_quantity)
    {
        if (is_null($min_order_quantity)) {
            throw new \InvalidArgumentException('non-nullable min_order_quantity cannot be null');
        }
        $this->container['min_order_quantity'] = $min_order_quantity;

        return $this;
    }

    /**
     * Gets max_order_quantity
     *
     * @return float|null
     */
    public function getMaxOrderQuantity()
    {
        return $this->container['max_order_quantity'];
    }

    /**
     * Sets max_order_quantity
     *
     * @param float|null $max_order_quantity The maximum quantity an order can contain when purchasing the product.
     *
     * @return self
     */
    public function setMaxOrderQuantity($max_order_quantity)
    {
        if (is_null($max_order_quantity)) {
            throw new \InvalidArgumentException('non-nullable max_order_quantity cannot be null');
        }
        $this->container['max_order_quantity'] = $max_order_quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


