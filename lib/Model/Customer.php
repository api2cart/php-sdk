<?php
/**
 * Customer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'email' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'phone' => 'string',
        'created_time' => '\OpenAPI\Client\Model\A2CDateTime',
        'modified_time' => '\OpenAPI\Client\Model\A2CDateTime',
        'group' => '\OpenAPI\Client\Model\CustomerGroup[]',
        'login' => 'string',
        'last_login' => '\OpenAPI\Client\Model\A2CDateTime',
        'birth_day' => '\OpenAPI\Client\Model\A2CDateTime',
        'status' => 'string',
        'news_letter_subscription' => 'bool',
        'consents' => '\OpenAPI\Client\Model\CustomerConsent[]',
        'gender' => 'string',
        'stores_ids' => 'string[]',
        'website' => 'string',
        'fax' => 'string',
        'company' => 'string',
        'ip_address' => 'string',
        'address_book' => '\OpenAPI\Client\Model\CustomerAddress[]',
        'lang_id' => 'string',
        'orders_count' => 'int',
        'last_order_id' => 'string',
        'additional_fields' => 'object',
        'custom_fields' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'email' => null,
        'first_name' => null,
        'last_name' => null,
        'phone' => null,
        'created_time' => null,
        'modified_time' => null,
        'group' => null,
        'login' => null,
        'last_login' => null,
        'birth_day' => null,
        'status' => null,
        'news_letter_subscription' => null,
        'consents' => null,
        'gender' => null,
        'stores_ids' => null,
        'website' => null,
        'fax' => null,
        'company' => null,
        'ip_address' => null,
        'address_book' => null,
        'lang_id' => null,
        'orders_count' => null,
        'last_order_id' => null,
        'additional_fields' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'email' => false,
        'first_name' => false,
        'last_name' => false,
        'phone' => false,
        'created_time' => false,
        'modified_time' => false,
        'group' => false,
        'login' => false,
        'last_login' => false,
        'birth_day' => false,
        'status' => false,
        'news_letter_subscription' => false,
        'consents' => false,
        'gender' => false,
        'stores_ids' => false,
        'website' => false,
        'fax' => false,
        'company' => false,
        'ip_address' => false,
        'address_book' => false,
        'lang_id' => false,
        'orders_count' => false,
        'last_order_id' => false,
        'additional_fields' => false,
        'custom_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'email' => 'email',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'phone' => 'phone',
        'created_time' => 'created_time',
        'modified_time' => 'modified_time',
        'group' => 'group',
        'login' => 'login',
        'last_login' => 'last_login',
        'birth_day' => 'birth_day',
        'status' => 'status',
        'news_letter_subscription' => 'news_letter_subscription',
        'consents' => 'consents',
        'gender' => 'gender',
        'stores_ids' => 'stores_ids',
        'website' => 'website',
        'fax' => 'fax',
        'company' => 'company',
        'ip_address' => 'ip_address',
        'address_book' => 'address_book',
        'lang_id' => 'lang_id',
        'orders_count' => 'orders_count',
        'last_order_id' => 'last_order_id',
        'additional_fields' => 'additional_fields',
        'custom_fields' => 'custom_fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'phone' => 'setPhone',
        'created_time' => 'setCreatedTime',
        'modified_time' => 'setModifiedTime',
        'group' => 'setGroup',
        'login' => 'setLogin',
        'last_login' => 'setLastLogin',
        'birth_day' => 'setBirthDay',
        'status' => 'setStatus',
        'news_letter_subscription' => 'setNewsLetterSubscription',
        'consents' => 'setConsents',
        'gender' => 'setGender',
        'stores_ids' => 'setStoresIds',
        'website' => 'setWebsite',
        'fax' => 'setFax',
        'company' => 'setCompany',
        'ip_address' => 'setIpAddress',
        'address_book' => 'setAddressBook',
        'lang_id' => 'setLangId',
        'orders_count' => 'setOrdersCount',
        'last_order_id' => 'setLastOrderId',
        'additional_fields' => 'setAdditionalFields',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'phone' => 'getPhone',
        'created_time' => 'getCreatedTime',
        'modified_time' => 'getModifiedTime',
        'group' => 'getGroup',
        'login' => 'getLogin',
        'last_login' => 'getLastLogin',
        'birth_day' => 'getBirthDay',
        'status' => 'getStatus',
        'news_letter_subscription' => 'getNewsLetterSubscription',
        'consents' => 'getConsents',
        'gender' => 'getGender',
        'stores_ids' => 'getStoresIds',
        'website' => 'getWebsite',
        'fax' => 'getFax',
        'company' => 'getCompany',
        'ip_address' => 'getIpAddress',
        'address_book' => 'getAddressBook',
        'lang_id' => 'getLangId',
        'orders_count' => 'getOrdersCount',
        'last_order_id' => 'getLastOrderId',
        'additional_fields' => 'getAdditionalFields',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('created_time', $data ?? [], null);
        $this->setIfExists('modified_time', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('login', $data ?? [], null);
        $this->setIfExists('last_login', $data ?? [], null);
        $this->setIfExists('birth_day', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('news_letter_subscription', $data ?? [], null);
        $this->setIfExists('consents', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('stores_ids', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('ip_address', $data ?? [], null);
        $this->setIfExists('address_book', $data ?? [], null);
        $this->setIfExists('lang_id', $data ?? [], null);
        $this->setIfExists('orders_count', $data ?? [], null);
        $this->setIfExists('last_order_id', $data ?? [], null);
        $this->setIfExists('additional_fields', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \OpenAPI\Client\Model\A2CDateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \OpenAPI\Client\Model\A2CDateTime|null $created_time created_time
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        if (is_null($created_time)) {
            throw new \InvalidArgumentException('non-nullable created_time cannot be null');
        }
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets modified_time
     *
     * @return \OpenAPI\Client\Model\A2CDateTime|null
     */
    public function getModifiedTime()
    {
        return $this->container['modified_time'];
    }

    /**
     * Sets modified_time
     *
     * @param \OpenAPI\Client\Model\A2CDateTime|null $modified_time modified_time
     *
     * @return self
     */
    public function setModifiedTime($modified_time)
    {
        if (is_null($modified_time)) {
            throw new \InvalidArgumentException('non-nullable modified_time cannot be null');
        }
        $this->container['modified_time'] = $modified_time;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\CustomerGroup[]|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\CustomerGroup[]|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string|null
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string|null $login login
     *
     * @return self
     */
    public function setLogin($login)
    {
        if (is_null($login)) {
            throw new \InvalidArgumentException('non-nullable login cannot be null');
        }
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets last_login
     *
     * @return \OpenAPI\Client\Model\A2CDateTime|null
     */
    public function getLastLogin()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     *
     * @param \OpenAPI\Client\Model\A2CDateTime|null $last_login last_login
     *
     * @return self
     */
    public function setLastLogin($last_login)
    {
        if (is_null($last_login)) {
            throw new \InvalidArgumentException('non-nullable last_login cannot be null');
        }
        $this->container['last_login'] = $last_login;

        return $this;
    }

    /**
     * Gets birth_day
     *
     * @return \OpenAPI\Client\Model\A2CDateTime|null
     */
    public function getBirthDay()
    {
        return $this->container['birth_day'];
    }

    /**
     * Sets birth_day
     *
     * @param \OpenAPI\Client\Model\A2CDateTime|null $birth_day birth_day
     *
     * @return self
     */
    public function setBirthDay($birth_day)
    {
        if (is_null($birth_day)) {
            throw new \InvalidArgumentException('non-nullable birth_day cannot be null');
        }
        $this->container['birth_day'] = $birth_day;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets news_letter_subscription
     *
     * @return bool|null
     */
    public function getNewsLetterSubscription()
    {
        return $this->container['news_letter_subscription'];
    }

    /**
     * Sets news_letter_subscription
     *
     * @param bool|null $news_letter_subscription news_letter_subscription
     *
     * @return self
     */
    public function setNewsLetterSubscription($news_letter_subscription)
    {
        if (is_null($news_letter_subscription)) {
            throw new \InvalidArgumentException('non-nullable news_letter_subscription cannot be null');
        }
        $this->container['news_letter_subscription'] = $news_letter_subscription;

        return $this;
    }

    /**
     * Gets consents
     *
     * @return \OpenAPI\Client\Model\CustomerConsent[]|null
     */
    public function getConsents()
    {
        return $this->container['consents'];
    }

    /**
     * Sets consents
     *
     * @param \OpenAPI\Client\Model\CustomerConsent[]|null $consents consents
     *
     * @return self
     */
    public function setConsents($consents)
    {
        if (is_null($consents)) {
            throw new \InvalidArgumentException('non-nullable consents cannot be null');
        }
        $this->container['consents'] = $consents;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets stores_ids
     *
     * @return string[]|null
     */
    public function getStoresIds()
    {
        return $this->container['stores_ids'];
    }

    /**
     * Sets stores_ids
     *
     * @param string[]|null $stores_ids stores_ids
     *
     * @return self
     */
    public function setStoresIds($stores_ids)
    {
        if (is_null($stores_ids)) {
            throw new \InvalidArgumentException('non-nullable stores_ids cannot be null');
        }
        $this->container['stores_ids'] = $stores_ids;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            throw new \InvalidArgumentException('non-nullable fax cannot be null');
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address ip_address
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        if (is_null($ip_address)) {
            throw new \InvalidArgumentException('non-nullable ip_address cannot be null');
        }
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets address_book
     *
     * @return \OpenAPI\Client\Model\CustomerAddress[]|null
     */
    public function getAddressBook()
    {
        return $this->container['address_book'];
    }

    /**
     * Sets address_book
     *
     * @param \OpenAPI\Client\Model\CustomerAddress[]|null $address_book address_book
     *
     * @return self
     */
    public function setAddressBook($address_book)
    {
        if (is_null($address_book)) {
            throw new \InvalidArgumentException('non-nullable address_book cannot be null');
        }
        $this->container['address_book'] = $address_book;

        return $this;
    }

    /**
     * Gets lang_id
     *
     * @return string|null
     */
    public function getLangId()
    {
        return $this->container['lang_id'];
    }

    /**
     * Sets lang_id
     *
     * @param string|null $lang_id lang_id
     *
     * @return self
     */
    public function setLangId($lang_id)
    {
        if (is_null($lang_id)) {
            throw new \InvalidArgumentException('non-nullable lang_id cannot be null');
        }
        $this->container['lang_id'] = $lang_id;

        return $this;
    }

    /**
     * Gets orders_count
     *
     * @return int|null
     */
    public function getOrdersCount()
    {
        return $this->container['orders_count'];
    }

    /**
     * Sets orders_count
     *
     * @param int|null $orders_count orders_count
     *
     * @return self
     */
    public function setOrdersCount($orders_count)
    {
        if (is_null($orders_count)) {
            throw new \InvalidArgumentException('non-nullable orders_count cannot be null');
        }
        $this->container['orders_count'] = $orders_count;

        return $this;
    }

    /**
     * Gets last_order_id
     *
     * @return string|null
     */
    public function getLastOrderId()
    {
        return $this->container['last_order_id'];
    }

    /**
     * Sets last_order_id
     *
     * @param string|null $last_order_id last_order_id
     *
     * @return self
     */
    public function setLastOrderId($last_order_id)
    {
        if (is_null($last_order_id)) {
            throw new \InvalidArgumentException('non-nullable last_order_id cannot be null');
        }
        $this->container['last_order_id'] = $last_order_id;

        return $this;
    }

    /**
     * Gets additional_fields
     *
     * @return object|null
     */
    public function getAdditionalFields()
    {
        return $this->container['additional_fields'];
    }

    /**
     * Sets additional_fields
     *
     * @param object|null $additional_fields additional_fields
     *
     * @return self
     */
    public function setAdditionalFields($additional_fields)
    {
        if (is_null($additional_fields)) {
            throw new \InvalidArgumentException('non-nullable additional_fields cannot be null');
        }
        $this->container['additional_fields'] = $additional_fields;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


