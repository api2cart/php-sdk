<?php
/**
 * OrderAdd
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderAdd Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderAdd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderAdd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'order_id' => 'string',
        'store_id' => 'string',
        'channel_id' => 'string',
        'order_status' => 'string',
        'fulfillment_status' => 'string',
        'financial_status' => 'string',
        'customer_email' => 'string',
        'customer_first_name' => 'string',
        'customer_last_name' => 'string',
        'customer_phone' => 'string',
        'customer_country' => 'string',
        'customer_birthday' => 'string',
        'customer_fax' => 'string',
        'order_payment_method' => 'string',
        'transaction_id' => 'string',
        'currency' => 'string',
        'date' => 'string',
        'date_modified' => 'string',
        'date_finished' => 'string',
        'bill_first_name' => 'string',
        'bill_last_name' => 'string',
        'bill_address_1' => 'string',
        'bill_address_2' => 'string',
        'bill_city' => 'string',
        'bill_postcode' => 'string',
        'bill_state' => 'string',
        'bill_country' => 'string',
        'bill_company' => 'string',
        'bill_phone' => 'string',
        'bill_fax' => 'string',
        'shipp_first_name' => 'string',
        'shipp_last_name' => 'string',
        'shipp_address_1' => 'string',
        'shipp_address_2' => 'string',
        'shipp_city' => 'string',
        'shipp_postcode' => 'string',
        'shipp_state' => 'string',
        'shipp_country' => 'string',
        'shipp_company' => 'string',
        'shipp_phone' => 'string',
        'shipp_fax' => 'string',
        'subtotal_price' => 'float',
        'tax_price' => 'float',
        'total_price' => 'float',
        'total_paid' => 'float',
        'total_weight' => 'int',
        'prices_inc_tax' => 'bool',
        'shipping_price' => 'float',
        'shipping_tax' => 'float',
        'discount' => 'float',
        'coupon_discount' => 'float',
        'gift_certificate_discount' => 'float',
        'order_shipping_method' => 'string',
        'carrier_id' => 'string',
        'warehouse_id' => 'string',
        'coupons' => 'string[]',
        'tags' => 'string',
        'comment' => 'string',
        'admin_comment' => 'string',
        'admin_private_comment' => 'string',
        'send_notifications' => 'bool',
        'send_admin_notifications' => 'bool',
        'external_source' => 'string',
        'inventory_behaviour' => 'string',
        'create_invoice' => 'bool',
        'note_attributes' => '\OpenAPI\Client\Model\OrderAddNoteAttributesInner[]',
        'clear_cache' => 'bool',
        'origin' => 'string',
        'order_item' => '\OpenAPI\Client\Model\OrderAddOrderItemInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'order_id' => null,
        'store_id' => null,
        'channel_id' => null,
        'order_status' => null,
        'fulfillment_status' => null,
        'financial_status' => null,
        'customer_email' => null,
        'customer_first_name' => null,
        'customer_last_name' => null,
        'customer_phone' => null,
        'customer_country' => null,
        'customer_birthday' => null,
        'customer_fax' => null,
        'order_payment_method' => null,
        'transaction_id' => null,
        'currency' => null,
        'date' => null,
        'date_modified' => null,
        'date_finished' => null,
        'bill_first_name' => null,
        'bill_last_name' => null,
        'bill_address_1' => null,
        'bill_address_2' => null,
        'bill_city' => null,
        'bill_postcode' => null,
        'bill_state' => null,
        'bill_country' => null,
        'bill_company' => null,
        'bill_phone' => null,
        'bill_fax' => null,
        'shipp_first_name' => null,
        'shipp_last_name' => null,
        'shipp_address_1' => null,
        'shipp_address_2' => null,
        'shipp_city' => null,
        'shipp_postcode' => null,
        'shipp_state' => null,
        'shipp_country' => null,
        'shipp_company' => null,
        'shipp_phone' => null,
        'shipp_fax' => null,
        'subtotal_price' => null,
        'tax_price' => null,
        'total_price' => null,
        'total_paid' => null,
        'total_weight' => null,
        'prices_inc_tax' => null,
        'shipping_price' => null,
        'shipping_tax' => null,
        'discount' => null,
        'coupon_discount' => null,
        'gift_certificate_discount' => null,
        'order_shipping_method' => null,
        'carrier_id' => null,
        'warehouse_id' => null,
        'coupons' => null,
        'tags' => null,
        'comment' => null,
        'admin_comment' => null,
        'admin_private_comment' => null,
        'send_notifications' => null,
        'send_admin_notifications' => null,
        'external_source' => null,
        'inventory_behaviour' => null,
        'create_invoice' => null,
        'note_attributes' => null,
        'clear_cache' => null,
        'origin' => null,
        'order_item' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'order_id' => false,
        'store_id' => false,
        'channel_id' => false,
        'order_status' => false,
        'fulfillment_status' => false,
        'financial_status' => false,
        'customer_email' => false,
        'customer_first_name' => false,
        'customer_last_name' => false,
        'customer_phone' => false,
        'customer_country' => false,
        'customer_birthday' => false,
        'customer_fax' => false,
        'order_payment_method' => false,
        'transaction_id' => false,
        'currency' => false,
        'date' => false,
        'date_modified' => false,
        'date_finished' => false,
        'bill_first_name' => false,
        'bill_last_name' => false,
        'bill_address_1' => false,
        'bill_address_2' => false,
        'bill_city' => false,
        'bill_postcode' => false,
        'bill_state' => false,
        'bill_country' => false,
        'bill_company' => false,
        'bill_phone' => false,
        'bill_fax' => false,
        'shipp_first_name' => false,
        'shipp_last_name' => false,
        'shipp_address_1' => false,
        'shipp_address_2' => false,
        'shipp_city' => false,
        'shipp_postcode' => false,
        'shipp_state' => false,
        'shipp_country' => false,
        'shipp_company' => false,
        'shipp_phone' => false,
        'shipp_fax' => false,
        'subtotal_price' => false,
        'tax_price' => false,
        'total_price' => false,
        'total_paid' => false,
        'total_weight' => false,
        'prices_inc_tax' => false,
        'shipping_price' => false,
        'shipping_tax' => false,
        'discount' => false,
        'coupon_discount' => false,
        'gift_certificate_discount' => false,
        'order_shipping_method' => false,
        'carrier_id' => false,
        'warehouse_id' => false,
        'coupons' => false,
        'tags' => false,
        'comment' => false,
        'admin_comment' => false,
        'admin_private_comment' => false,
        'send_notifications' => false,
        'send_admin_notifications' => false,
        'external_source' => false,
        'inventory_behaviour' => false,
        'create_invoice' => false,
        'note_attributes' => false,
        'clear_cache' => false,
        'origin' => false,
        'order_item' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'order_id' => 'order_id',
        'store_id' => 'store_id',
        'channel_id' => 'channel_id',
        'order_status' => 'order_status',
        'fulfillment_status' => 'fulfillment_status',
        'financial_status' => 'financial_status',
        'customer_email' => 'customer_email',
        'customer_first_name' => 'customer_first_name',
        'customer_last_name' => 'customer_last_name',
        'customer_phone' => 'customer_phone',
        'customer_country' => 'customer_country',
        'customer_birthday' => 'customer_birthday',
        'customer_fax' => 'customer_fax',
        'order_payment_method' => 'order_payment_method',
        'transaction_id' => 'transaction_id',
        'currency' => 'currency',
        'date' => 'date',
        'date_modified' => 'date_modified',
        'date_finished' => 'date_finished',
        'bill_first_name' => 'bill_first_name',
        'bill_last_name' => 'bill_last_name',
        'bill_address_1' => 'bill_address_1',
        'bill_address_2' => 'bill_address_2',
        'bill_city' => 'bill_city',
        'bill_postcode' => 'bill_postcode',
        'bill_state' => 'bill_state',
        'bill_country' => 'bill_country',
        'bill_company' => 'bill_company',
        'bill_phone' => 'bill_phone',
        'bill_fax' => 'bill_fax',
        'shipp_first_name' => 'shipp_first_name',
        'shipp_last_name' => 'shipp_last_name',
        'shipp_address_1' => 'shipp_address_1',
        'shipp_address_2' => 'shipp_address_2',
        'shipp_city' => 'shipp_city',
        'shipp_postcode' => 'shipp_postcode',
        'shipp_state' => 'shipp_state',
        'shipp_country' => 'shipp_country',
        'shipp_company' => 'shipp_company',
        'shipp_phone' => 'shipp_phone',
        'shipp_fax' => 'shipp_fax',
        'subtotal_price' => 'subtotal_price',
        'tax_price' => 'tax_price',
        'total_price' => 'total_price',
        'total_paid' => 'total_paid',
        'total_weight' => 'total_weight',
        'prices_inc_tax' => 'prices_inc_tax',
        'shipping_price' => 'shipping_price',
        'shipping_tax' => 'shipping_tax',
        'discount' => 'discount',
        'coupon_discount' => 'coupon_discount',
        'gift_certificate_discount' => 'gift_certificate_discount',
        'order_shipping_method' => 'order_shipping_method',
        'carrier_id' => 'carrier_id',
        'warehouse_id' => 'warehouse_id',
        'coupons' => 'coupons',
        'tags' => 'tags',
        'comment' => 'comment',
        'admin_comment' => 'admin_comment',
        'admin_private_comment' => 'admin_private_comment',
        'send_notifications' => 'send_notifications',
        'send_admin_notifications' => 'send_admin_notifications',
        'external_source' => 'external_source',
        'inventory_behaviour' => 'inventory_behaviour',
        'create_invoice' => 'create_invoice',
        'note_attributes' => 'note_attributes',
        'clear_cache' => 'clear_cache',
        'origin' => 'origin',
        'order_item' => 'order_item'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'order_id' => 'setOrderId',
        'store_id' => 'setStoreId',
        'channel_id' => 'setChannelId',
        'order_status' => 'setOrderStatus',
        'fulfillment_status' => 'setFulfillmentStatus',
        'financial_status' => 'setFinancialStatus',
        'customer_email' => 'setCustomerEmail',
        'customer_first_name' => 'setCustomerFirstName',
        'customer_last_name' => 'setCustomerLastName',
        'customer_phone' => 'setCustomerPhone',
        'customer_country' => 'setCustomerCountry',
        'customer_birthday' => 'setCustomerBirthday',
        'customer_fax' => 'setCustomerFax',
        'order_payment_method' => 'setOrderPaymentMethod',
        'transaction_id' => 'setTransactionId',
        'currency' => 'setCurrency',
        'date' => 'setDate',
        'date_modified' => 'setDateModified',
        'date_finished' => 'setDateFinished',
        'bill_first_name' => 'setBillFirstName',
        'bill_last_name' => 'setBillLastName',
        'bill_address_1' => 'setBillAddress1',
        'bill_address_2' => 'setBillAddress2',
        'bill_city' => 'setBillCity',
        'bill_postcode' => 'setBillPostcode',
        'bill_state' => 'setBillState',
        'bill_country' => 'setBillCountry',
        'bill_company' => 'setBillCompany',
        'bill_phone' => 'setBillPhone',
        'bill_fax' => 'setBillFax',
        'shipp_first_name' => 'setShippFirstName',
        'shipp_last_name' => 'setShippLastName',
        'shipp_address_1' => 'setShippAddress1',
        'shipp_address_2' => 'setShippAddress2',
        'shipp_city' => 'setShippCity',
        'shipp_postcode' => 'setShippPostcode',
        'shipp_state' => 'setShippState',
        'shipp_country' => 'setShippCountry',
        'shipp_company' => 'setShippCompany',
        'shipp_phone' => 'setShippPhone',
        'shipp_fax' => 'setShippFax',
        'subtotal_price' => 'setSubtotalPrice',
        'tax_price' => 'setTaxPrice',
        'total_price' => 'setTotalPrice',
        'total_paid' => 'setTotalPaid',
        'total_weight' => 'setTotalWeight',
        'prices_inc_tax' => 'setPricesIncTax',
        'shipping_price' => 'setShippingPrice',
        'shipping_tax' => 'setShippingTax',
        'discount' => 'setDiscount',
        'coupon_discount' => 'setCouponDiscount',
        'gift_certificate_discount' => 'setGiftCertificateDiscount',
        'order_shipping_method' => 'setOrderShippingMethod',
        'carrier_id' => 'setCarrierId',
        'warehouse_id' => 'setWarehouseId',
        'coupons' => 'setCoupons',
        'tags' => 'setTags',
        'comment' => 'setComment',
        'admin_comment' => 'setAdminComment',
        'admin_private_comment' => 'setAdminPrivateComment',
        'send_notifications' => 'setSendNotifications',
        'send_admin_notifications' => 'setSendAdminNotifications',
        'external_source' => 'setExternalSource',
        'inventory_behaviour' => 'setInventoryBehaviour',
        'create_invoice' => 'setCreateInvoice',
        'note_attributes' => 'setNoteAttributes',
        'clear_cache' => 'setClearCache',
        'origin' => 'setOrigin',
        'order_item' => 'setOrderItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'order_id' => 'getOrderId',
        'store_id' => 'getStoreId',
        'channel_id' => 'getChannelId',
        'order_status' => 'getOrderStatus',
        'fulfillment_status' => 'getFulfillmentStatus',
        'financial_status' => 'getFinancialStatus',
        'customer_email' => 'getCustomerEmail',
        'customer_first_name' => 'getCustomerFirstName',
        'customer_last_name' => 'getCustomerLastName',
        'customer_phone' => 'getCustomerPhone',
        'customer_country' => 'getCustomerCountry',
        'customer_birthday' => 'getCustomerBirthday',
        'customer_fax' => 'getCustomerFax',
        'order_payment_method' => 'getOrderPaymentMethod',
        'transaction_id' => 'getTransactionId',
        'currency' => 'getCurrency',
        'date' => 'getDate',
        'date_modified' => 'getDateModified',
        'date_finished' => 'getDateFinished',
        'bill_first_name' => 'getBillFirstName',
        'bill_last_name' => 'getBillLastName',
        'bill_address_1' => 'getBillAddress1',
        'bill_address_2' => 'getBillAddress2',
        'bill_city' => 'getBillCity',
        'bill_postcode' => 'getBillPostcode',
        'bill_state' => 'getBillState',
        'bill_country' => 'getBillCountry',
        'bill_company' => 'getBillCompany',
        'bill_phone' => 'getBillPhone',
        'bill_fax' => 'getBillFax',
        'shipp_first_name' => 'getShippFirstName',
        'shipp_last_name' => 'getShippLastName',
        'shipp_address_1' => 'getShippAddress1',
        'shipp_address_2' => 'getShippAddress2',
        'shipp_city' => 'getShippCity',
        'shipp_postcode' => 'getShippPostcode',
        'shipp_state' => 'getShippState',
        'shipp_country' => 'getShippCountry',
        'shipp_company' => 'getShippCompany',
        'shipp_phone' => 'getShippPhone',
        'shipp_fax' => 'getShippFax',
        'subtotal_price' => 'getSubtotalPrice',
        'tax_price' => 'getTaxPrice',
        'total_price' => 'getTotalPrice',
        'total_paid' => 'getTotalPaid',
        'total_weight' => 'getTotalWeight',
        'prices_inc_tax' => 'getPricesIncTax',
        'shipping_price' => 'getShippingPrice',
        'shipping_tax' => 'getShippingTax',
        'discount' => 'getDiscount',
        'coupon_discount' => 'getCouponDiscount',
        'gift_certificate_discount' => 'getGiftCertificateDiscount',
        'order_shipping_method' => 'getOrderShippingMethod',
        'carrier_id' => 'getCarrierId',
        'warehouse_id' => 'getWarehouseId',
        'coupons' => 'getCoupons',
        'tags' => 'getTags',
        'comment' => 'getComment',
        'admin_comment' => 'getAdminComment',
        'admin_private_comment' => 'getAdminPrivateComment',
        'send_notifications' => 'getSendNotifications',
        'send_admin_notifications' => 'getSendAdminNotifications',
        'external_source' => 'getExternalSource',
        'inventory_behaviour' => 'getInventoryBehaviour',
        'create_invoice' => 'getCreateInvoice',
        'note_attributes' => 'getNoteAttributes',
        'clear_cache' => 'getClearCache',
        'origin' => 'getOrigin',
        'order_item' => 'getOrderItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('channel_id', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('fulfillment_status', $data ?? [], null);
        $this->setIfExists('financial_status', $data ?? [], null);
        $this->setIfExists('customer_email', $data ?? [], null);
        $this->setIfExists('customer_first_name', $data ?? [], null);
        $this->setIfExists('customer_last_name', $data ?? [], null);
        $this->setIfExists('customer_phone', $data ?? [], null);
        $this->setIfExists('customer_country', $data ?? [], null);
        $this->setIfExists('customer_birthday', $data ?? [], null);
        $this->setIfExists('customer_fax', $data ?? [], null);
        $this->setIfExists('order_payment_method', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('date_modified', $data ?? [], null);
        $this->setIfExists('date_finished', $data ?? [], null);
        $this->setIfExists('bill_first_name', $data ?? [], null);
        $this->setIfExists('bill_last_name', $data ?? [], null);
        $this->setIfExists('bill_address_1', $data ?? [], null);
        $this->setIfExists('bill_address_2', $data ?? [], null);
        $this->setIfExists('bill_city', $data ?? [], null);
        $this->setIfExists('bill_postcode', $data ?? [], null);
        $this->setIfExists('bill_state', $data ?? [], null);
        $this->setIfExists('bill_country', $data ?? [], null);
        $this->setIfExists('bill_company', $data ?? [], null);
        $this->setIfExists('bill_phone', $data ?? [], null);
        $this->setIfExists('bill_fax', $data ?? [], null);
        $this->setIfExists('shipp_first_name', $data ?? [], null);
        $this->setIfExists('shipp_last_name', $data ?? [], null);
        $this->setIfExists('shipp_address_1', $data ?? [], null);
        $this->setIfExists('shipp_address_2', $data ?? [], null);
        $this->setIfExists('shipp_city', $data ?? [], null);
        $this->setIfExists('shipp_postcode', $data ?? [], null);
        $this->setIfExists('shipp_state', $data ?? [], null);
        $this->setIfExists('shipp_country', $data ?? [], null);
        $this->setIfExists('shipp_company', $data ?? [], null);
        $this->setIfExists('shipp_phone', $data ?? [], null);
        $this->setIfExists('shipp_fax', $data ?? [], null);
        $this->setIfExists('subtotal_price', $data ?? [], null);
        $this->setIfExists('tax_price', $data ?? [], 0);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('total_paid', $data ?? [], null);
        $this->setIfExists('total_weight', $data ?? [], null);
        $this->setIfExists('prices_inc_tax', $data ?? [], false);
        $this->setIfExists('shipping_price', $data ?? [], 0);
        $this->setIfExists('shipping_tax', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('coupon_discount', $data ?? [], null);
        $this->setIfExists('gift_certificate_discount', $data ?? [], null);
        $this->setIfExists('order_shipping_method', $data ?? [], null);
        $this->setIfExists('carrier_id', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('coupons', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('admin_comment', $data ?? [], null);
        $this->setIfExists('admin_private_comment', $data ?? [], null);
        $this->setIfExists('send_notifications', $data ?? [], false);
        $this->setIfExists('send_admin_notifications', $data ?? [], false);
        $this->setIfExists('external_source', $data ?? [], null);
        $this->setIfExists('inventory_behaviour', $data ?? [], 'bypass');
        $this->setIfExists('create_invoice', $data ?? [], false);
        $this->setIfExists('note_attributes', $data ?? [], null);
        $this->setIfExists('clear_cache', $data ?? [], true);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('order_item', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_status'] === null) {
            $invalidProperties[] = "'order_status' can't be null";
        }
        if ($this->container['customer_email'] === null) {
            $invalidProperties[] = "'customer_email' can't be null";
        }
        if ($this->container['bill_first_name'] === null) {
            $invalidProperties[] = "'bill_first_name' can't be null";
        }
        if ($this->container['bill_last_name'] === null) {
            $invalidProperties[] = "'bill_last_name' can't be null";
        }
        if ($this->container['bill_address_1'] === null) {
            $invalidProperties[] = "'bill_address_1' can't be null";
        }
        if ($this->container['bill_city'] === null) {
            $invalidProperties[] = "'bill_city' can't be null";
        }
        if ($this->container['bill_postcode'] === null) {
            $invalidProperties[] = "'bill_postcode' can't be null";
        }
        if ($this->container['bill_state'] === null) {
            $invalidProperties[] = "'bill_state' can't be null";
        }
        if ($this->container['bill_country'] === null) {
            $invalidProperties[] = "'bill_country' can't be null";
        }
        if (!is_null($this->container['coupons']) && (count($this->container['coupons']) < 1)) {
            $invalidProperties[] = "invalid value for 'coupons', number of items must be greater than or equal to 1.";
        }

        if ($this->container['order_item'] === null) {
            $invalidProperties[] = "'order_item' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Defines order's id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Defines the order id if it is supported by the cart
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id Defines store id where the order should be assigned
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string|null
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string|null $channel_id Channel ID
     *
     * @return self
     */
    public function setChannelId($channel_id)
    {
        if (is_null($channel_id)) {
            throw new \InvalidArgumentException('non-nullable channel_id cannot be null');
        }
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string $order_status Defines order status.
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets fulfillment_status
     *
     * @return string|null
     */
    public function getFulfillmentStatus()
    {
        return $this->container['fulfillment_status'];
    }

    /**
     * Sets fulfillment_status
     *
     * @param string|null $fulfillment_status Create order with fulfillment status
     *
     * @return self
     */
    public function setFulfillmentStatus($fulfillment_status)
    {
        if (is_null($fulfillment_status)) {
            throw new \InvalidArgumentException('non-nullable fulfillment_status cannot be null');
        }
        $this->container['fulfillment_status'] = $fulfillment_status;

        return $this;
    }

    /**
     * Gets financial_status
     *
     * @return string|null
     */
    public function getFinancialStatus()
    {
        return $this->container['financial_status'];
    }

    /**
     * Sets financial_status
     *
     * @param string|null $financial_status Create order with financial status
     *
     * @return self
     */
    public function setFinancialStatus($financial_status)
    {
        if (is_null($financial_status)) {
            throw new \InvalidArgumentException('non-nullable financial_status cannot be null');
        }
        $this->container['financial_status'] = $financial_status;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string $customer_email Defines the customer specified by email for whom order has to be created
     *
     * @return self
     */
    public function setCustomerEmail($customer_email)
    {
        if (is_null($customer_email)) {
            throw new \InvalidArgumentException('non-nullable customer_email cannot be null');
        }
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets customer_first_name
     *
     * @return string|null
     */
    public function getCustomerFirstName()
    {
        return $this->container['customer_first_name'];
    }

    /**
     * Sets customer_first_name
     *
     * @param string|null $customer_first_name Specifies customer's first name
     *
     * @return self
     */
    public function setCustomerFirstName($customer_first_name)
    {
        if (is_null($customer_first_name)) {
            throw new \InvalidArgumentException('non-nullable customer_first_name cannot be null');
        }
        $this->container['customer_first_name'] = $customer_first_name;

        return $this;
    }

    /**
     * Gets customer_last_name
     *
     * @return string|null
     */
    public function getCustomerLastName()
    {
        return $this->container['customer_last_name'];
    }

    /**
     * Sets customer_last_name
     *
     * @param string|null $customer_last_name Specifies customer’s last name
     *
     * @return self
     */
    public function setCustomerLastName($customer_last_name)
    {
        if (is_null($customer_last_name)) {
            throw new \InvalidArgumentException('non-nullable customer_last_name cannot be null');
        }
        $this->container['customer_last_name'] = $customer_last_name;

        return $this;
    }

    /**
     * Gets customer_phone
     *
     * @return string|null
     */
    public function getCustomerPhone()
    {
        return $this->container['customer_phone'];
    }

    /**
     * Sets customer_phone
     *
     * @param string|null $customer_phone Specifies customer’s phone
     *
     * @return self
     */
    public function setCustomerPhone($customer_phone)
    {
        if (is_null($customer_phone)) {
            throw new \InvalidArgumentException('non-nullable customer_phone cannot be null');
        }
        $this->container['customer_phone'] = $customer_phone;

        return $this;
    }

    /**
     * Gets customer_country
     *
     * @return string|null
     */
    public function getCustomerCountry()
    {
        return $this->container['customer_country'];
    }

    /**
     * Sets customer_country
     *
     * @param string|null $customer_country Specifies customer's address ISO code or name of country
     *
     * @return self
     */
    public function setCustomerCountry($customer_country)
    {
        if (is_null($customer_country)) {
            throw new \InvalidArgumentException('non-nullable customer_country cannot be null');
        }
        $this->container['customer_country'] = $customer_country;

        return $this;
    }

    /**
     * Gets customer_birthday
     *
     * @return string|null
     */
    public function getCustomerBirthday()
    {
        return $this->container['customer_birthday'];
    }

    /**
     * Sets customer_birthday
     *
     * @param string|null $customer_birthday Specifies customer’s birthday
     *
     * @return self
     */
    public function setCustomerBirthday($customer_birthday)
    {
        if (is_null($customer_birthday)) {
            throw new \InvalidArgumentException('non-nullable customer_birthday cannot be null');
        }
        $this->container['customer_birthday'] = $customer_birthday;

        return $this;
    }

    /**
     * Gets customer_fax
     *
     * @return string|null
     */
    public function getCustomerFax()
    {
        return $this->container['customer_fax'];
    }

    /**
     * Sets customer_fax
     *
     * @param string|null $customer_fax Specifies customer’s fax
     *
     * @return self
     */
    public function setCustomerFax($customer_fax)
    {
        if (is_null($customer_fax)) {
            throw new \InvalidArgumentException('non-nullable customer_fax cannot be null');
        }
        $this->container['customer_fax'] = $customer_fax;

        return $this;
    }

    /**
     * Gets order_payment_method
     *
     * @return string|null
     */
    public function getOrderPaymentMethod()
    {
        return $this->container['order_payment_method'];
    }

    /**
     * Sets order_payment_method
     *
     * @param string|null $order_payment_method Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
     *
     * @return self
     */
    public function setOrderPaymentMethod($order_payment_method)
    {
        if (is_null($order_payment_method)) {
            throw new \InvalidArgumentException('non-nullable order_payment_method cannot be null');
        }
        $this->container['order_payment_method'] = $order_payment_method;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id Payment transaction id
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency code of order
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date Specifies an order creation date in format Y-m-d H:i:s
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return string|null
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param string|null $date_modified Specifies order's  modification date
     *
     * @return self
     */
    public function setDateModified($date_modified)
    {
        if (is_null($date_modified)) {
            throw new \InvalidArgumentException('non-nullable date_modified cannot be null');
        }
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets date_finished
     *
     * @return string|null
     */
    public function getDateFinished()
    {
        return $this->container['date_finished'];
    }

    /**
     * Sets date_finished
     *
     * @param string|null $date_finished Specifies order's  finished date
     *
     * @return self
     */
    public function setDateFinished($date_finished)
    {
        if (is_null($date_finished)) {
            throw new \InvalidArgumentException('non-nullable date_finished cannot be null');
        }
        $this->container['date_finished'] = $date_finished;

        return $this;
    }

    /**
     * Gets bill_first_name
     *
     * @return string
     */
    public function getBillFirstName()
    {
        return $this->container['bill_first_name'];
    }

    /**
     * Sets bill_first_name
     *
     * @param string $bill_first_name Specifies billing first name
     *
     * @return self
     */
    public function setBillFirstName($bill_first_name)
    {
        if (is_null($bill_first_name)) {
            throw new \InvalidArgumentException('non-nullable bill_first_name cannot be null');
        }
        $this->container['bill_first_name'] = $bill_first_name;

        return $this;
    }

    /**
     * Gets bill_last_name
     *
     * @return string
     */
    public function getBillLastName()
    {
        return $this->container['bill_last_name'];
    }

    /**
     * Sets bill_last_name
     *
     * @param string $bill_last_name Specifies billing last name
     *
     * @return self
     */
    public function setBillLastName($bill_last_name)
    {
        if (is_null($bill_last_name)) {
            throw new \InvalidArgumentException('non-nullable bill_last_name cannot be null');
        }
        $this->container['bill_last_name'] = $bill_last_name;

        return $this;
    }

    /**
     * Gets bill_address_1
     *
     * @return string
     */
    public function getBillAddress1()
    {
        return $this->container['bill_address_1'];
    }

    /**
     * Sets bill_address_1
     *
     * @param string $bill_address_1 Specifies first billing address
     *
     * @return self
     */
    public function setBillAddress1($bill_address_1)
    {
        if (is_null($bill_address_1)) {
            throw new \InvalidArgumentException('non-nullable bill_address_1 cannot be null');
        }
        $this->container['bill_address_1'] = $bill_address_1;

        return $this;
    }

    /**
     * Gets bill_address_2
     *
     * @return string|null
     */
    public function getBillAddress2()
    {
        return $this->container['bill_address_2'];
    }

    /**
     * Sets bill_address_2
     *
     * @param string|null $bill_address_2 Specifies second billing address
     *
     * @return self
     */
    public function setBillAddress2($bill_address_2)
    {
        if (is_null($bill_address_2)) {
            throw new \InvalidArgumentException('non-nullable bill_address_2 cannot be null');
        }
        $this->container['bill_address_2'] = $bill_address_2;

        return $this;
    }

    /**
     * Gets bill_city
     *
     * @return string
     */
    public function getBillCity()
    {
        return $this->container['bill_city'];
    }

    /**
     * Sets bill_city
     *
     * @param string $bill_city Specifies billing city
     *
     * @return self
     */
    public function setBillCity($bill_city)
    {
        if (is_null($bill_city)) {
            throw new \InvalidArgumentException('non-nullable bill_city cannot be null');
        }
        $this->container['bill_city'] = $bill_city;

        return $this;
    }

    /**
     * Gets bill_postcode
     *
     * @return string
     */
    public function getBillPostcode()
    {
        return $this->container['bill_postcode'];
    }

    /**
     * Sets bill_postcode
     *
     * @param string $bill_postcode Specifies billing postcode
     *
     * @return self
     */
    public function setBillPostcode($bill_postcode)
    {
        if (is_null($bill_postcode)) {
            throw new \InvalidArgumentException('non-nullable bill_postcode cannot be null');
        }
        $this->container['bill_postcode'] = $bill_postcode;

        return $this;
    }

    /**
     * Gets bill_state
     *
     * @return string
     */
    public function getBillState()
    {
        return $this->container['bill_state'];
    }

    /**
     * Sets bill_state
     *
     * @param string $bill_state Specifies billing state code
     *
     * @return self
     */
    public function setBillState($bill_state)
    {
        if (is_null($bill_state)) {
            throw new \InvalidArgumentException('non-nullable bill_state cannot be null');
        }
        $this->container['bill_state'] = $bill_state;

        return $this;
    }

    /**
     * Gets bill_country
     *
     * @return string
     */
    public function getBillCountry()
    {
        return $this->container['bill_country'];
    }

    /**
     * Sets bill_country
     *
     * @param string $bill_country Specifies billing country code
     *
     * @return self
     */
    public function setBillCountry($bill_country)
    {
        if (is_null($bill_country)) {
            throw new \InvalidArgumentException('non-nullable bill_country cannot be null');
        }
        $this->container['bill_country'] = $bill_country;

        return $this;
    }

    /**
     * Gets bill_company
     *
     * @return string|null
     */
    public function getBillCompany()
    {
        return $this->container['bill_company'];
    }

    /**
     * Sets bill_company
     *
     * @param string|null $bill_company Specifies billing company
     *
     * @return self
     */
    public function setBillCompany($bill_company)
    {
        if (is_null($bill_company)) {
            throw new \InvalidArgumentException('non-nullable bill_company cannot be null');
        }
        $this->container['bill_company'] = $bill_company;

        return $this;
    }

    /**
     * Gets bill_phone
     *
     * @return string|null
     */
    public function getBillPhone()
    {
        return $this->container['bill_phone'];
    }

    /**
     * Sets bill_phone
     *
     * @param string|null $bill_phone Specifies billing phone
     *
     * @return self
     */
    public function setBillPhone($bill_phone)
    {
        if (is_null($bill_phone)) {
            throw new \InvalidArgumentException('non-nullable bill_phone cannot be null');
        }
        $this->container['bill_phone'] = $bill_phone;

        return $this;
    }

    /**
     * Gets bill_fax
     *
     * @return string|null
     */
    public function getBillFax()
    {
        return $this->container['bill_fax'];
    }

    /**
     * Sets bill_fax
     *
     * @param string|null $bill_fax Specifies billing fax
     *
     * @return self
     */
    public function setBillFax($bill_fax)
    {
        if (is_null($bill_fax)) {
            throw new \InvalidArgumentException('non-nullable bill_fax cannot be null');
        }
        $this->container['bill_fax'] = $bill_fax;

        return $this;
    }

    /**
     * Gets shipp_first_name
     *
     * @return string|null
     */
    public function getShippFirstName()
    {
        return $this->container['shipp_first_name'];
    }

    /**
     * Sets shipp_first_name
     *
     * @param string|null $shipp_first_name Specifies shipping first name
     *
     * @return self
     */
    public function setShippFirstName($shipp_first_name)
    {
        if (is_null($shipp_first_name)) {
            throw new \InvalidArgumentException('non-nullable shipp_first_name cannot be null');
        }
        $this->container['shipp_first_name'] = $shipp_first_name;

        return $this;
    }

    /**
     * Gets shipp_last_name
     *
     * @return string|null
     */
    public function getShippLastName()
    {
        return $this->container['shipp_last_name'];
    }

    /**
     * Sets shipp_last_name
     *
     * @param string|null $shipp_last_name Specifies shipping last name
     *
     * @return self
     */
    public function setShippLastName($shipp_last_name)
    {
        if (is_null($shipp_last_name)) {
            throw new \InvalidArgumentException('non-nullable shipp_last_name cannot be null');
        }
        $this->container['shipp_last_name'] = $shipp_last_name;

        return $this;
    }

    /**
     * Gets shipp_address_1
     *
     * @return string|null
     */
    public function getShippAddress1()
    {
        return $this->container['shipp_address_1'];
    }

    /**
     * Sets shipp_address_1
     *
     * @param string|null $shipp_address_1 Specifies first shipping address
     *
     * @return self
     */
    public function setShippAddress1($shipp_address_1)
    {
        if (is_null($shipp_address_1)) {
            throw new \InvalidArgumentException('non-nullable shipp_address_1 cannot be null');
        }
        $this->container['shipp_address_1'] = $shipp_address_1;

        return $this;
    }

    /**
     * Gets shipp_address_2
     *
     * @return string|null
     */
    public function getShippAddress2()
    {
        return $this->container['shipp_address_2'];
    }

    /**
     * Sets shipp_address_2
     *
     * @param string|null $shipp_address_2 Specifies second address line of a shipping street address
     *
     * @return self
     */
    public function setShippAddress2($shipp_address_2)
    {
        if (is_null($shipp_address_2)) {
            throw new \InvalidArgumentException('non-nullable shipp_address_2 cannot be null');
        }
        $this->container['shipp_address_2'] = $shipp_address_2;

        return $this;
    }

    /**
     * Gets shipp_city
     *
     * @return string|null
     */
    public function getShippCity()
    {
        return $this->container['shipp_city'];
    }

    /**
     * Sets shipp_city
     *
     * @param string|null $shipp_city Specifies shipping city
     *
     * @return self
     */
    public function setShippCity($shipp_city)
    {
        if (is_null($shipp_city)) {
            throw new \InvalidArgumentException('non-nullable shipp_city cannot be null');
        }
        $this->container['shipp_city'] = $shipp_city;

        return $this;
    }

    /**
     * Gets shipp_postcode
     *
     * @return string|null
     */
    public function getShippPostcode()
    {
        return $this->container['shipp_postcode'];
    }

    /**
     * Sets shipp_postcode
     *
     * @param string|null $shipp_postcode Specifies shipping postcode
     *
     * @return self
     */
    public function setShippPostcode($shipp_postcode)
    {
        if (is_null($shipp_postcode)) {
            throw new \InvalidArgumentException('non-nullable shipp_postcode cannot be null');
        }
        $this->container['shipp_postcode'] = $shipp_postcode;

        return $this;
    }

    /**
     * Gets shipp_state
     *
     * @return string|null
     */
    public function getShippState()
    {
        return $this->container['shipp_state'];
    }

    /**
     * Sets shipp_state
     *
     * @param string|null $shipp_state Specifies shipping state code
     *
     * @return self
     */
    public function setShippState($shipp_state)
    {
        if (is_null($shipp_state)) {
            throw new \InvalidArgumentException('non-nullable shipp_state cannot be null');
        }
        $this->container['shipp_state'] = $shipp_state;

        return $this;
    }

    /**
     * Gets shipp_country
     *
     * @return string|null
     */
    public function getShippCountry()
    {
        return $this->container['shipp_country'];
    }

    /**
     * Sets shipp_country
     *
     * @param string|null $shipp_country Specifies shipping country code
     *
     * @return self
     */
    public function setShippCountry($shipp_country)
    {
        if (is_null($shipp_country)) {
            throw new \InvalidArgumentException('non-nullable shipp_country cannot be null');
        }
        $this->container['shipp_country'] = $shipp_country;

        return $this;
    }

    /**
     * Gets shipp_company
     *
     * @return string|null
     */
    public function getShippCompany()
    {
        return $this->container['shipp_company'];
    }

    /**
     * Sets shipp_company
     *
     * @param string|null $shipp_company Specifies shipping company
     *
     * @return self
     */
    public function setShippCompany($shipp_company)
    {
        if (is_null($shipp_company)) {
            throw new \InvalidArgumentException('non-nullable shipp_company cannot be null');
        }
        $this->container['shipp_company'] = $shipp_company;

        return $this;
    }

    /**
     * Gets shipp_phone
     *
     * @return string|null
     */
    public function getShippPhone()
    {
        return $this->container['shipp_phone'];
    }

    /**
     * Sets shipp_phone
     *
     * @param string|null $shipp_phone Specifies shipping phone
     *
     * @return self
     */
    public function setShippPhone($shipp_phone)
    {
        if (is_null($shipp_phone)) {
            throw new \InvalidArgumentException('non-nullable shipp_phone cannot be null');
        }
        $this->container['shipp_phone'] = $shipp_phone;

        return $this;
    }

    /**
     * Gets shipp_fax
     *
     * @return string|null
     */
    public function getShippFax()
    {
        return $this->container['shipp_fax'];
    }

    /**
     * Sets shipp_fax
     *
     * @param string|null $shipp_fax Specifies shipping fax
     *
     * @return self
     */
    public function setShippFax($shipp_fax)
    {
        if (is_null($shipp_fax)) {
            throw new \InvalidArgumentException('non-nullable shipp_fax cannot be null');
        }
        $this->container['shipp_fax'] = $shipp_fax;

        return $this;
    }

    /**
     * Gets subtotal_price
     *
     * @return float|null
     */
    public function getSubtotalPrice()
    {
        return $this->container['subtotal_price'];
    }

    /**
     * Sets subtotal_price
     *
     * @param float|null $subtotal_price Total price of all ordered products multiplied by their number, excluding tax, shipping price and discounts
     *
     * @return self
     */
    public function setSubtotalPrice($subtotal_price)
    {
        if (is_null($subtotal_price)) {
            throw new \InvalidArgumentException('non-nullable subtotal_price cannot be null');
        }
        $this->container['subtotal_price'] = $subtotal_price;

        return $this;
    }

    /**
     * Gets tax_price
     *
     * @return float|null
     */
    public function getTaxPrice()
    {
        return $this->container['tax_price'];
    }

    /**
     * Sets tax_price
     *
     * @param float|null $tax_price The value of tax cost for order
     *
     * @return self
     */
    public function setTaxPrice($tax_price)
    {
        if (is_null($tax_price)) {
            throw new \InvalidArgumentException('non-nullable tax_price cannot be null');
        }
        $this->container['tax_price'] = $tax_price;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float|null $total_price Defines order's total price
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets total_paid
     *
     * @return float|null
     */
    public function getTotalPaid()
    {
        return $this->container['total_paid'];
    }

    /**
     * Sets total_paid
     *
     * @param float|null $total_paid Defines total paid amount for the order
     *
     * @return self
     */
    public function setTotalPaid($total_paid)
    {
        if (is_null($total_paid)) {
            throw new \InvalidArgumentException('non-nullable total_paid cannot be null');
        }
        $this->container['total_paid'] = $total_paid;

        return $this;
    }

    /**
     * Gets total_weight
     *
     * @return int|null
     */
    public function getTotalWeight()
    {
        return $this->container['total_weight'];
    }

    /**
     * Sets total_weight
     *
     * @param int|null $total_weight Defines the sum of all line item weights in grams for the order
     *
     * @return self
     */
    public function setTotalWeight($total_weight)
    {
        if (is_null($total_weight)) {
            throw new \InvalidArgumentException('non-nullable total_weight cannot be null');
        }
        $this->container['total_weight'] = $total_weight;

        return $this;
    }

    /**
     * Gets prices_inc_tax
     *
     * @return bool|null
     */
    public function getPricesIncTax()
    {
        return $this->container['prices_inc_tax'];
    }

    /**
     * Sets prices_inc_tax
     *
     * @param bool|null $prices_inc_tax Indicates whether prices and subtotal includes tax.
     *
     * @return self
     */
    public function setPricesIncTax($prices_inc_tax)
    {
        if (is_null($prices_inc_tax)) {
            throw new \InvalidArgumentException('non-nullable prices_inc_tax cannot be null');
        }
        $this->container['prices_inc_tax'] = $prices_inc_tax;

        return $this;
    }

    /**
     * Gets shipping_price
     *
     * @return float|null
     */
    public function getShippingPrice()
    {
        return $this->container['shipping_price'];
    }

    /**
     * Sets shipping_price
     *
     * @param float|null $shipping_price Specifies order's shipping price
     *
     * @return self
     */
    public function setShippingPrice($shipping_price)
    {
        if (is_null($shipping_price)) {
            throw new \InvalidArgumentException('non-nullable shipping_price cannot be null');
        }
        $this->container['shipping_price'] = $shipping_price;

        return $this;
    }

    /**
     * Gets shipping_tax
     *
     * @return float|null
     */
    public function getShippingTax()
    {
        return $this->container['shipping_tax'];
    }

    /**
     * Sets shipping_tax
     *
     * @param float|null $shipping_tax Specifies order's shipping price tax
     *
     * @return self
     */
    public function setShippingTax($shipping_tax)
    {
        if (is_null($shipping_tax)) {
            throw new \InvalidArgumentException('non-nullable shipping_tax cannot be null');
        }
        $this->container['shipping_tax'] = $shipping_tax;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount Specifies order's discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets coupon_discount
     *
     * @return float|null
     */
    public function getCouponDiscount()
    {
        return $this->container['coupon_discount'];
    }

    /**
     * Sets coupon_discount
     *
     * @param float|null $coupon_discount Specifies order's coupon discount
     *
     * @return self
     */
    public function setCouponDiscount($coupon_discount)
    {
        if (is_null($coupon_discount)) {
            throw new \InvalidArgumentException('non-nullable coupon_discount cannot be null');
        }
        $this->container['coupon_discount'] = $coupon_discount;

        return $this;
    }

    /**
     * Gets gift_certificate_discount
     *
     * @return float|null
     */
    public function getGiftCertificateDiscount()
    {
        return $this->container['gift_certificate_discount'];
    }

    /**
     * Sets gift_certificate_discount
     *
     * @param float|null $gift_certificate_discount Discounts for order with gift certificates
     *
     * @return self
     */
    public function setGiftCertificateDiscount($gift_certificate_discount)
    {
        if (is_null($gift_certificate_discount)) {
            throw new \InvalidArgumentException('non-nullable gift_certificate_discount cannot be null');
        }
        $this->container['gift_certificate_discount'] = $gift_certificate_discount;

        return $this;
    }

    /**
     * Gets order_shipping_method
     *
     * @return string|null
     */
    public function getOrderShippingMethod()
    {
        return $this->container['order_shipping_method'];
    }

    /**
     * Sets order_shipping_method
     *
     * @param string|null $order_shipping_method Defines order shipping method
     *
     * @return self
     */
    public function setOrderShippingMethod($order_shipping_method)
    {
        if (is_null($order_shipping_method)) {
            throw new \InvalidArgumentException('non-nullable order_shipping_method cannot be null');
        }
        $this->container['order_shipping_method'] = $order_shipping_method;

        return $this;
    }

    /**
     * Gets carrier_id
     *
     * @return string|null
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param string|null $carrier_id Defines tracking carrier id
     *
     * @return self
     */
    public function setCarrierId($carrier_id)
    {
        if (is_null($carrier_id)) {
            throw new \InvalidArgumentException('non-nullable carrier_id cannot be null');
        }
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets coupons
     *
     * @return string[]|null
     */
    public function getCoupons()
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     *
     * @param string[]|null $coupons Coupons that will be applied to order
     *
     * @return self
     */
    public function setCoupons($coupons)
    {
        if (is_null($coupons)) {
            throw new \InvalidArgumentException('non-nullable coupons cannot be null');
        }


        if ((count($coupons) < 1)) {
            throw new \InvalidArgumentException('invalid length for $coupons when calling OrderAdd., number of items must be greater than or equal to 1.');
        }
        $this->container['coupons'] = $coupons;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags Order tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Specifies order comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets admin_comment
     *
     * @return string|null
     */
    public function getAdminComment()
    {
        return $this->container['admin_comment'];
    }

    /**
     * Sets admin_comment
     *
     * @param string|null $admin_comment Specifies admin's order comment
     *
     * @return self
     */
    public function setAdminComment($admin_comment)
    {
        if (is_null($admin_comment)) {
            throw new \InvalidArgumentException('non-nullable admin_comment cannot be null');
        }
        $this->container['admin_comment'] = $admin_comment;

        return $this;
    }

    /**
     * Gets admin_private_comment
     *
     * @return string|null
     */
    public function getAdminPrivateComment()
    {
        return $this->container['admin_private_comment'];
    }

    /**
     * Sets admin_private_comment
     *
     * @param string|null $admin_private_comment Specifies private admin's order comment
     *
     * @return self
     */
    public function setAdminPrivateComment($admin_private_comment)
    {
        if (is_null($admin_private_comment)) {
            throw new \InvalidArgumentException('non-nullable admin_private_comment cannot be null');
        }
        $this->container['admin_private_comment'] = $admin_private_comment;

        return $this;
    }

    /**
     * Gets send_notifications
     *
     * @return bool|null
     */
    public function getSendNotifications()
    {
        return $this->container['send_notifications'];
    }

    /**
     * Sets send_notifications
     *
     * @param bool|null $send_notifications Send notifications to customer after order was created
     *
     * @return self
     */
    public function setSendNotifications($send_notifications)
    {
        if (is_null($send_notifications)) {
            throw new \InvalidArgumentException('non-nullable send_notifications cannot be null');
        }
        $this->container['send_notifications'] = $send_notifications;

        return $this;
    }

    /**
     * Gets send_admin_notifications
     *
     * @return bool|null
     */
    public function getSendAdminNotifications()
    {
        return $this->container['send_admin_notifications'];
    }

    /**
     * Sets send_admin_notifications
     *
     * @param bool|null $send_admin_notifications Notify admin when new order was created.
     *
     * @return self
     */
    public function setSendAdminNotifications($send_admin_notifications)
    {
        if (is_null($send_admin_notifications)) {
            throw new \InvalidArgumentException('non-nullable send_admin_notifications cannot be null');
        }
        $this->container['send_admin_notifications'] = $send_admin_notifications;

        return $this;
    }

    /**
     * Gets external_source
     *
     * @return string|null
     */
    public function getExternalSource()
    {
        return $this->container['external_source'];
    }

    /**
     * Sets external_source
     *
     * @param string|null $external_source Identifying the system used to generate the order
     *
     * @return self
     */
    public function setExternalSource($external_source)
    {
        if (is_null($external_source)) {
            throw new \InvalidArgumentException('non-nullable external_source cannot be null');
        }
        $this->container['external_source'] = $external_source;

        return $this;
    }

    /**
     * Gets inventory_behaviour
     *
     * @return string|null
     */
    public function getInventoryBehaviour()
    {
        return $this->container['inventory_behaviour'];
    }

    /**
     * Sets inventory_behaviour
     *
     * @param string|null $inventory_behaviour The behaviour to use when updating inventory.<hr><div style=\"font-style:normal\">Values description:<div style=\"margin-left: 2%; padding-top: 2%\"><div style=\"font-size:85%\"><b>bypass</b> = Do not claim inventory </br></br><b>decrement_ignoring_policy</b> = Ignore the product's </br> inventory policy and claim amounts</br></br><b>decrement_obeying_policy</b> =  Obey the product's </br> inventory policy.</br></br></div></div></div>
     *
     * @return self
     */
    public function setInventoryBehaviour($inventory_behaviour)
    {
        if (is_null($inventory_behaviour)) {
            throw new \InvalidArgumentException('non-nullable inventory_behaviour cannot be null');
        }
        $this->container['inventory_behaviour'] = $inventory_behaviour;

        return $this;
    }

    /**
     * Gets create_invoice
     *
     * @return bool|null
     */
    public function getCreateInvoice()
    {
        return $this->container['create_invoice'];
    }

    /**
     * Sets create_invoice
     *
     * @param bool|null $create_invoice Defines whether the invoice is created automatically along with the order
     *
     * @return self
     */
    public function setCreateInvoice($create_invoice)
    {
        if (is_null($create_invoice)) {
            throw new \InvalidArgumentException('non-nullable create_invoice cannot be null');
        }
        $this->container['create_invoice'] = $create_invoice;

        return $this;
    }

    /**
     * Gets note_attributes
     *
     * @return \OpenAPI\Client\Model\OrderAddNoteAttributesInner[]|null
     */
    public function getNoteAttributes()
    {
        return $this->container['note_attributes'];
    }

    /**
     * Sets note_attributes
     *
     * @param \OpenAPI\Client\Model\OrderAddNoteAttributesInner[]|null $note_attributes Defines note attributes
     *
     * @return self
     */
    public function setNoteAttributes($note_attributes)
    {
        if (is_null($note_attributes)) {
            throw new \InvalidArgumentException('non-nullable note_attributes cannot be null');
        }
        $this->container['note_attributes'] = $note_attributes;

        return $this;
    }

    /**
     * Gets clear_cache
     *
     * @return bool|null
     */
    public function getClearCache()
    {
        return $this->container['clear_cache'];
    }

    /**
     * Sets clear_cache
     *
     * @param bool|null $clear_cache Is cache clear required
     *
     * @return self
     */
    public function setClearCache($clear_cache)
    {
        if (is_null($clear_cache)) {
            throw new \InvalidArgumentException('non-nullable clear_cache cannot be null');
        }
        $this->container['clear_cache'] = $clear_cache;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string|null $origin The source of the order
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets order_item
     *
     * @return \OpenAPI\Client\Model\OrderAddOrderItemInner[]
     */
    public function getOrderItem()
    {
        return $this->container['order_item'];
    }

    /**
     * Sets order_item
     *
     * @param \OpenAPI\Client\Model\OrderAddOrderItemInner[] $order_item order_item
     *
     * @return self
     */
    public function setOrderItem($order_item)
    {
        if (is_null($order_item)) {
            throw new \InvalidArgumentException('non-nullable order_item cannot be null');
        }
        $this->container['order_item'] = $order_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


