<?php
/**
 * ProductOptionAdd
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductOptionAdd Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductOptionAdd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductOptionAdd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'type' => 'string',
        'product_id' => 'string',
        'default_option_value' => 'string',
        'option_values' => 'string',
        'description' => 'string',
        'avail' => 'bool',
        'sort_order' => 'int',
        'required' => 'bool',
        'values' => '\OpenAPI\Client\Model\ProductOptionAddValuesInner[]',
        'clear_cache' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'type' => null,
        'product_id' => null,
        'default_option_value' => null,
        'option_values' => null,
        'description' => null,
        'avail' => null,
        'sort_order' => null,
        'required' => null,
        'values' => null,
        'clear_cache' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'type' => false,
        'product_id' => false,
        'default_option_value' => false,
        'option_values' => false,
        'description' => false,
        'avail' => false,
        'sort_order' => false,
        'required' => false,
        'values' => false,
        'clear_cache' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'product_id' => 'product_id',
        'default_option_value' => 'default_option_value',
        'option_values' => 'option_values',
        'description' => 'description',
        'avail' => 'avail',
        'sort_order' => 'sort_order',
        'required' => 'required',
        'values' => 'values',
        'clear_cache' => 'clear_cache'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'product_id' => 'setProductId',
        'default_option_value' => 'setDefaultOptionValue',
        'option_values' => 'setOptionValues',
        'description' => 'setDescription',
        'avail' => 'setAvail',
        'sort_order' => 'setSortOrder',
        'required' => 'setRequired',
        'values' => 'setValues',
        'clear_cache' => 'setClearCache'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'product_id' => 'getProductId',
        'default_option_value' => 'getDefaultOptionValue',
        'option_values' => 'getOptionValues',
        'description' => 'getDescription',
        'avail' => 'getAvail',
        'sort_order' => 'getSortOrder',
        'required' => 'getRequired',
        'values' => 'getValues',
        'clear_cache' => 'getClearCache'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_OPTION_TYPE_SELECT = 'option_type_select';
    public const TYPE_OPTION_TYPE_TEXT = 'option_type_text';
    public const TYPE_OPTION_TYPE_RADIO = 'option_type_radio';
    public const TYPE_OPTION_TYPE_CHECKBOX = 'option_type_checkbox';
    public const TYPE_OPTION_TYPE_TEXTAREA = 'option_type_textarea';
    public const TYPE_OPTION_TYPE_READONLY = 'option_type_readonly';
    public const TYPE_OPTION_TYPE_MULTISELECT = 'option_type_multiselect';
    public const TYPE_OPTION_TYPE_MULTICHECKBOX = 'option_type_multicheckbox';
    public const TYPE_OPTION_TYPE_FILE = 'option_type_file';
    public const TYPE_OPTION_TYPE_DATE = 'option_type_date';
    public const TYPE_OPTION_TYPE_DATETIME = 'option_type_datetime';
    public const TYPE_OPTION_TYPE_TIME = 'option_type_time';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_OPTION_TYPE_SELECT,
            self::TYPE_OPTION_TYPE_TEXT,
            self::TYPE_OPTION_TYPE_RADIO,
            self::TYPE_OPTION_TYPE_CHECKBOX,
            self::TYPE_OPTION_TYPE_TEXTAREA,
            self::TYPE_OPTION_TYPE_READONLY,
            self::TYPE_OPTION_TYPE_MULTISELECT,
            self::TYPE_OPTION_TYPE_MULTICHECKBOX,
            self::TYPE_OPTION_TYPE_FILE,
            self::TYPE_OPTION_TYPE_DATE,
            self::TYPE_OPTION_TYPE_DATETIME,
            self::TYPE_OPTION_TYPE_TIME,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('default_option_value', $data ?? [], null);
        $this->setIfExists('option_values', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('avail', $data ?? [], true);
        $this->setIfExists('sort_order', $data ?? [], 0);
        $this->setIfExists('required', $data ?? [], false);
        $this->setIfExists('values', $data ?? [], null);
        $this->setIfExists('clear_cache', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Defines option's name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Defines option's type that has to be added
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id Defines product id where the option should be added
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets default_option_value
     *
     * @return string|null
     */
    public function getDefaultOptionValue()
    {
        return $this->container['default_option_value'];
    }

    /**
     * Sets default_option_value
     *
     * @param string|null $default_option_value Defines default option value that has to be added
     *
     * @return self
     */
    public function setDefaultOptionValue($default_option_value)
    {
        if (is_null($default_option_value)) {
            throw new \InvalidArgumentException('non-nullable default_option_value cannot be null');
        }
        $this->container['default_option_value'] = $default_option_value;

        return $this;
    }

    /**
     * Gets option_values
     *
     * @return string|null
     */
    public function getOptionValues()
    {
        return $this->container['option_values'];
    }

    /**
     * Sets option_values
     *
     * @param string|null $option_values Defines option values that has to be added
     *
     * @return self
     */
    public function setOptionValues($option_values)
    {
        if (is_null($option_values)) {
            throw new \InvalidArgumentException('non-nullable option_values cannot be null');
        }
        $this->container['option_values'] = $option_values;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Defines option's description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets avail
     *
     * @return bool|null
     */
    public function getAvail()
    {
        return $this->container['avail'];
    }

    /**
     * Sets avail
     *
     * @param bool|null $avail Defines whether the option is available
     *
     * @return self
     */
    public function setAvail($avail)
    {
        if (is_null($avail)) {
            throw new \InvalidArgumentException('non-nullable avail cannot be null');
        }
        $this->container['avail'] = $avail;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int|null $sort_order Sort number in the list
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        if (is_null($sort_order)) {
            throw new \InvalidArgumentException('non-nullable sort_order cannot be null');
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required Defines if the option is required
     *
     * @return self
     */
    public function setRequired($required)
    {
        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets values
     *
     * @return \OpenAPI\Client\Model\ProductOptionAddValuesInner[]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param \OpenAPI\Client\Model\ProductOptionAddValuesInner[]|null $values An array of option values.</b>
     *
     * @return self
     */
    public function setValues($values)
    {
        if (is_null($values)) {
            throw new \InvalidArgumentException('non-nullable values cannot be null');
        }
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets clear_cache
     *
     * @return bool|null
     */
    public function getClearCache()
    {
        return $this->container['clear_cache'];
    }

    /**
     * Sets clear_cache
     *
     * @param bool|null $clear_cache Is cache clear required
     *
     * @return self
     */
    public function setClearCache($clear_cache)
    {
        if (is_null($clear_cache)) {
            throw new \InvalidArgumentException('non-nullable clear_cache cannot be null');
        }
        $this->container['clear_cache'] = $clear_cache;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


