<?php
/**
 * ProductVariantUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductVariantUpdate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductVariantUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductVariantUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'store_id' => 'string',
        'id' => 'string',
        'product_id' => 'string',
        'warehouse_id' => 'string',
        'reserve_quantity' => 'float',
        'quantity' => 'float',
        'increase_quantity' => 'float',
        'reduce_quantity' => 'float',
        'price' => 'float',
        'special_price' => 'float',
        'retail_price' => 'float',
        'old_price' => 'float',
        'cost_price' => 'float',
        'fixed_cost_shipping_price' => 'float',
        'sprice_create' => 'string',
        'sprice_expire' => 'string',
        'manage_stock' => 'bool',
        'in_stock' => 'bool',
        'name' => 'string',
        'description' => 'string',
        'sku' => 'string',
        'meta_title' => 'string',
        'meta_description' => 'string',
        'meta_keywords' => 'string',
        'short_description' => 'string',
        'visible' => 'string',
        'status' => 'string',
        'backorder_status' => 'string',
        'weight' => 'float',
        'barcode' => 'string',
        'reindex' => 'bool',
        'taxable' => 'bool',
        'options' => '\OpenAPI\Client\Model\ProductVariantUpdateOptionsInner[]',
        'harmonized_system_code' => 'string',
        'country_of_origin' => 'string',
        'width' => 'float',
        'weight_unit' => 'string',
        'height' => 'float',
        'length' => 'float',
        'gtin' => 'string',
        'clear_cache' => 'bool',
        'lang_id' => 'string',
        'model' => 'string',
        'available_for_sale' => 'bool',
        'upc' => 'string',
        'mpn' => 'string',
        'ean' => 'string',
        'isbn' => 'string',
        'avail' => 'bool',
        'is_default' => 'bool',
        'is_free_shipping' => 'bool',
        'tax_class_id' => 'string',
        'is_virtual' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'store_id' => null,
        'id' => null,
        'product_id' => null,
        'warehouse_id' => null,
        'reserve_quantity' => null,
        'quantity' => null,
        'increase_quantity' => null,
        'reduce_quantity' => null,
        'price' => null,
        'special_price' => null,
        'retail_price' => null,
        'old_price' => null,
        'cost_price' => null,
        'fixed_cost_shipping_price' => null,
        'sprice_create' => null,
        'sprice_expire' => null,
        'manage_stock' => null,
        'in_stock' => null,
        'name' => null,
        'description' => null,
        'sku' => null,
        'meta_title' => null,
        'meta_description' => null,
        'meta_keywords' => null,
        'short_description' => null,
        'visible' => null,
        'status' => null,
        'backorder_status' => null,
        'weight' => null,
        'barcode' => null,
        'reindex' => null,
        'taxable' => null,
        'options' => null,
        'harmonized_system_code' => null,
        'country_of_origin' => null,
        'width' => null,
        'weight_unit' => null,
        'height' => null,
        'length' => null,
        'gtin' => null,
        'clear_cache' => null,
        'lang_id' => null,
        'model' => null,
        'available_for_sale' => null,
        'upc' => null,
        'mpn' => null,
        'ean' => null,
        'isbn' => null,
        'avail' => null,
        'is_default' => null,
        'is_free_shipping' => null,
        'tax_class_id' => null,
        'is_virtual' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'store_id' => false,
        'id' => false,
        'product_id' => false,
        'warehouse_id' => false,
        'reserve_quantity' => false,
        'quantity' => false,
        'increase_quantity' => false,
        'reduce_quantity' => false,
        'price' => false,
        'special_price' => false,
        'retail_price' => false,
        'old_price' => false,
        'cost_price' => false,
        'fixed_cost_shipping_price' => false,
        'sprice_create' => false,
        'sprice_expire' => false,
        'manage_stock' => false,
        'in_stock' => false,
        'name' => false,
        'description' => false,
        'sku' => false,
        'meta_title' => false,
        'meta_description' => false,
        'meta_keywords' => false,
        'short_description' => false,
        'visible' => false,
        'status' => false,
        'backorder_status' => false,
        'weight' => false,
        'barcode' => false,
        'reindex' => false,
        'taxable' => false,
        'options' => false,
        'harmonized_system_code' => false,
        'country_of_origin' => false,
        'width' => false,
        'weight_unit' => false,
        'height' => false,
        'length' => false,
        'gtin' => false,
        'clear_cache' => false,
        'lang_id' => false,
        'model' => false,
        'available_for_sale' => false,
        'upc' => false,
        'mpn' => false,
        'ean' => false,
        'isbn' => false,
        'avail' => false,
        'is_default' => false,
        'is_free_shipping' => false,
        'tax_class_id' => false,
        'is_virtual' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store_id' => 'store_id',
        'id' => 'id',
        'product_id' => 'product_id',
        'warehouse_id' => 'warehouse_id',
        'reserve_quantity' => 'reserve_quantity',
        'quantity' => 'quantity',
        'increase_quantity' => 'increase_quantity',
        'reduce_quantity' => 'reduce_quantity',
        'price' => 'price',
        'special_price' => 'special_price',
        'retail_price' => 'retail_price',
        'old_price' => 'old_price',
        'cost_price' => 'cost_price',
        'fixed_cost_shipping_price' => 'fixed_cost_shipping_price',
        'sprice_create' => 'sprice_create',
        'sprice_expire' => 'sprice_expire',
        'manage_stock' => 'manage_stock',
        'in_stock' => 'in_stock',
        'name' => 'name',
        'description' => 'description',
        'sku' => 'sku',
        'meta_title' => 'meta_title',
        'meta_description' => 'meta_description',
        'meta_keywords' => 'meta_keywords',
        'short_description' => 'short_description',
        'visible' => 'visible',
        'status' => 'status',
        'backorder_status' => 'backorder_status',
        'weight' => 'weight',
        'barcode' => 'barcode',
        'reindex' => 'reindex',
        'taxable' => 'taxable',
        'options' => 'options',
        'harmonized_system_code' => 'harmonized_system_code',
        'country_of_origin' => 'country_of_origin',
        'width' => 'width',
        'weight_unit' => 'weight_unit',
        'height' => 'height',
        'length' => 'length',
        'gtin' => 'gtin',
        'clear_cache' => 'clear_cache',
        'lang_id' => 'lang_id',
        'model' => 'model',
        'available_for_sale' => 'available_for_sale',
        'upc' => 'upc',
        'mpn' => 'mpn',
        'ean' => 'ean',
        'isbn' => 'isbn',
        'avail' => 'avail',
        'is_default' => 'is_default',
        'is_free_shipping' => 'is_free_shipping',
        'tax_class_id' => 'tax_class_id',
        'is_virtual' => 'is_virtual'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store_id' => 'setStoreId',
        'id' => 'setId',
        'product_id' => 'setProductId',
        'warehouse_id' => 'setWarehouseId',
        'reserve_quantity' => 'setReserveQuantity',
        'quantity' => 'setQuantity',
        'increase_quantity' => 'setIncreaseQuantity',
        'reduce_quantity' => 'setReduceQuantity',
        'price' => 'setPrice',
        'special_price' => 'setSpecialPrice',
        'retail_price' => 'setRetailPrice',
        'old_price' => 'setOldPrice',
        'cost_price' => 'setCostPrice',
        'fixed_cost_shipping_price' => 'setFixedCostShippingPrice',
        'sprice_create' => 'setSpriceCreate',
        'sprice_expire' => 'setSpriceExpire',
        'manage_stock' => 'setManageStock',
        'in_stock' => 'setInStock',
        'name' => 'setName',
        'description' => 'setDescription',
        'sku' => 'setSku',
        'meta_title' => 'setMetaTitle',
        'meta_description' => 'setMetaDescription',
        'meta_keywords' => 'setMetaKeywords',
        'short_description' => 'setShortDescription',
        'visible' => 'setVisible',
        'status' => 'setStatus',
        'backorder_status' => 'setBackorderStatus',
        'weight' => 'setWeight',
        'barcode' => 'setBarcode',
        'reindex' => 'setReindex',
        'taxable' => 'setTaxable',
        'options' => 'setOptions',
        'harmonized_system_code' => 'setHarmonizedSystemCode',
        'country_of_origin' => 'setCountryOfOrigin',
        'width' => 'setWidth',
        'weight_unit' => 'setWeightUnit',
        'height' => 'setHeight',
        'length' => 'setLength',
        'gtin' => 'setGtin',
        'clear_cache' => 'setClearCache',
        'lang_id' => 'setLangId',
        'model' => 'setModel',
        'available_for_sale' => 'setAvailableForSale',
        'upc' => 'setUpc',
        'mpn' => 'setMpn',
        'ean' => 'setEan',
        'isbn' => 'setIsbn',
        'avail' => 'setAvail',
        'is_default' => 'setIsDefault',
        'is_free_shipping' => 'setIsFreeShipping',
        'tax_class_id' => 'setTaxClassId',
        'is_virtual' => 'setIsVirtual'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store_id' => 'getStoreId',
        'id' => 'getId',
        'product_id' => 'getProductId',
        'warehouse_id' => 'getWarehouseId',
        'reserve_quantity' => 'getReserveQuantity',
        'quantity' => 'getQuantity',
        'increase_quantity' => 'getIncreaseQuantity',
        'reduce_quantity' => 'getReduceQuantity',
        'price' => 'getPrice',
        'special_price' => 'getSpecialPrice',
        'retail_price' => 'getRetailPrice',
        'old_price' => 'getOldPrice',
        'cost_price' => 'getCostPrice',
        'fixed_cost_shipping_price' => 'getFixedCostShippingPrice',
        'sprice_create' => 'getSpriceCreate',
        'sprice_expire' => 'getSpriceExpire',
        'manage_stock' => 'getManageStock',
        'in_stock' => 'getInStock',
        'name' => 'getName',
        'description' => 'getDescription',
        'sku' => 'getSku',
        'meta_title' => 'getMetaTitle',
        'meta_description' => 'getMetaDescription',
        'meta_keywords' => 'getMetaKeywords',
        'short_description' => 'getShortDescription',
        'visible' => 'getVisible',
        'status' => 'getStatus',
        'backorder_status' => 'getBackorderStatus',
        'weight' => 'getWeight',
        'barcode' => 'getBarcode',
        'reindex' => 'getReindex',
        'taxable' => 'getTaxable',
        'options' => 'getOptions',
        'harmonized_system_code' => 'getHarmonizedSystemCode',
        'country_of_origin' => 'getCountryOfOrigin',
        'width' => 'getWidth',
        'weight_unit' => 'getWeightUnit',
        'height' => 'getHeight',
        'length' => 'getLength',
        'gtin' => 'getGtin',
        'clear_cache' => 'getClearCache',
        'lang_id' => 'getLangId',
        'model' => 'getModel',
        'available_for_sale' => 'getAvailableForSale',
        'upc' => 'getUpc',
        'mpn' => 'getMpn',
        'ean' => 'getEan',
        'isbn' => 'getIsbn',
        'avail' => 'getAvail',
        'is_default' => 'getIsDefault',
        'is_free_shipping' => 'getIsFreeShipping',
        'tax_class_id' => 'getTaxClassId',
        'is_virtual' => 'getIsVirtual'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('reserve_quantity', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('increase_quantity', $data ?? [], 0);
        $this->setIfExists('reduce_quantity', $data ?? [], 0);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('special_price', $data ?? [], null);
        $this->setIfExists('retail_price', $data ?? [], null);
        $this->setIfExists('old_price', $data ?? [], null);
        $this->setIfExists('cost_price', $data ?? [], null);
        $this->setIfExists('fixed_cost_shipping_price', $data ?? [], null);
        $this->setIfExists('sprice_create', $data ?? [], null);
        $this->setIfExists('sprice_expire', $data ?? [], null);
        $this->setIfExists('manage_stock', $data ?? [], null);
        $this->setIfExists('in_stock', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('meta_title', $data ?? [], null);
        $this->setIfExists('meta_description', $data ?? [], null);
        $this->setIfExists('meta_keywords', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('backorder_status', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], 0);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('reindex', $data ?? [], true);
        $this->setIfExists('taxable', $data ?? [], true);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('harmonized_system_code', $data ?? [], null);
        $this->setIfExists('country_of_origin', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('gtin', $data ?? [], null);
        $this->setIfExists('clear_cache', $data ?? [], true);
        $this->setIfExists('lang_id', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('available_for_sale', $data ?? [], true);
        $this->setIfExists('upc', $data ?? [], null);
        $this->setIfExists('mpn', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('isbn', $data ?? [], null);
        $this->setIfExists('avail', $data ?? [], true);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('is_free_shipping', $data ?? [], null);
        $this->setIfExists('tax_class_id', $data ?? [], null);
        $this->setIfExists('is_virtual', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id Defines store id where the variant should be found
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Defines variant update specified by variant id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id Defines product's id where the variant has to be updated
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets reserve_quantity
     *
     * @return float|null
     */
    public function getReserveQuantity()
    {
        return $this->container['reserve_quantity'];
    }

    /**
     * Sets reserve_quantity
     *
     * @param float|null $reserve_quantity This parameter allows to reserve/unreserve product variants quantity.
     *
     * @return self
     */
    public function setReserveQuantity($reserve_quantity)
    {
        if (is_null($reserve_quantity)) {
            throw new \InvalidArgumentException('non-nullable reserve_quantity cannot be null');
        }
        $this->container['reserve_quantity'] = $reserve_quantity;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity Defines new products' variants quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets increase_quantity
     *
     * @return float|null
     */
    public function getIncreaseQuantity()
    {
        return $this->container['increase_quantity'];
    }

    /**
     * Sets increase_quantity
     *
     * @param float|null $increase_quantity Defines the incremental changes in product quantity
     *
     * @return self
     */
    public function setIncreaseQuantity($increase_quantity)
    {
        if (is_null($increase_quantity)) {
            throw new \InvalidArgumentException('non-nullable increase_quantity cannot be null');
        }
        $this->container['increase_quantity'] = $increase_quantity;

        return $this;
    }

    /**
     * Gets reduce_quantity
     *
     * @return float|null
     */
    public function getReduceQuantity()
    {
        return $this->container['reduce_quantity'];
    }

    /**
     * Sets reduce_quantity
     *
     * @param float|null $reduce_quantity Defines the decrement changes in product quantity
     *
     * @return self
     */
    public function setReduceQuantity($reduce_quantity)
    {
        if (is_null($reduce_quantity)) {
            throw new \InvalidArgumentException('non-nullable reduce_quantity cannot be null');
        }
        $this->container['reduce_quantity'] = $reduce_quantity;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Defines new product's variant price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets special_price
     *
     * @return float|null
     */
    public function getSpecialPrice()
    {
        return $this->container['special_price'];
    }

    /**
     * Sets special_price
     *
     * @param float|null $special_price Defines new product's variant special price
     *
     * @return self
     */
    public function setSpecialPrice($special_price)
    {
        if (is_null($special_price)) {
            throw new \InvalidArgumentException('non-nullable special_price cannot be null');
        }
        $this->container['special_price'] = $special_price;

        return $this;
    }

    /**
     * Gets retail_price
     *
     * @return float|null
     */
    public function getRetailPrice()
    {
        return $this->container['retail_price'];
    }

    /**
     * Sets retail_price
     *
     * @param float|null $retail_price Defines new product's retail price
     *
     * @return self
     */
    public function setRetailPrice($retail_price)
    {
        if (is_null($retail_price)) {
            throw new \InvalidArgumentException('non-nullable retail_price cannot be null');
        }
        $this->container['retail_price'] = $retail_price;

        return $this;
    }

    /**
     * Gets old_price
     *
     * @return float|null
     */
    public function getOldPrice()
    {
        return $this->container['old_price'];
    }

    /**
     * Sets old_price
     *
     * @param float|null $old_price Defines product's old price
     *
     * @return self
     */
    public function setOldPrice($old_price)
    {
        if (is_null($old_price)) {
            throw new \InvalidArgumentException('non-nullable old_price cannot be null');
        }
        $this->container['old_price'] = $old_price;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return float|null
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param float|null $cost_price Defines new product's cost price
     *
     * @return self
     */
    public function setCostPrice($cost_price)
    {
        if (is_null($cost_price)) {
            throw new \InvalidArgumentException('non-nullable cost_price cannot be null');
        }
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets fixed_cost_shipping_price
     *
     * @return float|null
     */
    public function getFixedCostShippingPrice()
    {
        return $this->container['fixed_cost_shipping_price'];
    }

    /**
     * Sets fixed_cost_shipping_price
     *
     * @param float|null $fixed_cost_shipping_price Specifies fixed cost shipping price
     *
     * @return self
     */
    public function setFixedCostShippingPrice($fixed_cost_shipping_price)
    {
        if (is_null($fixed_cost_shipping_price)) {
            throw new \InvalidArgumentException('non-nullable fixed_cost_shipping_price cannot be null');
        }
        $this->container['fixed_cost_shipping_price'] = $fixed_cost_shipping_price;

        return $this;
    }

    /**
     * Gets sprice_create
     *
     * @return string|null
     */
    public function getSpriceCreate()
    {
        return $this->container['sprice_create'];
    }

    /**
     * Sets sprice_create
     *
     * @param string|null $sprice_create Defines the date of special price creation
     *
     * @return self
     */
    public function setSpriceCreate($sprice_create)
    {
        if (is_null($sprice_create)) {
            throw new \InvalidArgumentException('non-nullable sprice_create cannot be null');
        }
        $this->container['sprice_create'] = $sprice_create;

        return $this;
    }

    /**
     * Gets sprice_expire
     *
     * @return string|null
     */
    public function getSpriceExpire()
    {
        return $this->container['sprice_expire'];
    }

    /**
     * Sets sprice_expire
     *
     * @param string|null $sprice_expire Defines the term of special price offer duration
     *
     * @return self
     */
    public function setSpriceExpire($sprice_expire)
    {
        if (is_null($sprice_expire)) {
            throw new \InvalidArgumentException('non-nullable sprice_expire cannot be null');
        }
        $this->container['sprice_expire'] = $sprice_expire;

        return $this;
    }

    /**
     * Gets manage_stock
     *
     * @return bool|null
     */
    public function getManageStock()
    {
        return $this->container['manage_stock'];
    }

    /**
     * Sets manage_stock
     *
     * @param bool|null $manage_stock Defines inventory tracking for product variant
     *
     * @return self
     */
    public function setManageStock($manage_stock)
    {
        if (is_null($manage_stock)) {
            throw new \InvalidArgumentException('non-nullable manage_stock cannot be null');
        }
        $this->container['manage_stock'] = $manage_stock;

        return $this;
    }

    /**
     * Gets in_stock
     *
     * @return bool|null
     */
    public function getInStock()
    {
        return $this->container['in_stock'];
    }

    /**
     * Sets in_stock
     *
     * @param bool|null $in_stock Set stock status
     *
     * @return self
     */
    public function setInStock($in_stock)
    {
        if (is_null($in_stock)) {
            throw new \InvalidArgumentException('non-nullable in_stock cannot be null');
        }
        $this->container['in_stock'] = $in_stock;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Defines variant's name that has to be updated
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Specifies variant's description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Defines new product's variant sku
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets meta_title
     *
     * @return string|null
     */
    public function getMetaTitle()
    {
        return $this->container['meta_title'];
    }

    /**
     * Sets meta_title
     *
     * @param string|null $meta_title Defines unique meta title for each entity
     *
     * @return self
     */
    public function setMetaTitle($meta_title)
    {
        if (is_null($meta_title)) {
            throw new \InvalidArgumentException('non-nullable meta_title cannot be null');
        }
        $this->container['meta_title'] = $meta_title;

        return $this;
    }

    /**
     * Gets meta_description
     *
     * @return string|null
     */
    public function getMetaDescription()
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     *
     * @param string|null $meta_description Defines unique meta description of a entity
     *
     * @return self
     */
    public function setMetaDescription($meta_description)
    {
        if (is_null($meta_description)) {
            throw new \InvalidArgumentException('non-nullable meta_description cannot be null');
        }
        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets meta_keywords
     *
     * @return string|null
     */
    public function getMetaKeywords()
    {
        return $this->container['meta_keywords'];
    }

    /**
     * Sets meta_keywords
     *
     * @param string|null $meta_keywords Defines unique meta keywords for each entity
     *
     * @return self
     */
    public function setMetaKeywords($meta_keywords)
    {
        if (is_null($meta_keywords)) {
            throw new \InvalidArgumentException('non-nullable meta_keywords cannot be null');
        }
        $this->container['meta_keywords'] = $meta_keywords;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description Defines short description
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if (is_null($short_description)) {
            throw new \InvalidArgumentException('non-nullable short_description cannot be null');
        }
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return string|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param string|null $visible Set visibility status
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Defines product variant's status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets backorder_status
     *
     * @return string|null
     */
    public function getBackorderStatus()
    {
        return $this->container['backorder_status'];
    }

    /**
     * Sets backorder_status
     *
     * @param string|null $backorder_status Set backorder status
     *
     * @return self
     */
    public function setBackorderStatus($backorder_status)
    {
        if (is_null($backorder_status)) {
            throw new \InvalidArgumentException('non-nullable backorder_status cannot be null');
        }
        $this->container['backorder_status'] = $backorder_status;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight Weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode A barcode is a unique code composed of numbers used as a product identifier.
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets reindex
     *
     * @return bool|null
     */
    public function getReindex()
    {
        return $this->container['reindex'];
    }

    /**
     * Sets reindex
     *
     * @param bool|null $reindex Is reindex required
     *
     * @return self
     */
    public function setReindex($reindex)
    {
        if (is_null($reindex)) {
            throw new \InvalidArgumentException('non-nullable reindex cannot be null');
        }
        $this->container['reindex'] = $reindex;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return bool|null
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param bool|null $taxable Specifies whether a tax is charged
     *
     * @return self
     */
    public function setTaxable($taxable)
    {
        if (is_null($taxable)) {
            throw new \InvalidArgumentException('non-nullable taxable cannot be null');
        }
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \OpenAPI\Client\Model\ProductVariantUpdateOptionsInner[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \OpenAPI\Client\Model\ProductVariantUpdateOptionsInner[]|null $options Defines variant's options list
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets harmonized_system_code
     *
     * @return string|null
     */
    public function getHarmonizedSystemCode()
    {
        return $this->container['harmonized_system_code'];
    }

    /**
     * Sets harmonized_system_code
     *
     * @param string|null $harmonized_system_code Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes
     *
     * @return self
     */
    public function setHarmonizedSystemCode($harmonized_system_code)
    {
        if (is_null($harmonized_system_code)) {
            throw new \InvalidArgumentException('non-nullable harmonized_system_code cannot be null');
        }
        $this->container['harmonized_system_code'] = $harmonized_system_code;

        return $this;
    }

    /**
     * Gets country_of_origin
     *
     * @return string|null
     */
    public function getCountryOfOrigin()
    {
        return $this->container['country_of_origin'];
    }

    /**
     * Sets country_of_origin
     *
     * @param string|null $country_of_origin The country where the inventory item was made
     *
     * @return self
     */
    public function setCountryOfOrigin($country_of_origin)
    {
        if (is_null($country_of_origin)) {
            throw new \InvalidArgumentException('non-nullable country_of_origin cannot be null');
        }
        $this->container['country_of_origin'] = $country_of_origin;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width Defines product's width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return string|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param string|null $weight_unit Weight Unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {
        if (is_null($weight_unit)) {
            throw new \InvalidArgumentException('non-nullable weight_unit cannot be null');
        }
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float|null $height Defines product's height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float|null $length Defines product's length
     *
     * @return self
     */
    public function setLength($length)
    {
        if (is_null($length)) {
            throw new \InvalidArgumentException('non-nullable length cannot be null');
        }
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin Global Trade Item Number. An GTIN is an identifier for trade items.
     *
     * @return self
     */
    public function setGtin($gtin)
    {
        if (is_null($gtin)) {
            throw new \InvalidArgumentException('non-nullable gtin cannot be null');
        }
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets clear_cache
     *
     * @return bool|null
     */
    public function getClearCache()
    {
        return $this->container['clear_cache'];
    }

    /**
     * Sets clear_cache
     *
     * @param bool|null $clear_cache Is cache clear required
     *
     * @return self
     */
    public function setClearCache($clear_cache)
    {
        if (is_null($clear_cache)) {
            throw new \InvalidArgumentException('non-nullable clear_cache cannot be null');
        }
        $this->container['clear_cache'] = $clear_cache;

        return $this;
    }

    /**
     * Gets lang_id
     *
     * @return string|null
     */
    public function getLangId()
    {
        return $this->container['lang_id'];
    }

    /**
     * Sets lang_id
     *
     * @param string|null $lang_id Language id
     *
     * @return self
     */
    public function setLangId($lang_id)
    {
        if (is_null($lang_id)) {
            throw new \InvalidArgumentException('non-nullable lang_id cannot be null');
        }
        $this->container['lang_id'] = $lang_id;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model Specifies variant's model that has to be added
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets available_for_sale
     *
     * @return bool|null
     */
    public function getAvailableForSale()
    {
        return $this->container['available_for_sale'];
    }

    /**
     * Sets available_for_sale
     *
     * @param bool|null $available_for_sale Specifies the set of visible/invisible product's variants for sale
     *
     * @return self
     */
    public function setAvailableForSale($available_for_sale)
    {
        if (is_null($available_for_sale)) {
            throw new \InvalidArgumentException('non-nullable available_for_sale cannot be null');
        }
        $this->container['available_for_sale'] = $available_for_sale;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string|null
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string|null $upc Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
     *
     * @return self
     */
    public function setUpc($upc)
    {
        if (is_null($upc)) {
            throw new \InvalidArgumentException('non-nullable upc cannot be null');
        }
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string|null
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string|null $mpn Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.
     *
     * @return self
     */
    public function setMpn($mpn)
    {
        if (is_null($mpn)) {
            throw new \InvalidArgumentException('non-nullable mpn cannot be null');
        }
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            throw new \InvalidArgumentException('non-nullable ean cannot be null');
        }
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets isbn
     *
     * @return string|null
     */
    public function getIsbn()
    {
        return $this->container['isbn'];
    }

    /**
     * Sets isbn
     *
     * @param string|null $isbn International Standard Book Number. An ISBN is a unique identifier for books.
     *
     * @return self
     */
    public function setIsbn($isbn)
    {
        if (is_null($isbn)) {
            throw new \InvalidArgumentException('non-nullable isbn cannot be null');
        }
        $this->container['isbn'] = $isbn;

        return $this;
    }

    /**
     * Gets avail
     *
     * @return bool|null
     */
    public function getAvail()
    {
        return $this->container['avail'];
    }

    /**
     * Sets avail
     *
     * @param bool|null $avail Defines category's visibility status
     *
     * @return self
     */
    public function setAvail($avail)
    {
        if (is_null($avail)) {
            throw new \InvalidArgumentException('non-nullable avail cannot be null');
        }
        $this->container['avail'] = $avail;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default Defines as a default variant
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets is_free_shipping
     *
     * @return bool|null
     */
    public function getIsFreeShipping()
    {
        return $this->container['is_free_shipping'];
    }

    /**
     * Sets is_free_shipping
     *
     * @param bool|null $is_free_shipping Specifies variant's free shipping flag that has to be added
     *
     * @return self
     */
    public function setIsFreeShipping($is_free_shipping)
    {
        if (is_null($is_free_shipping)) {
            throw new \InvalidArgumentException('non-nullable is_free_shipping cannot be null');
        }
        $this->container['is_free_shipping'] = $is_free_shipping;

        return $this;
    }

    /**
     * Gets tax_class_id
     *
     * @return string|null
     */
    public function getTaxClassId()
    {
        return $this->container['tax_class_id'];
    }

    /**
     * Sets tax_class_id
     *
     * @param string|null $tax_class_id Defines tax classes where entity has to be added
     *
     * @return self
     */
    public function setTaxClassId($tax_class_id)
    {
        if (is_null($tax_class_id)) {
            throw new \InvalidArgumentException('non-nullable tax_class_id cannot be null');
        }
        $this->container['tax_class_id'] = $tax_class_id;

        return $this;
    }

    /**
     * Gets is_virtual
     *
     * @return bool|null
     */
    public function getIsVirtual()
    {
        return $this->container['is_virtual'];
    }

    /**
     * Sets is_virtual
     *
     * @param bool|null $is_virtual Defines whether the product is virtual
     *
     * @return self
     */
    public function setIsVirtual($is_virtual)
    {
        if (is_null($is_virtual)) {
            throw new \InvalidArgumentException('non-nullable is_virtual cannot be null');
        }
        $this->container['is_virtual'] = $is_virtual;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


